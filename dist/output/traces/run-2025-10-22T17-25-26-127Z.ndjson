{"name":"visor.run","attributes":{"started":true}}
{"name":"visor.run","attributes":{"started":true}}
{"name":"visor.run","attributes":{"started":true}}
{"name":"visor.run","attributes":{"started":true}}
{"name":"visor.provider","attributes":{"visor.check.id":"overview","visor.provider.type":"ai"}}
{"name":"visor.check","attributes":{"visor.check.id":"overview","visor.check.input.context":"{\"pr\":{\"number\":0,\"title\":\"Local Analysis: fix/minimal-gh-actions-entrypoint-from-main (No changes)\",\"author\":\"Leonid Bugaev\",\"branch\":\"fix/minimal-gh-actions-entrypoint-from-main\",\"base\":\"main\"},\"files\":[{\"filename\":\"src/index.ts\",\"additions\":25,\"deletions\":17,\"changes\":88,\"patch\":\"diff --git a/src/index.ts b/src/index.ts\\nindex 2f2a20d1..f769182e 100644\\n--- a/src/index.ts\\n+++ b/src/index.ts\\n@@ -1802,45 +1802,63 @@ if (\\n   process.env.VISOR_E2E_FORCE_RUN === 'true' ||\\n   (process.env.NODE_ENV !== 'test' && process.env.JEST_WORKER_ID === undefined)\\n ) {\\n-  (() => {\\n-    // Explicit, argument-driven mode selection. No auto-detection of GitHub Actions.\\n-    // Priority order: --mode flag > VISOR_MODE env > INPUT_MODE env > default 'cli'.\\n-    const argv = process.argv;\\n-    let modeFromArg: string | undefined;\\n-\\n-    for (let i = 0; i < argv.length; i++) {\\n-      const arg = argv[i];\\n-      if (arg === '--mode' && i + 1 < argv.length) {\\n-        modeFromArg = argv[i + 1];\\n-        break;\\n-      } else if (arg.startsWith('--mode=')) {\\n-        modeFromArg = arg.split('=')[1];\\n-        break;\\n+  (async () => {\\n+    // Minimal, yesterday-like behavior with a small exception:\\n+    // - Default to Action mode under GITHUB_ACTIONS\\n+    // - But if user explicitly invokes CLI help/version/validate or --mode cli, honor CLI even in Actions\\n+    const inGithub = process.env.GITHUB_ACTIONS === 'true' || !!process.env.GITHUB_ACTIONS;\\n+    const forceE2E = process.env.VISOR_E2E_FORCE_RUN === 'true';\\n+    const argv = process.argv.slice(2);\\n+    const explicitCliMode = (() => {\\n+      if (argv.includes('--cli')) return true;\\n+      const modeEq = argv.find(a => a.startsWith('--mode='));\\n+      if (modeEq && modeEq.split('=')[1]?.toLowerCase() === 'cli') return true;\\n+      const modeIdx = argv.indexOf('--mode');\\n+      if (modeIdx >= 0 && argv[modeIdx + 1]?.toLowerCase() === 'cli') return true;\\n+      return false;\\n+    })();\\n+    const wantsCliHelp =\\n+      argv.includes('--help') ||\\n+      argv.includes('-h') ||\\n+      argv.includes('--version') ||\\n+      argv.includes('-V') ||\\n+      argv.includes('validate');\\n+    const wantsCliJsonSarif = (() => {\\n+      const outEq = argv.find(a => a.startsWith('--output='));\\n+      if (outEq) {\\n+        const v = outEq.split('=')[1]?.toLowerCase();\\n+        if (v === 'json' || v === 'sarif') return true;\\n       }\\n-    }\\n-\\n-    const mode = (modeFromArg || process.env.VISOR_MODE || process.env.INPUT_MODE || 'cli')\\n-      .toString()\\n-      .toLowerCase();\\n-\\n-    const isGitHubMode = mode === 'github-actions' || mode === 'github';\\n+      const outIdx = argv.indexOf('--output');\\n+      if (outIdx >= 0) {\\n+        const v = argv[outIdx + 1]?.toLowerCase();\\n+        if (v === 'json' || v === 'sarif') return true;\\n+      }\\n+      return false;\\n+    })();\\n \\n-    if (isGitHubMode) {\\n-      // Run in GitHub Action mode explicitly\\n-      run();\\n+    if (inGithub && !explicitCliMode && !wantsCliHelp && !forceE2E && !wantsCliJsonSarif) {\\n+      // Run in GitHub Action mode explicitly and await completion to avoid early exit\\n+      try {\\n+        await run();\\n+      } catch (error) {\\n+        console.error('GitHub Action execution failed:', error);\\n+        // Prefer failing the action explicitly if available\\n+        try {\\n+          const { setFailed } = await import('@actions/core');\\n+          setFailed(error instanceof Error ? error.message : String(error));\\n+        } catch {}\\n+        process.exit(1);\\n+      }\\n     } else {\\n       // Default to CLI mode\\n-      import('./cli-main')\\n-        .then(({ main }) => {\\n-          main().catch(error => {\\n-            console.error('CLI execution failed:', error);\\n-            process.exit(1);\\n-          });\\n-        })\\n-        .catch(error => {\\n-          console.error('Failed to import CLI module:', error);\\n-          process.exit(1);\\n-        });\\n+      try {\\n+        const { main } = await import('./cli-main');\\n+        await main();\\n+      } catch (error) {\\n+        console.error('CLI execution failed:', error);\\n+        process.exit(1);\\n+      }\\n     }\\n   })();\\n }\\n\",\"status\":\"modified\"}],\"outputs\":{}}"},"events":[]}
