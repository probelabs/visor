{"version":3,"sources":["../../src/utils/mermaid-telemetry.ts"],"sourcesContent":["import { addEvent } from '../telemetry/trace-helpers';\nimport { addDiagramBlock } from '../telemetry/metrics';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst MERMAID_RE = /```mermaid\\s*\\n([\\s\\S]*?)\\n```/gi;\n\nexport type DiagramOrigin = 'content' | 'issue';\n\nexport function emitMermaidFromMarkdown(\n  checkName: string,\n  markdown: string,\n  origin: DiagramOrigin\n): number {\n  if (!markdown || typeof markdown !== 'string') return 0;\n  let m: RegExpExecArray | null;\n  let count = 0;\n  MERMAID_RE.lastIndex = 0;\n  while ((m = MERMAID_RE.exec(markdown)) != null) {\n    const code = (m[1] || '').trim();\n    if (code) {\n      try {\n        addEvent('diagram.block', { check: checkName, origin, code });\n        addDiagramBlock(origin);\n        // Fallback writer for environments where OTel SDK isn't active\n        if (process.env.VISOR_TRACE_REPORT === 'true') {\n          const outDir =\n            process.env.VISOR_TRACE_DIR || path.join(process.cwd(), 'output', 'traces');\n          try {\n            if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });\n            const ts = new Date().toISOString().replace(/[:.]/g, '-');\n            const jsonPath = path.join(outDir, `${ts}.trace.json`);\n            const htmlPath = path.join(outDir, `${ts}.report.html`);\n            // Append or create minimal trace JSON\n            let data: {\n              spans: Array<{ events: Array<{ name: string; attrs: Record<string, unknown> }> }>;\n            } = { spans: [] };\n            if (fs.existsSync(jsonPath)) {\n              try {\n                data = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));\n              } catch {\n                data = { spans: [] };\n              }\n            }\n            data.spans.push({\n              events: [{ name: 'diagram.block', attrs: { check: checkName, origin, code } }],\n            });\n            fs.writeFileSync(jsonPath, JSON.stringify(data, null, 2), 'utf8');\n            // Ensure minimal HTML report exists\n            if (!fs.existsSync(htmlPath)) {\n              fs.writeFileSync(\n                htmlPath,\n                '<!doctype html><html><head><meta charset=\"utf-8\"/><title>Visor Trace Report</title></head><body><h2>Visor Trace Report</h2></body></html>',\n                'utf8'\n              );\n            }\n          } catch {}\n        }\n        count++;\n      } catch {\n        // ignore telemetry failures\n      }\n    }\n  }\n  return count;\n}\n"],"mappings":";;;;;;;AAEA,YAAY,QAAQ;AACpB,YAAY,UAAU;AAEtB,IAAM,aAAa;AAIZ,SAAS,wBACd,WACA,UACA,QACQ;AACR,MAAI,CAAC,YAAY,OAAO,aAAa,SAAU,QAAO;AACtD,MAAI;AACJ,MAAI,QAAQ;AACZ,aAAW,YAAY;AACvB,UAAQ,IAAI,WAAW,KAAK,QAAQ,MAAM,MAAM;AAC9C,UAAM,QAAQ,EAAE,CAAC,KAAK,IAAI,KAAK;AAC/B,QAAI,MAAM;AACR,UAAI;AACF,iBAAS,iBAAiB,EAAE,OAAO,WAAW,QAAQ,KAAK,CAAC;AAC5D,wBAAgB,MAAM;AAEtB,YAAI,QAAQ,IAAI,uBAAuB,QAAQ;AAC7C,gBAAM,SACJ,QAAQ,IAAI,mBAAwB,UAAK,QAAQ,IAAI,GAAG,UAAU,QAAQ;AAC5E,cAAI;AACF,gBAAI,CAAI,cAAW,MAAM,EAAG,CAAG,aAAU,QAAQ,EAAE,WAAW,KAAK,CAAC;AACpE,kBAAM,MAAK,oBAAI,KAAK,GAAE,YAAY,EAAE,QAAQ,SAAS,GAAG;AACxD,kBAAM,WAAgB,UAAK,QAAQ,GAAG,EAAE,aAAa;AACrD,kBAAM,WAAgB,UAAK,QAAQ,GAAG,EAAE,cAAc;AAEtD,gBAAI,OAEA,EAAE,OAAO,CAAC,EAAE;AAChB,gBAAO,cAAW,QAAQ,GAAG;AAC3B,kBAAI;AACF,uBAAO,KAAK,MAAS,gBAAa,UAAU,MAAM,CAAC;AAAA,cACrD,QAAQ;AACN,uBAAO,EAAE,OAAO,CAAC,EAAE;AAAA,cACrB;AAAA,YACF;AACA,iBAAK,MAAM,KAAK;AAAA,cACd,QAAQ,CAAC,EAAE,MAAM,iBAAiB,OAAO,EAAE,OAAO,WAAW,QAAQ,KAAK,EAAE,CAAC;AAAA,YAC/E,CAAC;AACD,YAAG,iBAAc,UAAU,KAAK,UAAU,MAAM,MAAM,CAAC,GAAG,MAAM;AAEhE,gBAAI,CAAI,cAAW,QAAQ,GAAG;AAC5B,cAAG;AAAA,gBACD;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,YACF;AAAA,UACF,QAAQ;AAAA,UAAC;AAAA,QACX;AACA;AAAA,MACF,QAAQ;AAAA,MAER;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;","names":[]}