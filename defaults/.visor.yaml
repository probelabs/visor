version: "1.0"

# Default Visor configuration - provides comprehensive code analysis out-of-the-box
# Uses mock provider for CI compatibility when no AI API keys are configured
# Users can override this by creating their own .visor.yaml in their project root

# Global AI provider settings - users should configure their preferred provider
# For CI testing, use --provider mock CLI flag instead

# Global fail condition - fail if critical issues are found
fail_if: "output.issues && output.issues.some(i => i.severity === 'critical')"

checks:
  # Security analysis - Critical for all projects
  security:
    type: ai
    group: review
    schema: code-review
    prompt: |
        Please perform a comprehensive security analysis of the code changes in this pull request.

        ## Files Changed
        {% for file in files %}
        - `{{ file.filename }}` - {{ file.status }}, +{{ file.additions }}/-{{ file.deletions }} ({{ file.changes }} total changes)
        {% endfor %}

        ## Instructions
        Analyze the code for security vulnerabilities including:

        **Input Validation & Injection:**
        - SQL injection in database queries
        - XSS vulnerabilities in user input handling
        - Command injection in system calls
        - Path traversal in file operations

        **Authentication & Authorization:**
        - Weak authentication mechanisms
        - Session management flaws
        - Access control bypasses
        - Privilege escalation opportunities

        **Data Protection:**
        - Sensitive data exposure in logs/errors
        - Unencrypted data storage
        - API key or credential leaks
        - Privacy regulation compliance

        **Infrastructure Security:**
        - Insecure configurations
        - Missing security headers
        - Vulnerable dependencies
        - Resource exhaustion vulnerabilities

        Provide specific findings with clear explanations and actionable remediation steps.
    on: [pr_opened, pr_updated]

  # Performance analysis - Important for all applications
  performance:
    type: ai
    group: review
    schema: code-review
    prompt: |
        Review the code changes for performance issues:

        ## Files to Analyze
        {% for file in files %}
        - `{{ file.filename }}` ({{ file.changes }} changes, {{ file.status }})
        {% endfor %}

        ## Analysis Areas
        **Algorithm & Data Structure Efficiency:**
        - Time complexity analysis (O(n), O(nÂ²), etc.)
        - Space complexity and memory usage
        - Inefficient loops and nested operations
        - Suboptimal data structure choices

        **Database Performance:**
        - N+1 query problems
        - Missing database indexes
        - Inefficient JOIN operations
        - Large result set retrievals

        **Resource Management:**
        - Memory leaks and excessive allocations
        - File handle management
        - Connection pooling issues
        - Resource cleanup patterns

        **Async & Concurrency:**
        - Blocking operations in async contexts
        - Race conditions and deadlocks
        - Inefficient parallel processing

        Identify specific performance issues and provide optimization recommendations.
    on: [pr_opened, pr_updated]

  # Code quality and maintainability
  quality:
    type: ai
    group: review
    schema: code-review
    prompt: |
        Evaluate the code quality and maintainability of the changes:

        ## Quality Assessment Areas
        **Code Structure & Design:**
        - SOLID principles adherence
        - Design pattern appropriateness
        - Separation of concerns
        - Code organization and clarity

        **Error Handling & Reliability:**
        - Exception handling completeness
        - Error propagation patterns
        - Input validation thoroughness
        - Edge case coverage

        **Testing & Test Coverage:**
        - Missing tests for critical functionality
        - Test coverage gaps
        - Test quality and effectiveness
        - Edge cases and error scenarios coverage

        **Maintainability:**
        - Code testability issues
        - Dependencies and coupling problems
        - Technical debt introduction
        - Code duplication (DRY violations)

        **Language-Specific Best Practices:**
        - Idiomatic code usage
        - Framework/library best practices
        - Type safety (if applicable)

        Focus on actionable improvements that enhance code maintainability.
    on: [pr_opened, pr_updated]

  # PR overview with intelligent analysis
  overview:
    type: ai
    group: overview
    schema: plain
    prompt: |
        # ðŸ“‹ Pull Request Overview: {{ pr.title }}

        {% if pr.body %}
        ## Description
        {{ pr.body }}
        {% endif %}

        ## Files Changed Analysis

        | File | Type | Status | Changes | Impact |
        |------|------|--------|---------|--------|
        {% for file in files %}
        | `{{ file.filename }}` | {{ file.filename | split: "." | last | upcase }} | {{ file.status | capitalize }} | +{{ file.additions }}/-{{ file.deletions }} | {% if file.changes > 50 %}High{% elsif file.changes > 20 %}Medium{% else %}Low{% endif %} |
        {% endfor %}

        ## Architecture & Impact Assessment

        Please generate a comprehensive overview and analysis of this pull request.

        Follow these instructions to create a thorough assessment:

        1. **Change Impact Analysis**
           - What this PR accomplishes
           - Key technical changes introduced
           - Affected system components

        2. **Architecture Visualization**
           - Create appropriate mermaid diagram(s) showing:
             - Component relationships (use `graph TD/LR`)
             - Process flows (use `flowchart` or `sequenceDiagram`)
             - Data flow between modified components

        **Guidelines for diagrams:**
        - Use multiple diagrams if there are distinct architectural aspects
        - Choose the most appropriate diagram type for each concept
        - Focus on modified components and their relationships
        - Keep diagrams clean and informative

        Provide a balanced technical assessment suitable for both developers and stakeholders.
    on: [pr_opened, pr_updated]

  # Intelligent Issue Assistant - provides sophisticated issue triage and assistance
  issue-assistant:
    type: ai
    group: issue-support
    schema: plain
    prompt: |
        You are an intelligent GitHub issue assistant for the {{ event.repository.fullName }} repository. Your role is to provide professional, knowledgeable assistance based on the trigger event.

        ## Event Context
        **Event Type**: {{ event.name }} - {{ event.action }}
        {% if event.issue -%}
        **Issue #{{ event.issue.number }}**: {{ event.issue.title }}
        **Author**: {{ event.issue.author }}
        **State**: {{ event.issue.state }}
        **Created**: {{ event.issue.createdAt }}
        {%- if event.issue.labels.size > 0 %}
        **Labels**: {% for label in event.issue.labels %}{{ label.name }}{% unless forloop.last %}, {% endunless %}{% endfor %}
        {%- endif %}
        {%- if event.issue.assignees.size > 0 %}
        **Assignees**: {% for assignee in event.issue.assignees %}{{ assignee }}{% unless forloop.last %}, {% endunless %}{% endfor %}
        {%- endif %}
        {%- endif %}
        {%- if event.comment %}
        **Comment by**: {{ event.comment.author }}
        {%- endif %}

        ## Repository Analysis Context
        {%- if pr.title %}
        **Recent PR Activity**: {{ pr.title }}
        {%- endif %}
        {%- if utils.totalFiles > 0 %}
        **Project Size**: {{ utils.totalFiles }} files
        **Technologies**: {% for ext in utils.filesByExtension %}{{ ext[0] }}{% unless forloop.last %}, {% endunless %}{% endfor %}
        {%- endif %}

        ## Instructions

        {%- if event.name == 'issues' and event.action == 'opened' %}

        **ISSUE TRIAGE MODE**

        Analyze this new issue and provide intelligent triage:

        ### Issue Content
        {{ event.issue.body }}

        ### Analysis Tasks
        1. **Categorize** the issue (bug/feature/documentation/question/enhancement/maintenance)
        2. **Assess priority** (low/medium/high/urgent) based on:
           - Impact on users/system
           - Security implications
           - Blocking nature
           - Community interest
        3. **Estimate complexity** (trivial/simple/moderate/complex)
        4. **Suggest timeline** for resolution
        5. **Recommend labels** that would help with organization
        6. **Identify stakeholders** who should be involved or assignees
        7. **Provide initial response** to the issue author

        ### Response Requirements
        - Be professional and welcoming
        - Show you understand the request
        - Provide clear next steps
        - Ask clarifying questions if needed
        - Include technical insights where appropriate

        {%- elsif event.name == 'issue_comment' %}

        **ASSISTANCE MODE**

        A user has asked a question or provided additional information. Provide helpful technical assistance:

        ### Original Issue
        {%- if event.issue.title %}
        **Title**: {{ event.issue.title }}
        {%- endif %}
        {%- if event.issue.body %}
        **Description**: {{ event.issue.body }}
        {%- endif %}

        ### Latest Comment
        {{ event.comment.body }}

        ### Analysis Tasks
        1. **Understand the context** of their question/comment
        2. **Provide technical guidance** based on project knowledge
        3. **Reference relevant code/files** if applicable
        4. **Suggest implementation approaches** for feature requests
        5. **Provide debugging steps** for bug reports
        6. **Link to documentation** or similar issues if helpful
        7. **Offer code examples** when appropriate

        ### Response Requirements
        - Address their specific question directly
        - Provide actionable guidance
        - Be encouraging and supportive
        - Use technical language appropriate to their level
        - Include code examples where helpful
        - Reference project conventions and patterns

        {%- endif %}

        ### Special Instructions
        - Always be professional, helpful, and encouraging
        - Focus on actionable advice and clear next steps
        - Use markdown formatting for better readability
        - Include relevant code examples when helpful
        - Reference project context and patterns when applicable
        - If dealing with `/visor` commands in comments, acknowledge and provide assistance
        - Maintain consistency with project tone and contributor guidelines

        ### Response Format
        Provide a well-structured markdown response with clear sections and helpful guidance.
    on: [issue_opened, issue_comment]

# Output configuration
output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: true