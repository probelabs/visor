# Visor Configuration Example
# This file demonstrates how to configure GitHub Checks API integration

version: "1.0"

# Output configuration
output:
  # PR comment settings
  pr_comment:
    format: markdown
    group_by: check
    collapse: false

  # GitHub Check Runs configuration (NEW!)
  github_checks:
    # Enable/disable GitHub check runs (default: true)
    enabled: true
    # Create individual check runs per configured check (default: true)
    # If false, creates a single combined check run
    per_check: true
    # Custom name prefix for check runs (default: "Visor")
    name_prefix: "Visor AI"

# Check definitions
checks:
  security-audit:
    type: ai
    prompt: "Review this code for security vulnerabilities, focusing on input validation, authentication, authorization, and data sanitization."
    focus: security
    on: [pr_opened, pr_updated]
    # Fail this specific check if critical security issues are found
    fail_if: "criticalIssues > 0"

  performance-review:
    type: ai
    prompt: "Analyze this code for performance issues including algorithmic complexity, resource usage, and optimization opportunities."
    focus: performance
    on: [pr_opened, pr_updated]
    # Fail if more than 2 performance issues are found
    fail_if: "errorIssues > 2"

  code-style:
    type: ai
    prompt: "Check code style, formatting, naming conventions, and code organization best practices."
    focus: style
    on: [pr_opened, pr_updated]
    # Only warn for style issues, don't fail the check
    fail_if: "false"

# Global failure condition - fails any check if total critical issues > 0
fail_if: "criticalIssues > 0"

# Environment variables (optional)
env:
  # These would typically be set via GitHub Action secrets
  ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
  GOOGLE_AI_API_KEY: "${GOOGLE_AI_API_KEY}"
  OPENAI_API_KEY: "${OPENAI_API_KEY}"

# Global AI provider settings (optional)
ai_provider: "anthropic"  # or "google", "openai"
ai_model: "claude-3-sonnet-20240229"  # provider-specific model