name: üîç Visor Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  visor-review:
    name: AI-Powered Code Review
    runs-on: ubuntu-latest
    
    # Only run on PR comments that start with /review or on PR events
    if: |
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       startsWith(github.event.comment.body, '/review')) ||
      github.event_name == 'pull_request'
    
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: üì¶ Install dependencies
        run: npm ci
      
      - name: üèóÔ∏è Build Visor
        run: npm run build
      
      - name: üîç Run Visor Analysis
        id: visor-analysis
        run: |
          # Parse command arguments from comment if triggered by comment
          VISOR_ARGS="--check all --output markdown"
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            if [[ "$COMMENT_BODY" =~ /review[[:space:]]+(.+) ]]; then
              VISOR_ARGS="${BASH_REMATCH[1]}"
            fi
          fi
          
          echo "Running: visor $VISOR_ARGS"
          ./dist/cli-main.js $VISOR_ARGS > analysis_result.md 2>&1 || {
            echo "Visor analysis failed, but continuing..."
            echo "## ‚ö†Ô∏è Analysis Warning" > analysis_result.md
            echo "The code analysis encountered some issues but was able to complete a basic review." >> analysis_result.md
            echo "" >> analysis_result.md
          }
          
          # Also generate JSON for GitHub Action outputs
          ./dist/cli-main.js $VISOR_ARGS --output json > analysis_result.json 2>/dev/null || echo "{}" > analysis_result.json
          
          # Extract key metrics for GitHub outputs
          OVERALL_SCORE=$(jq -r '.summary.overallScore // 0' analysis_result.json)
          TOTAL_ISSUES=$(jq -r '.summary.totalIssues // 0' analysis_result.json)
          CRITICAL_ISSUES=$(jq -r '.summary.criticalIssues // 0' analysis_result.json)
          
          echo "overall-score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
          echo "total-issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT  
          echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
      
      - name: üí¨ Post Review Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the analysis result
            let analysisContent;
            try {
              analysisContent = fs.readFileSync('analysis_result.md', 'utf8');
            } catch (error) {
              analysisContent = '## ‚ö†Ô∏è Analysis Error\n\nUnable to read analysis results.';
            }
            
            // Add metadata header
            const metadata = {
              overall_score: '${{ steps.visor-analysis.outputs.overall-score }}',
              total_issues: '${{ steps.visor-analysis.outputs.total-issues }}',
              critical_issues: '${{ steps.visor-analysis.outputs.critical-issues }}',
              triggered_by: context.eventName === 'issue_comment' ? context.actor : 'auto',
              timestamp: new Date().toISOString()
            };
            
            const header = `<!-- visor-review-${metadata.timestamp} -->
            ## ü§ñ Visor AI Code Review
            
            **Triggered by:** ${metadata.triggered_by === 'auto' ? 'PR opened/updated' : '@' + metadata.triggered_by + ' command'}  
            **Overall Score:** ${metadata.overall_score}/100  
            **Issues Found:** ${metadata.total_issues} (${metadata.critical_issues} critical)  
            **Analysis Time:** ${new Date().toLocaleString()}
            
            ---
            
            `;
            
            const fullComment = header + analysisContent + '\n\n---\n*üí° Use `/review --help` to see available options*';
            
            // Determine if this is a PR or issue comment
            if (context.eventName === 'pull_request') {
              // Post on PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: fullComment
              });
            } else {
              // Post on issue (PR comment)
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: fullComment
              });
            }
      
      - name: üìä Create Check Run
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const overallScore = parseInt('${{ steps.visor-analysis.outputs.overall-score }}');
            const totalIssues = parseInt('${{ steps.visor-analysis.outputs.total-issues }}');
            const criticalIssues = parseInt('${{ steps.visor-analysis.outputs.critical-issues }}');
            
            // Determine check status
            let conclusion = 'success';
            let title = '‚úÖ Code review passed';
            
            if (criticalIssues > 0) {
              conclusion = 'failure';
              title = `‚ùå ${criticalIssues} critical issues found`;
            } else if (overallScore < 70) {
              conclusion = 'failure';
              title = `‚ö†Ô∏è Low quality score: ${overallScore}/100`;
            } else if (totalIssues > 5) {
              conclusion = 'neutral';
              title = `‚ö†Ô∏è ${totalIssues} issues found`;
            }
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Visor Code Review',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: title,
                summary: `
                **Overall Score:** ${overallScore}/100
                **Total Issues:** ${totalIssues}
                **Critical Issues:** ${criticalIssues}
                
                See the PR comment for detailed analysis results.
                `
              }
            });
      
      - name: üè∑Ô∏è Add Labels
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const overallScore = parseInt('${{ steps.visor-analysis.outputs.overall-score }}');
            const criticalIssues = parseInt('${{ steps.visor-analysis.outputs.critical-issues }}');
            
            const labelsToAdd = [];
            const labelsToRemove = ['visor:excellent', 'visor:good', 'visor:needs-work', 'visor:critical'];
            
            // Add quality labels
            if (criticalIssues > 0) {
              labelsToAdd.push('visor:critical');
            } else if (overallScore >= 90) {
              labelsToAdd.push('visor:excellent');
            } else if (overallScore >= 70) {
              labelsToAdd.push('visor:good');
            } else {
              labelsToAdd.push('visor:needs-work');
            }
            
            // Remove old labels
            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  name: label
                });
              } catch (error) {
                // Label might not exist, ignore
              }
            }
            
            // Add new labels
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: labelsToAdd
              });
            }
      
      - name: üìà Upload Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: visor-analysis-results
          path: |
            analysis_result.md
            analysis_result.json
          retention-days: 30