name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0

jobs:
  release-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # For npm provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Build package
        run: npm run build

      - name: Verify package files
        run: |
          echo "ðŸ“¦ Package contents:"
          npm pack --dry-run
          echo "âœ… Package verification complete"

      - name: Set version from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting package version to $VERSION"
          npm version $VERSION --no-git-tag-version

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Post-release notification
        if: success()
        run: |
          echo "ðŸŽ‰ Successfully published @probelabs/visor@${GITHUB_REF#refs/tags/v} to npm!"
          echo "ðŸ“¦ Install with: npx -y @probelabs/visor"

  release-action:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Bundle action
        run: |
          # Install ncc to bundle the action
          npm install -g @vercel/ncc

          # Create dist folder for GitHub Action
          mkdir -p action-dist

          # Bundle the main action file with all dependencies
          ncc build dist/index.js -o action-dist --license licenses.txt

          # Copy action.yml to root of action-dist
          cp action.yml action-dist/

          # Create a minimal package.json for the action
          VERSION=${GITHUB_REF#refs/tags/v}
          echo '{
            "name": "visor-action",
            "version": "'$VERSION'",
            "private": true,
            "main": "index.js"
          }' > action-dist/package.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') || contains(github.ref, '-rc') }}
          body: |
            ## What's Changed

            See auto-generated release notes below.

            ### Using Visor as a GitHub Action

            ```yaml
            - uses: ${{ github.repository }}@${{ github.ref_name }}
              with:
                github_token: ${{ secrets.GITHUB_TOKEN }}
                checks: performance,security,architecture,style
            ```

            ### Using Visor CLI

            ```bash
            npx -y @probelabs/visor --check all
            ```

            ### Installation Options

            **NPM (Global)**
            ```bash
            npm install -g @probelabs/visor
            visor --check all
            ```

            **NPX (No installation)**
            ```bash
            npx -y @probelabs/visor --check security --output json
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create action branch
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create orphan branch for action dist
          git checkout --orphan action-dist

          # Remove all files
          git rm -rf .

          # Copy only action dist files
          cp -r action-dist/* .

          # Add and commit
          git add .
          git commit -m "Release action dist for ${GITHUB_REF_NAME}"

          # Force push to action-dist branch
          git push origin action-dist --force

          echo "âœ… Action dist pushed to action-dist branch"
          echo "ðŸ“¦ Users can now use: uses: ${{ github.repository }}@action-dist"