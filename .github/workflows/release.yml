name: Release

on:
  # Manual trigger with version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

  # Still support tag-based releases for automation
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0

jobs:
  release-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # For npm provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update probe to latest
        run: npm run update-probe

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Build package
        run: npm run build

      - name: Verify package files
        run: |
          echo "ðŸ“¦ Package contents:"
          npm pack --dry-run
          echo "âœ… Package verification complete"

      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v$VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG_NAME=${GITHUB_REF##*/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Setting package version to $VERSION"
          npm version $VERSION --no-git-tag-version

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Post-release notification
        if: success()
        run: |
          echo "ðŸŽ‰ Successfully published @probelabs/visor@${GITHUB_REF#refs/tags/v} to npm!"
          echo "ðŸ“¦ Install with: npx -y @probelabs/visor"

  # First job: Build, bundle, commit files and create tag
  build-and-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v$VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG_NAME=${GITHUB_REF##*/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Setting package version to $VERSION"

      - name: Bundle action
        run: |
          # Install ncc to bundle the action
          npm install -g @vercel/ncc

          # Create dist folder for GitHub Action
          mkdir -p action-dist

          # Bundle the main action file with all dependencies
          ncc build dist/index.js -o action-dist --license licenses.txt

          # Copy action.yml to root of action-dist
          cp action.yml action-dist/

          # Create a minimal package.json for the action
          echo '{
            "name": "visor-action",
            "version": "'${{ env.VERSION }}'",
            "private": true,
            "main": "index.js"
          }' > action-dist/package.json

      - name: Commit bundled files and create tag
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Copy bundled files to dist/ directory in the repo
          mkdir -p dist
          cp action-dist/index.js dist/
          cp action-dist/licenses.txt dist/ 2>/dev/null || true

          # Add bundled files to git (force add since dist/ is in .gitignore)
          git add -f dist/ action.yml

          # Check if there are changes to commit
          if ! git diff --cached --quiet; then
            git commit -m "Add bundled dist files for ${{ env.TAG_NAME }}"
            git push origin main
          else
            echo "No changes to commit"
          fi

          # For manual releases, create the tag. For tag-triggered releases, update it
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Create new tag for manual release
            git tag ${{ env.TAG_NAME }}
            git push origin ${{ env.TAG_NAME }}
          else
            # Update existing tag for tag-triggered release
            git tag -d ${{ env.TAG_NAME }} || true
            git push origin :refs/tags/${{ env.TAG_NAME }} || true
            git tag ${{ env.TAG_NAME }}
            git push origin ${{ env.TAG_NAME }}
          fi

          echo "âœ… Bundled files committed and tag created/updated"
          echo "ðŸ“¦ Users can now use: uses: ${{ github.repository }}@${{ env.TAG_NAME }}"

    outputs:
      version: ${{ env.VERSION }}
      tag_name: ${{ env.TAG_NAME }}

  # Second job: Create GitHub Release (after tag exists)
  create-release:
    runs-on: ubuntu-latest
    needs: build-and-tag
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.3.3
        with:
          tag_name: ${{ needs.build-and-tag.outputs.tag_name }}
          name: Release ${{ needs.build-and-tag.outputs.tag_name }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || contains(needs.build-and-tag.outputs.version, '-beta') || contains(needs.build-and-tag.outputs.version, '-alpha') || contains(needs.build-and-tag.outputs.version, '-rc') }}
          body: |
            ## What's Changed

            See auto-generated release notes below.

            ### Using Visor as a GitHub Action

            ```yaml
            - uses: ${{ github.repository }}@${{ needs.build-and-tag.outputs.tag_name }}
            ```

            ### Using Visor CLI

            ```bash
            npx -y @probelabs/visor --check all
            ```

            ### Installation Options

            **NPM (Global)**
            ```bash
            npm install -g @probelabs/visor
            visor --check all
            ```

            **NPX (No installation)**
            ```bash
            npx -y @probelabs/visor --check security --output json
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}