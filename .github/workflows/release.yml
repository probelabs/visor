name: Release

on:
  # Manual trigger with version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

  # Still support tag-based releases for automation
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0

jobs:
  release-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # For npm provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update probe to latest
        run: npm run update-probe

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Build package
        run: npm run build

      - name: Verify package files
        run: |
          echo "üì¶ Package contents:"
          npm pack --dry-run
          echo "‚úÖ Package verification complete"

      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v$VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG_NAME=${GITHUB_REF##*/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Setting package version to $VERSION"
          npm version $VERSION --no-git-tag-version

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Post-release notification
        if: success()
        run: |
          echo "üéâ Successfully published @probelabs/visor@${GITHUB_REF#refs/tags/v} to npm!"
          echo "üì¶ Install with: npx -y @probelabs/visor"

  # GitHub Release creation with AI-generated notes
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0  # Need full history for git log

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Set version variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v$VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG_NAME=${GITHUB_REF##*/}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "üìã Processing release for ${TAG_NAME}"

      - name: Generate AI release notes
        id: release-notes
        run: |
          echo "ü§ñ Generating AI-powered release notes..."

          # Get previous tag for comparison
          PREV_TAG=$(git describe --tags --abbrev=0 ${TAG_NAME}^ 2>/dev/null || echo "")

          # Get commits and diff stats since last tag
          if [ -n "$PREV_TAG" ]; then
            GIT_LOG=$(git log --oneline --no-merges ${PREV_TAG}..${TAG_NAME} 2>/dev/null || git log --oneline --no-merges ${TAG_NAME})
            GIT_DIFF_STAT=$(git diff --stat ${PREV_TAG}..${TAG_NAME} 2>/dev/null || git diff --stat $(git hash-object -t tree /dev/null)..${TAG_NAME})
            echo "üìä Found $(echo "$GIT_LOG" | wc -l) commits since ${PREV_TAG}"
          else
            GIT_LOG=$(git log --oneline --no-merges ${TAG_NAME})
            GIT_DIFF_STAT=$(git diff --stat $(git hash-object -t tree /dev/null)..${TAG_NAME})
            echo "üìä Found $(echo "$GIT_LOG" | wc -l) commits (first release)"
          fi

          # Generate release notes with Visor AI
          echo "üîç Running Visor AI to generate release notes..."
          VISOR_OUTPUT=$(TAG_NAME=${{ env.TAG_NAME }} \
            GIT_LOG="$GIT_LOG" \
            GIT_DIFF_STAT="$GIT_DIFF_STAT" \
            timeout 300 ./dist/index.js --cli --check release-notes --config .visor.yaml --output json 2>&1 || true)

          echo "üìã Visor output:"
          echo "$VISOR_OUTPUT"

          # Extract release notes from JSON output
          RELEASE_NOTES=$(echo "$VISOR_OUTPUT" | jq -r '.checks[]? | select(.checkName == "release-notes") | .suggestions[]? // empty' 2>/dev/null || echo "")

          # Fallback if AI generation fails
          if [ -z "$RELEASE_NOTES" ] || [ "$RELEASE_NOTES" = "null" ]; then
            echo "‚ö†Ô∏è AI release notes generation failed, creating fallback notes"
            RELEASE_NOTES="## üöÄ What's New in ${{ env.TAG_NAME }}

            ### üìù Changes
            $(echo "$GIT_LOG" | sed 's/^/- /')

            ### üìä Statistics
            - $(echo "$GIT_LOG" | wc -l) commits since ${PREV_TAG:-start}
            - Generated automatically from git history"
          else
            echo "‚úÖ Successfully generated AI release notes"
          fi

          # Save to GitHub output (handle multiline properly)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.3.3
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || contains(env.VERSION, '-beta') || contains(env.VERSION, '-alpha') || contains(env.VERSION, '-rc') }}
          body: |
            ${{ steps.release-notes.outputs.RELEASE_NOTES }}

            ---

            ## üìã Installation & Usage

            ### Using Visor as a GitHub Action
            ```yaml
            - uses: ${{ github.repository }}@${{ env.TAG_NAME }}
            ```

            ### Using Visor CLI
            ```bash
            npx -y @probelabs/visor --check all
            ```

            ### Installation Options

            **NPM (Global)**
            ```bash
            npm install -g @probelabs/visor
            visor --check all
            ```

            **NPX (No installation)**
            ```bash
            npx -y @probelabs/visor --check security --output json
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}