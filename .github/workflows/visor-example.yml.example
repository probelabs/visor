# Example workflow showing different ways to use Visor
# Copy this to your .github/workflows/ directory and customize as needed
#
# NOTE: For fork PR support with check runs, use pull_request_target instead of pull_request
# See docs/GITHUB_CHECKS.md#fork-pr-support for details

name: üîç Visor AI Code Review Examples

on:
  # Uncomment to enable
  # pull_request:  # For same-repo PRs (default)
  #   types: [opened, synchronize, reopened]
  # pull_request_target:  # For fork PRs with check runs
  #   types: [opened, synchronize, reopened]
  # issue_comment:
  #   types: [created]
  workflow_dispatch: # Manual trigger for testing

permissions:
  contents: read
  pull-requests: write
  issues: write
  security-events: write

jobs:
  # Example 1: Basic security-focused review
  security-review:
    name: Security Review
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run build
      
      - name: Security Analysis
        run: |
          ./dist/cli-main.js --check security --output sarif > security.sarif
          ./dist/cli-main.js --check security --output markdown > security-report.md
      
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: security.sarif
      
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security.sarif
            security-report.md

  # Example 2: Performance analysis with custom scoring
  performance-review:
    name: Performance Review  
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run build
      
      - name: Performance Analysis
        id: perf-analysis
        run: |
          # Run analysis and extract score
          ./dist/cli-main.js --check performance --output json > perf-results.json
          
          SCORE=$(jq -r '.summary.overallScore' perf-results.json)
          ISSUES=$(jq -r '.summary.totalIssues' perf-results.json)
          
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          # Fail if score is too low
          if [ "$SCORE" -lt 70 ]; then
            echo "‚ùå Performance score too low: $SCORE/100"
            exit 1
          fi
      
      - name: Performance Summary
        run: |
          echo "üöÄ Performance Analysis Complete"
          echo "Score: ${{ steps.perf-analysis.outputs.score }}/100"
          echo "Issues: ${{ steps.perf-analysis.outputs.issues }}"

  # Example 3: Full analysis with PR commenting
  full-review:
    name: Full Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run build
      
      - name: Full Analysis
        id: full-analysis
        run: |
          ./dist/cli-main.js --check all --output json > full-results.json
          ./dist/cli-main.js --check all --output markdown > full-report.md
          
          # Extract metrics
          OVERALL_SCORE=$(jq -r '.summary.overallScore' full-results.json)
          TOTAL_ISSUES=$(jq -r '.summary.totalIssues' full-results.json)
          CRITICAL_ISSUES=$(jq -r '.summary.criticalIssues' full-results.json)
          
          echo "overall-score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
          echo "total-issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
      
      - name: Create PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('full-report.md', 'utf8');
            
            const score = '${{ steps.full-analysis.outputs.overall-score }}';
            const issues = '${{ steps.full-analysis.outputs.total-issues }}';
            const critical = '${{ steps.full-analysis.outputs.critical-issues }}';
            
            const emoji = score >= 80 ? '‚úÖ' : score >= 60 ? '‚ö†Ô∏è' : '‚ùå';
            const header = `## ${emoji} Visor AI Code Review\n\n**Score:** ${score}/100 | **Issues:** ${issues} | **Critical:** ${critical}\n\n---\n\n`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: header + report
            });
      
      - name: Create Check Run
        uses: actions/github-script@v7
        with:
          script: |
            const score = parseInt('${{ steps.full-analysis.outputs.overall-score }}');
            const critical = parseInt('${{ steps.full-analysis.outputs.critical-issues }}');
            
            let conclusion = 'success';
            let title = '‚úÖ Code review passed';
            
            if (critical > 0) {
              conclusion = 'failure';
              title = `‚ùå ${critical} critical issues found`;
            } else if (score < 70) {
              conclusion = 'failure';
              title = `‚ö†Ô∏è Quality score below threshold: ${score}/100`;
            }
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Visor Full Review',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: title,
                summary: `Overall Score: ${score}/100\nSee PR comment for detailed analysis.`
              }
            });

  # Example 4: Command-triggered reviews
  command-review:
    name: Command Review
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/visor')
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run build
      
      - name: Parse Command
        id: parse-command
        run: |
          COMMENT="${{ github.event.comment.body }}"
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT
          
          # Extract arguments from command
          if [[ "$COMMENT" =~ /visor[[:space:]]+(.+) ]]; then
            ARGS="${BASH_REMATCH[1]}"
            echo "args=$ARGS" >> $GITHUB_OUTPUT
          else
            echo "args=--check all --output markdown" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Visor Command
        run: |
          echo "Running: visor ${{ steps.parse-command.outputs.args }}"
          ./dist/cli-main.js ${{ steps.parse-command.outputs.args }} > command-results.md 2>&1
      
      - name: Post Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('command-results.md', 'utf8');
            
            const header = `## ü§ñ Visor Command Results\n\n**Triggered by:** @${{ github.event.comment.user.login }}\n**Command:** \`${{ steps.parse-command.outputs.comment }}\`\n\n---\n\n`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: header + results
            });

  # Example 5: Matrix testing across different check types
  matrix-review:
    name: Matrix Review (${{ matrix.check }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [security, performance, style, architecture]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run build
      
      - name: Run ${{ matrix.check }} Analysis
        run: |
          ./dist/cli-main.js --check ${{ matrix.check }} --output json > ${{ matrix.check }}-results.json
          ./dist/cli-main.js --check ${{ matrix.check }} --output markdown > ${{ matrix.check }}-report.md
      
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.check }}-analysis
          path: |
            ${{ matrix.check }}-results.json
            ${{ matrix.check }}-report.md