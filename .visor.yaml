version: "1.0"

# General-purpose code review configuration suitable for any project
# This configuration provides comprehensive analysis while being language-agnostic
# and adaptable to different project types and coding standards.

checks:
  # Security analysis - Critical for all projects
  security:
    type: ai
    group: review
    schema: code-review
    prompt:
      content: |
        Please perform a comprehensive security analysis of the code changes in this pull request.
        
        Use the following template to structure your analysis:

        # Security Analysis for PR {{ pr.number }}: {{ pr.title }}

        ## Context
        - Repository: {{ event.repository.fullName or "project" }}
        - Files changed: {{ files.size }}
        - Author: {{ pr.author }}

        ## File Analysis
        {% assign tsFiles = utils.filesByExtension.ts %}
        {% assign jsFiles = utils.filesByExtension.js %}
        {% assign pyFiles = utils.filesByExtension.py %}
        {% assign otherFiles = files | where: "filename", "*" %}
        
        {% if tsFiles.size > 0 %}
        ### TypeScript Files ({{ tsFiles.size }})
        {% for file in tsFiles %}
        - `{{ file.filename }}` ({{ file.status }}, {{ file.changes }} changes)
        {% endfor %}
        {% endif %}
        
        {% if jsFiles.size > 0 %}
        ### JavaScript Files ({{ jsFiles.size }})
        {% for file in jsFiles %}
        - `{{ file.filename }}` ({{ file.status }}, {{ file.changes }} changes)
        {% endfor %}
        {% endif %}
        
        {% if pyFiles.size > 0 %}
        ### Python Files ({{ pyFiles.size }})
        {% for file in pyFiles %}
        - `{{ file.filename }}` ({{ file.status }}, {{ file.changes }} changes)
        {% endfor %}
        {% endif %}
        
        ### All Changed Files
        {% for file in files %}
        - `{{ file.filename }}` ({{ file.status }}, {{ file.changes }} changes)
        {% endfor %}

        ## Instructions
        Follow these security review guidelines and analyze for vulnerabilities:

        **Input Validation & Injection Attacks:**
        - SQL injection in database queries
        - XSS vulnerabilities in user input handling
        - Command injection in system calls
        - Path traversal in file operations
        - LDAP injection in authentication

        **Authentication & Authorization:**
        - Weak authentication mechanisms
        - Session management flaws
        - Access control bypasses
        - Privilege escalation opportunities
        - JWT token handling issues

        **Data Protection:**
        - Sensitive data exposure in logs/errors
        - Unencrypted data storage
        - Insecure data transmission
        - API key or credential leaks
        - Privacy regulation compliance

        **Infrastructure Security:**
        - Insecure configurations
        - Missing security headers
        - Vulnerable dependencies
        - Unsafe deserializations
        - Resource exhaustion vulnerabilities

        Provide specific findings with clear explanations and actionable remediation steps for each issue discovered.
    on: [pr_opened, pr_updated]

  # Performance analysis - Important for all applications
  performance:
    type: ai
    group: review
    schema: code-review
    prompt:
      content: |
        Please analyze the performance implications of the code changes in this pull request.
        
        Use the following template to organize your analysis:

        # Performance Analysis for PR {{ pr.number }}

        {% if utils.hasLargeChanges %}
        ⚠️ **Large Changes Detected** - Extra attention to performance implications.
        {% endif %}

        ## Files to Analyze
        {% for file in files %}
        - `{{ file.filename }}` ({{ file.changes }} changes, {{ file.status }})
        {% endfor %}

        ## Instructions
        Review the code changes according to these performance criteria:

        **Algorithm & Data Structure Efficiency:**
        - Time complexity analysis (O(n), O(n²), etc.)
        - Space complexity and memory usage
        - Inefficient loops and nested operations
        - Suboptimal data structure choices

        **Database Performance:**
        - N+1 query problems
        - Missing database indexes
        - Inefficient JOIN operations
        - Large result set retrievals
        - Transaction scope issues

        **Resource Management:**
        - Memory leaks and excessive allocations
        - File handle management
        - Connection pooling issues
        - Resource cleanup patterns

        **Async & Concurrency:**
        - Blocking operations in async contexts
        - Race conditions and deadlocks
        - Inefficient parallel processing
        - Thread safety concerns

        **Frontend Performance (if applicable):**
        - Bundle size impact
        - Render-blocking operations
        - Unnecessary re-renders
        - Large asset optimization

        Identify specific performance issues and provide optimization recommendations with expected impact.
    on: [pr_opened, pr_updated]

  # Code quality and maintainability
  quality:
    type: ai
    group: review
    schema: code-review
    prompt:
      content: |
        Please evaluate the code quality and maintainability of the changes in this pull request.
        
        Use the following template to structure your review:

        # Code Quality Review for PR {{ pr.number }}


        ## Instructions
        Assess the code quality according to these guidelines:

        **Code Structure & Design:**
        - SOLID principles adherence
        - Design pattern appropriateness
        - Separation of concerns
        - Module cohesion and coupling
        - Code organization and clarity

        **Naming & Documentation:**
        - Variable, function, and class naming clarity
        - Comment quality and relevance
        - API documentation completeness
        - Code self-documentation level

        **Error Handling & Reliability:**
        - Exception handling completeness
        - Error propagation patterns
        - Graceful failure handling
        - Input validation thoroughness
        - Edge case coverage

        **Testing & Maintainability:**
        - Test coverage implications
        - Code testability
        - Dependencies and coupling
        - Technical debt introduction
        - Future maintenance considerations

        **Language-Specific Best Practices:**
        - Idiomatic code usage
        - Framework/library best practices
        - Type safety (if applicable)
        - Resource management patterns

        Focus on actionable improvements that enhance code maintainability and provide specific recommendations.
    on: [pr_opened, pr_updated]

  # PR overview with intelligent analysis
  overview:
    type: ai
    group: overview
    schema: plain
    prompt:
      content: |
        # 📋 Pull Request Overview: {{ pr.title }}

        {% if pr.body %}
        ## Description
        {{ pr.body }}
        {% endif %}

        ## Files Changed Analysis

        | File | Type | Status | Changes | Impact |
        |------|------|--------|---------|--------|
        {% for file in files %}
        | `{{ file.filename }}` | {{ file.filename | split: "." | last | upcase }} | {{ file.status | capitalize }} | +{{ file.additions }}/-{{ file.deletions }} | {% if file.changes > 50 %}High{% elsif file.changes > 20 %}Medium{% else %}Low{% endif %} |
        {% endfor %}

        ## Architecture & Impact Assessment

        Please generate a comprehensive overview and analysis of this pull request.
        
        Follow these instructions to create a thorough assessment:

        1. **Change Impact Analysis**
           - What this PR accomplishes
           - Key technical changes introduced
           - Affected system components

        2. **Architecture Visualization**
           - Create appropriate mermaid diagram(s) showing:
             - Component relationships (use `graph TD/LR`)
             - Process flows (use `flowchart` or `sequenceDiagram`)
             - Data flow between modified components

        **Guidelines for diagrams:**
        - Use multiple diagrams if there are distinct architectural aspects
        - Choose the most appropriate diagram type for each concept
        - Focus on modified components and their relationships
        - Keep diagrams clean and informative

        Provide a balanced technical assessment suitable for both developers and stakeholders.
    on: [pr_opened, pr_updated]

