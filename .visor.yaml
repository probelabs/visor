version: "1.0"

# General-purpose code review configuration suitable for any project
# This configuration provides comprehensive analysis while being language-agnostic
# and adaptable to different project types and coding standards.

# Global fail condition - fail if critical or error issues found in code-review schema checks
fail_if: "output.issues.some(i => i.severity === 'critical' || i.severity === 'error')"

checks:
  # Security analysis - Critical for all projects
  security:
    type: ai
    group: review
    schema: code-review
    prompt: |
        Please perform a comprehensive security analysis of the code changes in this pull request.

        ## Files Changed
        {% for file in files %}
        - `{{ file.filename }}` - {{ file.status }}, +{{ file.additions }}/-{{ file.deletions }} ({{ file.changes }} total changes)
        {% endfor %}

        ## Instructions
        Follow these security review guidelines and analyze for vulnerabilities:

        **Input Validation & Injection Attacks:**
        - SQL injection in database queries
        - XSS vulnerabilities in user input handling
        - Command injection in system calls
        - Path traversal in file operations
        - LDAP injection in authentication

        **Authentication & Authorization:**
        - Weak authentication mechanisms
        - Session management flaws
        - Access control bypasses
        - Privilege escalation opportunities
        - JWT token handling issues

        **Data Protection:**
        - Sensitive data exposure in logs/errors
        - Unencrypted data storage
        - Insecure data transmission
        - API key or credential leaks
        - Privacy regulation compliance

        **Infrastructure Security:**
        - Insecure configurations
        - Missing security headers
        - Vulnerable dependencies
        - Unsafe deserializations
        - Resource exhaustion vulnerabilities

        **Code Logic & Implementation:**
        - Logic flaws that could lead to security issues
        - Missing security controls for critical operations
        - Insufficient test coverage for security-critical code
        - Over-engineered security mechanisms that may have gaps

        Provide specific findings with clear explanations and actionable remediation steps. Include suggestions and code fixes when applicable.
        Pay special attention to areas lacking test coverage that handle sensitive operations.
    on: [pr_opened, pr_updated]

  # Performance analysis - Important for all applications
  performance:
    type: ai
    group: review
    schema: code-review
    prompt: |
        ## Files to Analyze
        {% for file in files %}
        - `{{ file.filename }}` ({{ file.changes }} changes, {{ file.status }})
        {% endfor %}

        ## Instructions
        Review the code changes according to these performance criteria:

        **Algorithm & Data Structure Efficiency:**
        - Time complexity analysis (O(n), O(nÂ²), etc.)
        - Space complexity and memory usage
        - Inefficient loops and nested operations
        - Suboptimal data structure choices

        **Database Performance:**
        - N+1 query problems
        - Missing database indexes
        - Inefficient JOIN operations
        - Large result set retrievals
        - Transaction scope issues

        **Resource Management:**
        - Memory leaks and excessive allocations
        - File handle management
        - Connection pooling issues
        - Resource cleanup patterns

        **Async & Concurrency:**
        - Blocking operations in async contexts
        - Race conditions and deadlocks
        - Inefficient parallel processing
        - Thread safety concerns

        **Frontend Performance (if applicable):**
        - Bundle size impact
        - Render-blocking operations
        - Unnecessary re-renders
        - Large asset optimization

        Identify specific performance issues and provide optimization recommendations with expected impact. Include suggestions and code fixes when applicable.
    on: [pr_opened, pr_updated]

  # Code quality and maintainability
  quality:
    type: ai
    group: review
    schema: code-review
    prompt: |
        Please evaluate the code quality and maintainability of the changes in this pull request.

        ## Instructions
        Assess the code quality according to these guidelines:

        **Code Structure & Design:**
        - SOLID principles adherence
        - Design pattern appropriateness
        - Separation of concerns
        - Module cohesion and coupling
        - Code organization and clarity

        **Naming & Documentation:**
        - Variable, function, and class naming clarity
        - Comment quality and relevance
        - API documentation completeness
        - Code self-documentation level

        **Error Handling & Reliability:**
        - Exception handling completeness
        - Error propagation patterns
        - Graceful failure handling
        - Input validation thoroughness
        - Edge case coverage

        **Testing & Test Coverage:**
        - Missing tests for critical functionality
        - Test coverage gaps and untested code paths
        - Test quality and effectiveness
        - Edge cases and error scenarios coverage
        - Unit vs integration test appropriateness
        - Test maintainability and clarity

        **Over-Engineering & Complexity:**
        - Unnecessary abstractions or complexity
        - Premature optimization
        - YAGNI (You Aren't Gonna Need It) violations
        - Simpler alternative solutions available
        - Code that could be more straightforward
        - Excessive use of design patterns

        **Logic & Correctness:**
        - Logical errors or flaws in implementation
        - Off-by-one errors
        - Incorrect algorithm implementation
        - Race conditions or timing issues
        - Incorrect assumptions about data
        - Missing validation or boundary checks

        **Maintainability & Technical Debt:**
        - Code testability issues
        - Dependencies and coupling problems
        - Technical debt introduction
        - Future maintenance considerations
        - Code duplication (DRY violations)

        **Language-Specific Best Practices:**
        - Idiomatic code usage
        - Framework/library best practices
        - Type safety (if applicable)
        - Resource management patterns

        Focus on actionable improvements that enhance code maintainability and provide specific recommendations. Include suggestions and code fixes when applicable.
    on: [pr_opened, pr_updated]

  # PR overview with intelligent analysis
  overview:
    type: ai
    group: overview
    schema: plain
    prompt: |
        # ðŸ“‹ Pull Request Overview: {{ pr.title }}

        {% if pr.body %}
        ## Description
        {{ pr.body }}
        {% endif %}

        ## Files Changed Analysis

        | File | Type | Status | Changes | Impact |
        |------|------|--------|---------|--------|
        {% for file in files %}
        | `{{ file.filename }}` | {{ file.filename | split: "." | last | upcase }} | {{ file.status | capitalize }} | +{{ file.additions }}/-{{ file.deletions }} | {% if file.changes > 50 %}High{% elsif file.changes > 20 %}Medium{% else %}Low{% endif %} |
        {% endfor %}

        ## Architecture & Impact Assessment

        Please generate a comprehensive overview and analysis of this pull request.
        
        Follow these instructions to create a thorough assessment:

        1. **Change Impact Analysis**
           - What this PR accomplishes
           - Key technical changes introduced
           - Affected system components

        2. **Architecture Visualization**
           - Create appropriate mermaid diagram(s) showing:
             - Component relationships (use `graph TD/LR`)
             - Process flows (use `flowchart` or `sequenceDiagram`)
             - Data flow between modified components

        **Guidelines for diagrams:**
        - Use multiple diagrams if there are distinct architectural aspects
        - Choose the most appropriate diagram type for each concept
        - Focus on modified components and their relationships
        - Keep diagrams clean and informative

        Provide a balanced technical assessment suitable for both developers and stakeholders.
    on: [pr_opened, pr_updated]
