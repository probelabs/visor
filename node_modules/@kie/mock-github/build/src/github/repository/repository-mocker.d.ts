import { Mocker } from "../../github/mocker";
import { Repositories } from "../../github/repository/repository-mocker.types";
import { RepositoryState } from "../../github/repository/state/repository-state";
export declare class RepositoryMocker implements Mocker {
    private repositories;
    private setupPath;
    private _repositoryState;
    private setupDirCreated;
    constructor(repositories: Repositories | undefined, setupPath: string);
    /**
     * Loop through all the repositories and construct them according to the state specified in config file
     */
    setup(): Promise<void>;
    /**
     * Delete any created repositories
     */
    teardown(): Promise<void>;
    /**
     * Exposes the interface used to produce just state info for all repositories
     */
    get repositoryState(): RepositoryState;
    /**
     * Create and initialize repo
     * @param repoName name of the repo to initialize
     * @returns git instance and path to repo
     */
    private initRepo;
    /**
     * Uses the RepositoryFileSystem to copy files from given srcs to destination in the
     * repository which is to be created
     * @param git
     * @param repoPath
     * @param files
     */
    private setFiles;
    /**
     * Sets local and pushed branches
     * @param git
     * @param localBranches
     * @param pushedBranches
     */
    private setBranches;
    /**
     * Sets the current branch
     * @param git
     * @param currBranch
     * @returns
     */
    private setCurrentBranch;
    /**
     * Reproduces the git history
     * @param git
     * @param repoPath
     * @param history
     * @returns
     */
    private setHistory;
    /**
     * Setups the given repository i.e. performs the following
     * 1. Initialize the repository
     * 2. Add any files to DEFAULT_BRANCH for initialization
     * 3. Set up local and pushed branches
     * 4. Recreate git history
     * 5. Set current branch
     * @param repoName
     * @param currentRepo
     */
    private setupRepository;
}
