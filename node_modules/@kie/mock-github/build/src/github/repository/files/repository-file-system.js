"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepositoryFileSystem = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const repository_constants_1 = require("../../../github/repository/repository.constants");
const os_1 = require("os");
const fg = __importStar(require("fast-glob"));
class RepositoryFileSystem {
    constructor(repoPath) {
        this.repoPath = repoPath;
    }
    async copyFiles(files) {
        if (files) {
            await Promise.all(files.map(async (file) => {
                const isFile = (0, fs_extra_1.lstatSync)(file.src).isFile();
                const [dest, src] = await Promise.all([
                    this.createDest(file.dest, isFile),
                    this.createTemp(file.src, path_1.default.join(this.repoPath, file.dest)),
                ]);
                const entries = file.filter && !isFile
                    ? fg.sync(file.filter, {
                        absolute: true,
                        cwd: src,
                        dot: true,
                        onlyFiles: false,
                    })
                    : [];
                await (0, fs_extra_1.copy)(src, dest, {
                    overwrite: true,
                    dereference: true,
                    filter: (filterSrc, _dest) => !filterSrc.startsWith(this.repoPath) &&
                        !entries.includes(filterSrc),
                });
                return this.cleanupTemp(src);
            }));
            return true;
        }
        return false;
    }
    async createFile(dest, data) {
        const destinationPath = path_1.default.join(this.repoPath, dest);
        await this.createDest(dest, true);
        await (0, fs_extra_1.writeFile)(destinationPath, data);
    }
    /**
     * Make sure that the destination path does not begin with REMOTE or GITIGNORE.
     * REMOTE is reserved directory to setup a local git repository
     * GITIGNORE is reserved for .gitignore file that prevents REMOTE from being pushed
     * @param dest
     * @returns true if destination path begins from REMOTE
     */
    checkDest(dest) {
        const beginsWith = dest.split("/")[0];
        return beginsWith === repository_constants_1.REMOTE || beginsWith === repository_constants_1.GITIGNORE;
    }
    async createDest(dest, isFile) {
        if (this.checkDest(dest)) {
            throw new Error("Cannot create a file in the remote directory. Directory remote is reserved");
        }
        const destinationPath = path_1.default.join(this.repoPath, dest);
        // create the file and any directories needed
        if (isFile) {
            await (0, fs_extra_1.ensureFile)(destinationPath);
        }
        else {
            await (0, fs_extra_1.ensureDir)(destinationPath);
        }
        return destinationPath;
    }
    isSubDir(parent, dir) {
        const relative = path_1.default.relative(parent, dir);
        return !relative.startsWith("..") && !path_1.default.isAbsolute(relative);
    }
    async createTemp(src, dest) {
        if (this.isSubDir(src, dest)) {
            const tmpPath = await (0, fs_extra_1.mkdtemp)(`${(0, os_1.tmpdir)()}${path_1.default.sep}`);
            await (0, fs_extra_1.copy)(src, tmpPath, {
                overwrite: true,
                dereference: true,
                filter: (filterSrc, _filterDest) => {
                    return filterSrc !== this.repoPath;
                },
            });
            return tmpPath;
        }
        return src;
    }
    async cleanupTemp(src) {
        const tmpPath = `${(0, os_1.tmpdir)()}${path_1.default.sep}`;
        if (src.startsWith(tmpPath)) {
            await (0, fs_extra_1.rm)(src, { recursive: true });
        }
    }
}
exports.RepositoryFileSystem = RepositoryFileSystem;
