"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArchiveArtifactsMocker = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const archive_server_1 = require("../../../github/action/archive/archive-server");
class ArchiveArtifactsMocker {
    constructor(store, port) {
        this.store = path_1.default.join(store, "store");
        this.port = port;
        this.runId = Math.floor(Math.random() * 100).toString();
        this.isStoreCreated = !(0, fs_extra_1.existsSync)(this.store);
        if (this.port) {
            this.archiveServer = new archive_server_1.ArchiveServer(this.store, this.port);
        }
    }
    async setup() {
        if (this.archiveServer) {
            await this.archiveServer.start();
            // need the trailing slash cause @actions/artifact does not add one
            process.env["ACTIONS_RUNTIME_URL"] = `http://localhost:${this.port}/`;
            process.env["GITHUB_RUN_ID"] = this.runId;
            process.env["ACTIONS_RUNTIME_TOKEN"] = "token";
        }
    }
    async teardown() {
        if (this.archiveServer) {
            await Promise.all([
                this.archiveServer.stop(),
                ...(this.isStoreCreated
                    ? [(0, fs_extra_1.rm)(this.store, { recursive: true, force: true })]
                    : []),
            ]);
            delete process.env["ACTIONS_RUNTIME_URL"];
            delete process.env["GITHUB_RUN_ID"];
            delete process.env["ACTIONS_RUNTIME_TOKEN"];
        }
    }
    getArtifactStore() {
        return this.store;
    }
    getRunId() {
        return this.runId;
    }
}
exports.ArchiveArtifactsMocker = ArchiveArtifactsMocker;
