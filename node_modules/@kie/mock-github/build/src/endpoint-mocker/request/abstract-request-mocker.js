"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestMocker = void 0;
class RequestMocker {
    constructor(baseUrl, endpointDetails, allowUnmocked = false) {
        this._endpointDetails = endpointDetails;
        this._baseUrl = baseUrl;
        this._allowUnmocked = allowUnmocked;
    }
    get baseUrl() {
        return this._baseUrl;
    }
    get endpointDetails() {
        return this._endpointDetails;
    }
    get allowUnmocked() {
        return this._allowUnmocked;
    }
    parseParams(params) {
        const { pathParams, query, requestBody } = this.extractParams(params);
        let path = this.endpointDetails.path;
        let regexFlag = false;
        // replace any path variables with either values or regex expression
        for (const match of this.endpointDetails.path.match(/{[^{}]+}/g) ??
            []) {
            let replacementParam;
            if (pathParams[match.slice(1, -1)]) {
                const value = pathParams[match.slice(1, -1)];
                replacementParam = value instanceof RegExp ? value.source : `${value}`;
                regexFlag || (regexFlag = value instanceof RegExp);
            }
            else {
                replacementParam = ".+";
                regexFlag = true;
            }
            path = path.replace(new RegExp(match), replacementParam);
        }
        // if a regex expression was encountered then path is used as a regex expression
        if (regexFlag) {
            path = new RegExp(path);
        }
        return { path, query, requestBody };
    }
    extractParams(params) {
        const pathParams = {};
        let query = undefined;
        let requestBody = undefined;
        if (!params) {
            return { pathParams, query, requestBody };
        }
        // separate out the path, query and body params
        for (const [param, value] of Object.entries(params)) {
            if (this.endpointDetails.parameters.path.includes(param)) {
                pathParams[param] = value;
            }
            if (this.endpointDetails.parameters.query.includes(param)) {
                if (!query) {
                    query = {};
                }
                query[param] = value;
            }
            if (this.endpointDetails.parameters.body.includes(param)) {
                if (!requestBody) {
                    requestBody = {};
                }
                requestBody[param] = value;
            }
        }
        return { pathParams, query, requestBody };
    }
}
exports.RequestMocker = RequestMocker;
