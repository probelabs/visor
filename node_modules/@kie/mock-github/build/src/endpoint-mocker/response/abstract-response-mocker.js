"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseMocker = void 0;
const nock_1 = __importDefault(require("nock"));
class ResponseMocker {
    constructor(baseUrl, path, method, query, requestBody, allowUnmocked = false) {
        this.baseUrl = baseUrl;
        this.allowUnmocked = allowUnmocked;
        this.scope = (0, nock_1.default)(baseUrl, { allowUnmocked });
        this.responses = [];
        this.headers = {};
        this.path = path;
        this.query = query;
        this.requestBody = requestBody;
        this.method = method;
    }
    matchReqHeaders(headers) {
        this.headers = { ...this.headers, ...headers };
        if (Object.keys(this.headers).length > 0) {
            this.scope = (0, nock_1.default)(this.baseUrl, { allowUnmocked: this.allowUnmocked, reqheaders: this.headers });
        }
        return this;
    }
    setResponse(responses) {
        if (Array.isArray(responses)) {
            this.responses = [...this.responses, ...responses];
        }
        else {
            this.responses.push(responses);
        }
        return this;
    }
    reply(response) {
        let interceptor = this.createInterceptor();
        if (response) {
            this.scope = interceptor
                .times(response.repeat ?? 1)
                .reply(response.status, response.data, response.headers);
        }
        else {
            this.responses.forEach(res => {
                this.scope = interceptor
                    .times(res.repeat ?? 1)
                    .reply(res.status, res.data, res.headers);
                interceptor = this.createInterceptor();
            });
            this.responses = [];
        }
        this.headers = {};
        return this;
    }
    createInterceptor() {
        // if query is defined use that otherwise set it to true to indicate that we want to mock the path regardless of query
        return this.scope
            .intercept(this.path, this.method, this.requestBody)
            .query(this.query ?? true);
    }
}
exports.ResponseMocker = ResponseMocker;
