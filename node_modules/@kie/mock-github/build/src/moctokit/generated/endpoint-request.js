"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_mocker_1 = require("../../moctokit/request/request-mocker");
const endpoint_details_1 = __importDefault(require("./endpoint-details"));
const endpointToMethod = (baseUrl, allowUnmocked = false) => ({
    actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["addCustomLabelsToSelfHostedRunnerForOrg"], allowUnmocked).request,
        addCustomLabelsToSelfHostedRunnerForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["addCustomLabelsToSelfHostedRunnerForRepo"], allowUnmocked).request,
        addSelectedRepoToOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["addSelectedRepoToOrgSecret"], allowUnmocked).request,
        addSelectedRepoToOrgVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["addSelectedRepoToOrgVariable"], allowUnmocked).request,
        addSelectedRepoToRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["addSelectedRepoToRequiredWorkflow"], allowUnmocked).request,
        approveWorkflowRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["approveWorkflowRun"], allowUnmocked).request,
        cancelWorkflowRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["cancelWorkflowRun"], allowUnmocked).request,
        createEnvironmentVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createEnvironmentVariable"], allowUnmocked).request,
        createOrUpdateEnvironmentSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createOrUpdateEnvironmentSecret"], allowUnmocked).request,
        createOrUpdateOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createOrUpdateOrgSecret"], allowUnmocked).request,
        createOrUpdateRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createOrUpdateRepoSecret"], allowUnmocked).request,
        createOrgVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createOrgVariable"], allowUnmocked).request,
        createRegistrationTokenForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createRegistrationTokenForOrg"], allowUnmocked).request,
        createRegistrationTokenForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createRegistrationTokenForRepo"], allowUnmocked).request,
        createRemoveTokenForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createRemoveTokenForOrg"], allowUnmocked).request,
        createRemoveTokenForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createRemoveTokenForRepo"], allowUnmocked).request,
        createRepoVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createRepoVariable"], allowUnmocked).request,
        createRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createRequiredWorkflow"], allowUnmocked).request,
        createWorkflowDispatch: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["createWorkflowDispatch"], allowUnmocked).request,
        deleteActionsCacheById: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteActionsCacheById"], allowUnmocked).request,
        deleteActionsCacheByKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteActionsCacheByKey"], allowUnmocked).request,
        deleteArtifact: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteArtifact"], allowUnmocked).request,
        deleteEnvironmentSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteEnvironmentSecret"], allowUnmocked).request,
        deleteEnvironmentVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteEnvironmentVariable"], allowUnmocked).request,
        deleteOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteOrgSecret"], allowUnmocked).request,
        deleteOrgVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteOrgVariable"], allowUnmocked).request,
        deleteRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteRepoSecret"], allowUnmocked).request,
        deleteRepoVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteRepoVariable"], allowUnmocked).request,
        deleteRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteRequiredWorkflow"], allowUnmocked).request,
        deleteSelfHostedRunnerFromOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteSelfHostedRunnerFromOrg"], allowUnmocked).request,
        deleteSelfHostedRunnerFromRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteSelfHostedRunnerFromRepo"], allowUnmocked).request,
        deleteWorkflowRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteWorkflowRun"], allowUnmocked).request,
        deleteWorkflowRunLogs: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["deleteWorkflowRunLogs"], allowUnmocked).request,
        disableSelectedRepositoryGithubActionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["disableSelectedRepositoryGithubActionsOrganization"], allowUnmocked).request,
        disableWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["disableWorkflow"], allowUnmocked).request,
        downloadArtifact: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["downloadArtifact"], allowUnmocked).request,
        downloadJobLogsForWorkflowRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["downloadJobLogsForWorkflowRun"], allowUnmocked).request,
        downloadWorkflowRunAttemptLogs: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["downloadWorkflowRunAttemptLogs"], allowUnmocked).request,
        downloadWorkflowRunLogs: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["downloadWorkflowRunLogs"], allowUnmocked).request,
        enableSelectedRepositoryGithubActionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["enableSelectedRepositoryGithubActionsOrganization"], allowUnmocked).request,
        enableWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["enableWorkflow"], allowUnmocked).request,
        generateRunnerJitconfigForEnterprise: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["generateRunnerJitconfigForEnterprise"], allowUnmocked).request,
        generateRunnerJitconfigForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["generateRunnerJitconfigForOrg"], allowUnmocked).request,
        generateRunnerJitconfigForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["generateRunnerJitconfigForRepo"], allowUnmocked).request,
        getActionsCacheList: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getActionsCacheList"], allowUnmocked).request,
        getActionsCacheUsage: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getActionsCacheUsage"], allowUnmocked).request,
        getActionsCacheUsageByRepoForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getActionsCacheUsageByRepoForOrg"], allowUnmocked).request,
        getActionsCacheUsageForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getActionsCacheUsageForOrg"], allowUnmocked).request,
        getAllowedActionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getAllowedActionsOrganization"], allowUnmocked).request,
        getAllowedActionsRepository: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getAllowedActionsRepository"], allowUnmocked).request,
        getArtifact: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getArtifact"], allowUnmocked).request,
        getEnvironmentPublicKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getEnvironmentPublicKey"], allowUnmocked).request,
        getEnvironmentSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getEnvironmentSecret"], allowUnmocked).request,
        getEnvironmentVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getEnvironmentVariable"], allowUnmocked).request,
        getGithubActionsDefaultWorkflowPermissionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getGithubActionsDefaultWorkflowPermissionsOrganization"], allowUnmocked).request,
        getGithubActionsDefaultWorkflowPermissionsRepository: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getGithubActionsDefaultWorkflowPermissionsRepository"], allowUnmocked).request,
        getGithubActionsPermissionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getGithubActionsPermissionsOrganization"], allowUnmocked).request,
        getGithubActionsPermissionsRepository: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getGithubActionsPermissionsRepository"], allowUnmocked).request,
        getJobForWorkflowRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getJobForWorkflowRun"], allowUnmocked).request,
        getOrgPublicKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getOrgPublicKey"], allowUnmocked).request,
        getOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getOrgSecret"], allowUnmocked).request,
        getOrgVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getOrgVariable"], allowUnmocked).request,
        getPendingDeploymentsForRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getPendingDeploymentsForRun"], allowUnmocked).request,
        getRepoPermissions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getRepoPermissions"], allowUnmocked).request,
        getRepoPublicKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getRepoPublicKey"], allowUnmocked).request,
        getRepoRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getRepoRequiredWorkflow"], allowUnmocked).request,
        getRepoRequiredWorkflowUsage: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getRepoRequiredWorkflowUsage"], allowUnmocked).request,
        getRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getRepoSecret"], allowUnmocked).request,
        getRepoVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getRepoVariable"], allowUnmocked).request,
        getRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getRequiredWorkflow"], allowUnmocked).request,
        getReviewsForRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getReviewsForRun"], allowUnmocked).request,
        getSelfHostedRunnerForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getSelfHostedRunnerForOrg"], allowUnmocked).request,
        getSelfHostedRunnerForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getSelfHostedRunnerForRepo"], allowUnmocked).request,
        getWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getWorkflow"], allowUnmocked).request,
        getWorkflowAccessToRepository: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getWorkflowAccessToRepository"], allowUnmocked).request,
        getWorkflowRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getWorkflowRun"], allowUnmocked).request,
        getWorkflowRunAttempt: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getWorkflowRunAttempt"], allowUnmocked).request,
        getWorkflowRunUsage: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getWorkflowRunUsage"], allowUnmocked).request,
        getWorkflowUsage: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["getWorkflowUsage"], allowUnmocked).request,
        listArtifactsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listArtifactsForRepo"], allowUnmocked).request,
        listEnvironmentSecrets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listEnvironmentSecrets"], allowUnmocked).request,
        listEnvironmentVariables: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listEnvironmentVariables"], allowUnmocked).request,
        listJobsForWorkflowRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listJobsForWorkflowRun"], allowUnmocked).request,
        listJobsForWorkflowRunAttempt: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listJobsForWorkflowRunAttempt"], allowUnmocked).request,
        listLabelsForSelfHostedRunnerForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listLabelsForSelfHostedRunnerForOrg"], allowUnmocked).request,
        listLabelsForSelfHostedRunnerForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listLabelsForSelfHostedRunnerForRepo"], allowUnmocked).request,
        listOrgSecrets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listOrgSecrets"], allowUnmocked).request,
        listOrgVariables: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listOrgVariables"], allowUnmocked).request,
        listRepoOrganizationSecrets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRepoOrganizationSecrets"], allowUnmocked).request,
        listRepoOrganizationVariables: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRepoOrganizationVariables"], allowUnmocked).request,
        listRepoRequiredWorkflows: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRepoRequiredWorkflows"], allowUnmocked).request,
        listRepoSecrets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRepoSecrets"], allowUnmocked).request,
        listRepoVariables: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRepoVariables"], allowUnmocked).request,
        listRepoWorkflows: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRepoWorkflows"], allowUnmocked).request,
        listRequiredWorkflowRuns: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRequiredWorkflowRuns"], allowUnmocked).request,
        listRequiredWorkflows: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRequiredWorkflows"], allowUnmocked).request,
        listRunnerApplicationsForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRunnerApplicationsForOrg"], allowUnmocked).request,
        listRunnerApplicationsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listRunnerApplicationsForRepo"], allowUnmocked).request,
        listSelectedReposForOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listSelectedReposForOrgSecret"], allowUnmocked).request,
        listSelectedReposForOrgVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listSelectedReposForOrgVariable"], allowUnmocked).request,
        listSelectedRepositoriesEnabledGithubActionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listSelectedRepositoriesEnabledGithubActionsOrganization"], allowUnmocked).request,
        listSelectedRepositoriesRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listSelectedRepositoriesRequiredWorkflow"], allowUnmocked).request,
        listSelfHostedRunnersForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listSelfHostedRunnersForOrg"], allowUnmocked).request,
        listSelfHostedRunnersForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listSelfHostedRunnersForRepo"], allowUnmocked).request,
        listWorkflowRunArtifacts: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listWorkflowRunArtifacts"], allowUnmocked).request,
        listWorkflowRuns: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listWorkflowRuns"], allowUnmocked).request,
        listWorkflowRunsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["listWorkflowRunsForRepo"], allowUnmocked).request,
        reRunJobForWorkflowRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["reRunJobForWorkflowRun"], allowUnmocked).request,
        reRunWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["reRunWorkflow"], allowUnmocked).request,
        reRunWorkflowFailedJobs: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["reRunWorkflowFailedJobs"], allowUnmocked).request,
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["removeAllCustomLabelsFromSelfHostedRunnerForOrg"], allowUnmocked).request,
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["removeAllCustomLabelsFromSelfHostedRunnerForRepo"], allowUnmocked).request,
        removeCustomLabelFromSelfHostedRunnerForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["removeCustomLabelFromSelfHostedRunnerForOrg"], allowUnmocked).request,
        removeCustomLabelFromSelfHostedRunnerForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["removeCustomLabelFromSelfHostedRunnerForRepo"], allowUnmocked).request,
        removeSelectedRepoFromOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["removeSelectedRepoFromOrgSecret"], allowUnmocked).request,
        removeSelectedRepoFromOrgVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["removeSelectedRepoFromOrgVariable"], allowUnmocked).request,
        removeSelectedRepoFromRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["removeSelectedRepoFromRequiredWorkflow"], allowUnmocked).request,
        reviewCustomGatesForRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["reviewCustomGatesForRun"], allowUnmocked).request,
        reviewPendingDeploymentsForRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["reviewPendingDeploymentsForRun"], allowUnmocked).request,
        setAllowedActionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setAllowedActionsOrganization"], allowUnmocked).request,
        setAllowedActionsRepository: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setAllowedActionsRepository"], allowUnmocked).request,
        setCustomLabelsForSelfHostedRunnerForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setCustomLabelsForSelfHostedRunnerForOrg"], allowUnmocked).request,
        setCustomLabelsForSelfHostedRunnerForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setCustomLabelsForSelfHostedRunnerForRepo"], allowUnmocked).request,
        setGithubActionsDefaultWorkflowPermissionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setGithubActionsDefaultWorkflowPermissionsOrganization"], allowUnmocked).request,
        setGithubActionsDefaultWorkflowPermissionsRepository: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setGithubActionsDefaultWorkflowPermissionsRepository"], allowUnmocked).request,
        setGithubActionsPermissionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setGithubActionsPermissionsOrganization"], allowUnmocked).request,
        setGithubActionsPermissionsRepository: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setGithubActionsPermissionsRepository"], allowUnmocked).request,
        setSelectedReposForOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setSelectedReposForOrgSecret"], allowUnmocked).request,
        setSelectedReposForOrgVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setSelectedReposForOrgVariable"], allowUnmocked).request,
        setSelectedReposToRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setSelectedReposToRequiredWorkflow"], allowUnmocked).request,
        setSelectedRepositoriesEnabledGithubActionsOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setSelectedRepositoriesEnabledGithubActionsOrganization"], allowUnmocked).request,
        setWorkflowAccessToRepository: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["setWorkflowAccessToRepository"], allowUnmocked).request,
        updateEnvironmentVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["updateEnvironmentVariable"], allowUnmocked).request,
        updateOrgVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["updateOrgVariable"], allowUnmocked).request,
        updateRepoVariable: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["updateRepoVariable"], allowUnmocked).request,
        updateRequiredWorkflow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["actions"]["updateRequiredWorkflow"], allowUnmocked).request,
    },
    activity: {
        checkRepoIsStarredByAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["checkRepoIsStarredByAuthenticatedUser"], allowUnmocked).request,
        deleteRepoSubscription: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["deleteRepoSubscription"], allowUnmocked).request,
        deleteThreadSubscription: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["deleteThreadSubscription"], allowUnmocked).request,
        getFeeds: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["getFeeds"], allowUnmocked).request,
        getRepoSubscription: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["getRepoSubscription"], allowUnmocked).request,
        getThread: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["getThread"], allowUnmocked).request,
        getThreadSubscriptionForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["getThreadSubscriptionForAuthenticatedUser"], allowUnmocked).request,
        listEventsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listEventsForAuthenticatedUser"], allowUnmocked).request,
        listNotificationsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listNotificationsForAuthenticatedUser"], allowUnmocked).request,
        listOrgEventsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listOrgEventsForAuthenticatedUser"], allowUnmocked).request,
        listPublicEvents: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listPublicEvents"], allowUnmocked).request,
        listPublicEventsForRepoNetwork: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listPublicEventsForRepoNetwork"], allowUnmocked).request,
        listPublicEventsForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listPublicEventsForUser"], allowUnmocked).request,
        listPublicOrgEvents: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listPublicOrgEvents"], allowUnmocked).request,
        listReceivedEventsForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listReceivedEventsForUser"], allowUnmocked).request,
        listReceivedPublicEventsForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listReceivedPublicEventsForUser"], allowUnmocked).request,
        listRepoEvents: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listRepoEvents"], allowUnmocked).request,
        listRepoNotificationsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listRepoNotificationsForAuthenticatedUser"], allowUnmocked).request,
        listReposStarredByAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listReposStarredByAuthenticatedUser"], allowUnmocked).request,
        listReposStarredByUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listReposStarredByUser"], allowUnmocked).request,
        listReposWatchedByUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listReposWatchedByUser"], allowUnmocked).request,
        listStargazersForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listStargazersForRepo"], allowUnmocked).request,
        listWatchedReposForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listWatchedReposForAuthenticatedUser"], allowUnmocked).request,
        listWatchersForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["listWatchersForRepo"], allowUnmocked).request,
        markNotificationsAsRead: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["markNotificationsAsRead"], allowUnmocked).request,
        markRepoNotificationsAsRead: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["markRepoNotificationsAsRead"], allowUnmocked).request,
        markThreadAsRead: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["markThreadAsRead"], allowUnmocked).request,
        setRepoSubscription: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["setRepoSubscription"], allowUnmocked).request,
        setThreadSubscription: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["setThreadSubscription"], allowUnmocked).request,
        starRepoForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["starRepoForAuthenticatedUser"], allowUnmocked).request,
        unstarRepoForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["activity"]["unstarRepoForAuthenticatedUser"], allowUnmocked).request,
    },
    apps: {
        addRepoToInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["addRepoToInstallation"], allowUnmocked).request,
        addRepoToInstallationForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["addRepoToInstallationForAuthenticatedUser"], allowUnmocked).request,
        checkToken: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["checkToken"], allowUnmocked).request,
        createFromManifest: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["createFromManifest"], allowUnmocked).request,
        createInstallationAccessToken: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["createInstallationAccessToken"], allowUnmocked).request,
        deleteAuthorization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["deleteAuthorization"], allowUnmocked).request,
        deleteInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["deleteInstallation"], allowUnmocked).request,
        deleteToken: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["deleteToken"], allowUnmocked).request,
        getAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getAuthenticated"], allowUnmocked).request,
        getBySlug: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getBySlug"], allowUnmocked).request,
        getInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getInstallation"], allowUnmocked).request,
        getOrgInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getOrgInstallation"], allowUnmocked).request,
        getRepoInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getRepoInstallation"], allowUnmocked).request,
        getSubscriptionPlanForAccount: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getSubscriptionPlanForAccount"], allowUnmocked).request,
        getSubscriptionPlanForAccountStubbed: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getSubscriptionPlanForAccountStubbed"], allowUnmocked).request,
        getUserInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getUserInstallation"], allowUnmocked).request,
        getWebhookConfigForApp: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getWebhookConfigForApp"], allowUnmocked).request,
        getWebhookDelivery: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["getWebhookDelivery"], allowUnmocked).request,
        listAccountsForPlan: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listAccountsForPlan"], allowUnmocked).request,
        listAccountsForPlanStubbed: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listAccountsForPlanStubbed"], allowUnmocked).request,
        listInstallationReposForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listInstallationReposForAuthenticatedUser"], allowUnmocked).request,
        listInstallationRequestsForAuthenticatedApp: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listInstallationRequestsForAuthenticatedApp"], allowUnmocked).request,
        listInstallations: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listInstallations"], allowUnmocked).request,
        listInstallationsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listInstallationsForAuthenticatedUser"], allowUnmocked).request,
        listPlans: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listPlans"], allowUnmocked).request,
        listPlansStubbed: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listPlansStubbed"], allowUnmocked).request,
        listReposAccessibleToInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listReposAccessibleToInstallation"], allowUnmocked).request,
        listSubscriptionsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listSubscriptionsForAuthenticatedUser"], allowUnmocked).request,
        listSubscriptionsForAuthenticatedUserStubbed: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listSubscriptionsForAuthenticatedUserStubbed"], allowUnmocked).request,
        listWebhookDeliveries: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["listWebhookDeliveries"], allowUnmocked).request,
        redeliverWebhookDelivery: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["redeliverWebhookDelivery"], allowUnmocked).request,
        removeRepoFromInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["removeRepoFromInstallation"], allowUnmocked).request,
        removeRepoFromInstallationForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["removeRepoFromInstallationForAuthenticatedUser"], allowUnmocked).request,
        resetToken: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["resetToken"], allowUnmocked).request,
        revokeInstallationAccessToken: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["revokeInstallationAccessToken"], allowUnmocked).request,
        scopeToken: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["scopeToken"], allowUnmocked).request,
        suspendInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["suspendInstallation"], allowUnmocked).request,
        unsuspendInstallation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["unsuspendInstallation"], allowUnmocked).request,
        updateWebhookConfigForApp: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["apps"]["updateWebhookConfigForApp"], allowUnmocked).request,
    },
    billing: {
        getGithubActionsBillingOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["billing"]["getGithubActionsBillingOrg"], allowUnmocked).request,
        getGithubActionsBillingUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["billing"]["getGithubActionsBillingUser"], allowUnmocked).request,
        getGithubPackagesBillingOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["billing"]["getGithubPackagesBillingOrg"], allowUnmocked).request,
        getGithubPackagesBillingUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["billing"]["getGithubPackagesBillingUser"], allowUnmocked).request,
        getSharedStorageBillingOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["billing"]["getSharedStorageBillingOrg"], allowUnmocked).request,
        getSharedStorageBillingUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["billing"]["getSharedStorageBillingUser"], allowUnmocked).request,
    },
    checks: {
        create: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["create"], allowUnmocked).request,
        createSuite: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["createSuite"], allowUnmocked).request,
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["get"], allowUnmocked).request,
        getSuite: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["getSuite"], allowUnmocked).request,
        listAnnotations: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["listAnnotations"], allowUnmocked).request,
        listForRef: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["listForRef"], allowUnmocked).request,
        listForSuite: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["listForSuite"], allowUnmocked).request,
        listSuitesForRef: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["listSuitesForRef"], allowUnmocked).request,
        rerequestRun: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["rerequestRun"], allowUnmocked).request,
        rerequestSuite: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["rerequestSuite"], allowUnmocked).request,
        setSuitesPreferences: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["setSuitesPreferences"], allowUnmocked).request,
        update: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["checks"]["update"], allowUnmocked).request,
    },
    codeScanning: {
        deleteAnalysis: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["deleteAnalysis"], allowUnmocked).request,
        getAlert: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["getAlert"], allowUnmocked).request,
        getAnalysis: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["getAnalysis"], allowUnmocked).request,
        getCodeqlDatabase: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["getCodeqlDatabase"], allowUnmocked).request,
        getDefaultSetup: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["getDefaultSetup"], allowUnmocked).request,
        getSarif: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["getSarif"], allowUnmocked).request,
        listAlertInstances: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["listAlertInstances"], allowUnmocked).request,
        listAlertsForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["listAlertsForOrg"], allowUnmocked).request,
        listAlertsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["listAlertsForRepo"], allowUnmocked).request,
        listAlertsInstances: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["listAlertsInstances"], allowUnmocked).request,
        listCodeqlDatabases: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["listCodeqlDatabases"], allowUnmocked).request,
        listRecentAnalyses: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["listRecentAnalyses"], allowUnmocked).request,
        updateAlert: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["updateAlert"], allowUnmocked).request,
        updateDefaultSetup: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["updateDefaultSetup"], allowUnmocked).request,
        uploadSarif: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codeScanning"]["uploadSarif"], allowUnmocked).request,
    },
    codesOfConduct: {
        getAllCodesOfConduct: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codesOfConduct"]["getAllCodesOfConduct"], allowUnmocked).request,
        getConductCode: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codesOfConduct"]["getConductCode"], allowUnmocked).request,
    },
    codespaces: {
        addRepositoryForSecretForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["addRepositoryForSecretForAuthenticatedUser"], allowUnmocked).request,
        addSelectedRepoToOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["addSelectedRepoToOrgSecret"], allowUnmocked).request,
        codespaceMachinesForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["codespaceMachinesForAuthenticatedUser"], allowUnmocked).request,
        createForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["createForAuthenticatedUser"], allowUnmocked).request,
        createOrUpdateOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["createOrUpdateOrgSecret"], allowUnmocked).request,
        createOrUpdateRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["createOrUpdateRepoSecret"], allowUnmocked).request,
        createOrUpdateSecretForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["createOrUpdateSecretForAuthenticatedUser"], allowUnmocked).request,
        createWithPrForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["createWithPrForAuthenticatedUser"], allowUnmocked).request,
        createWithRepoForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["createWithRepoForAuthenticatedUser"], allowUnmocked).request,
        deleteCodespacesBillingUsers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["deleteCodespacesBillingUsers"], allowUnmocked).request,
        deleteForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["deleteForAuthenticatedUser"], allowUnmocked).request,
        deleteFromOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["deleteFromOrganization"], allowUnmocked).request,
        deleteOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["deleteOrgSecret"], allowUnmocked).request,
        deleteRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["deleteRepoSecret"], allowUnmocked).request,
        deleteSecretForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["deleteSecretForAuthenticatedUser"], allowUnmocked).request,
        exportForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["exportForAuthenticatedUser"], allowUnmocked).request,
        getCodespacesForUserInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getCodespacesForUserInOrg"], allowUnmocked).request,
        getExportDetailsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getExportDetailsForAuthenticatedUser"], allowUnmocked).request,
        getForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getForAuthenticatedUser"], allowUnmocked).request,
        getOrgPublicKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getOrgPublicKey"], allowUnmocked).request,
        getOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getOrgSecret"], allowUnmocked).request,
        getPublicKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getPublicKeyForAuthenticatedUser"], allowUnmocked).request,
        getRepoPublicKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getRepoPublicKey"], allowUnmocked).request,
        getRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getRepoSecret"], allowUnmocked).request,
        getSecretForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["getSecretForAuthenticatedUser"], allowUnmocked).request,
        listDevcontainersInRepositoryForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listDevcontainersInRepositoryForAuthenticatedUser"], allowUnmocked).request,
        listForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listForAuthenticatedUser"], allowUnmocked).request,
        listInOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listInOrganization"], allowUnmocked).request,
        listInRepositoryForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listInRepositoryForAuthenticatedUser"], allowUnmocked).request,
        listOrgSecrets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listOrgSecrets"], allowUnmocked).request,
        listRepoSecrets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listRepoSecrets"], allowUnmocked).request,
        listRepositoriesForSecretForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listRepositoriesForSecretForAuthenticatedUser"], allowUnmocked).request,
        listSecretsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listSecretsForAuthenticatedUser"], allowUnmocked).request,
        listSelectedReposForOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["listSelectedReposForOrgSecret"], allowUnmocked).request,
        preFlightWithRepoForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["preFlightWithRepoForAuthenticatedUser"], allowUnmocked).request,
        publishForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["publishForAuthenticatedUser"], allowUnmocked).request,
        removeRepositoryForSecretForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["removeRepositoryForSecretForAuthenticatedUser"], allowUnmocked).request,
        removeSelectedRepoFromOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["removeSelectedRepoFromOrgSecret"], allowUnmocked).request,
        repoMachinesForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["repoMachinesForAuthenticatedUser"], allowUnmocked).request,
        setCodespacesBilling: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["setCodespacesBilling"], allowUnmocked).request,
        setCodespacesBillingUsers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["setCodespacesBillingUsers"], allowUnmocked).request,
        setRepositoriesForSecretForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["setRepositoriesForSecretForAuthenticatedUser"], allowUnmocked).request,
        setSelectedReposForOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["setSelectedReposForOrgSecret"], allowUnmocked).request,
        startForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["startForAuthenticatedUser"], allowUnmocked).request,
        stopForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["stopForAuthenticatedUser"], allowUnmocked).request,
        stopInOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["stopInOrganization"], allowUnmocked).request,
        updateForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["codespaces"]["updateForAuthenticatedUser"], allowUnmocked).request,
    },
    dependabot: {
        addSelectedRepoToOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["addSelectedRepoToOrgSecret"], allowUnmocked).request,
        createOrUpdateOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["createOrUpdateOrgSecret"], allowUnmocked).request,
        createOrUpdateRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["createOrUpdateRepoSecret"], allowUnmocked).request,
        deleteOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["deleteOrgSecret"], allowUnmocked).request,
        deleteRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["deleteRepoSecret"], allowUnmocked).request,
        getAlert: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["getAlert"], allowUnmocked).request,
        getOrgPublicKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["getOrgPublicKey"], allowUnmocked).request,
        getOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["getOrgSecret"], allowUnmocked).request,
        getRepoPublicKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["getRepoPublicKey"], allowUnmocked).request,
        getRepoSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["getRepoSecret"], allowUnmocked).request,
        listAlertsForEnterprise: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["listAlertsForEnterprise"], allowUnmocked).request,
        listAlertsForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["listAlertsForOrg"], allowUnmocked).request,
        listAlertsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["listAlertsForRepo"], allowUnmocked).request,
        listOrgSecrets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["listOrgSecrets"], allowUnmocked).request,
        listRepoSecrets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["listRepoSecrets"], allowUnmocked).request,
        listSelectedReposForOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["listSelectedReposForOrgSecret"], allowUnmocked).request,
        removeSelectedRepoFromOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["removeSelectedRepoFromOrgSecret"], allowUnmocked).request,
        setSelectedReposForOrgSecret: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["setSelectedReposForOrgSecret"], allowUnmocked).request,
        updateAlert: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependabot"]["updateAlert"], allowUnmocked).request,
    },
    dependencyGraph: {
        createRepositorySnapshot: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependencyGraph"]["createRepositorySnapshot"], allowUnmocked).request,
        diffRange: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependencyGraph"]["diffRange"], allowUnmocked).request,
        exportSbom: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["dependencyGraph"]["exportSbom"], allowUnmocked).request,
    },
    emojis: {
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["emojis"]["get"], allowUnmocked).request,
    },
    gists: {
        checkIsStarred: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["checkIsStarred"], allowUnmocked).request,
        create: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["create"], allowUnmocked).request,
        createComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["createComment"], allowUnmocked).request,
        delete: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["delete"], allowUnmocked).request,
        deleteComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["deleteComment"], allowUnmocked).request,
        fork: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["fork"], allowUnmocked).request,
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["get"], allowUnmocked).request,
        getComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["getComment"], allowUnmocked).request,
        getRevision: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["getRevision"], allowUnmocked).request,
        list: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["list"], allowUnmocked).request,
        listComments: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["listComments"], allowUnmocked).request,
        listCommits: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["listCommits"], allowUnmocked).request,
        listForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["listForUser"], allowUnmocked).request,
        listForks: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["listForks"], allowUnmocked).request,
        listPublic: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["listPublic"], allowUnmocked).request,
        listStarred: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["listStarred"], allowUnmocked).request,
        star: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["star"], allowUnmocked).request,
        unstar: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["unstar"], allowUnmocked).request,
        update: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["update"], allowUnmocked).request,
        updateComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gists"]["updateComment"], allowUnmocked).request,
    },
    git: {
        createBlob: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["createBlob"], allowUnmocked).request,
        createCommit: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["createCommit"], allowUnmocked).request,
        createRef: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["createRef"], allowUnmocked).request,
        createTag: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["createTag"], allowUnmocked).request,
        createTree: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["createTree"], allowUnmocked).request,
        deleteRef: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["deleteRef"], allowUnmocked).request,
        getBlob: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["getBlob"], allowUnmocked).request,
        getCommit: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["getCommit"], allowUnmocked).request,
        getRef: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["getRef"], allowUnmocked).request,
        getTag: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["getTag"], allowUnmocked).request,
        getTree: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["getTree"], allowUnmocked).request,
        listMatchingRefs: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["listMatchingRefs"], allowUnmocked).request,
        updateRef: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["git"]["updateRef"], allowUnmocked).request,
    },
    gitignore: {
        getAllTemplates: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gitignore"]["getAllTemplates"], allowUnmocked).request,
        getTemplate: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["gitignore"]["getTemplate"], allowUnmocked).request,
    },
    interactions: {
        getRestrictionsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["getRestrictionsForAuthenticatedUser"], allowUnmocked).request,
        getRestrictionsForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["getRestrictionsForOrg"], allowUnmocked).request,
        getRestrictionsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["getRestrictionsForRepo"], allowUnmocked).request,
        getRestrictionsForYourPublicRepos: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["getRestrictionsForYourPublicRepos"], allowUnmocked).request,
        removeRestrictionsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["removeRestrictionsForAuthenticatedUser"], allowUnmocked).request,
        removeRestrictionsForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["removeRestrictionsForOrg"], allowUnmocked).request,
        removeRestrictionsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["removeRestrictionsForRepo"], allowUnmocked).request,
        removeRestrictionsForYourPublicRepos: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["removeRestrictionsForYourPublicRepos"], allowUnmocked).request,
        setRestrictionsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["setRestrictionsForAuthenticatedUser"], allowUnmocked).request,
        setRestrictionsForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["setRestrictionsForOrg"], allowUnmocked).request,
        setRestrictionsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["setRestrictionsForRepo"], allowUnmocked).request,
        setRestrictionsForYourPublicRepos: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["interactions"]["setRestrictionsForYourPublicRepos"], allowUnmocked).request,
    },
    issues: {
        addAssignees: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["addAssignees"], allowUnmocked).request,
        addLabels: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["addLabels"], allowUnmocked).request,
        checkUserCanBeAssigned: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["checkUserCanBeAssigned"], allowUnmocked).request,
        checkUserCanBeAssignedToIssue: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["checkUserCanBeAssignedToIssue"], allowUnmocked).request,
        create: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["create"], allowUnmocked).request,
        createComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["createComment"], allowUnmocked).request,
        createLabel: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["createLabel"], allowUnmocked).request,
        createMilestone: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["createMilestone"], allowUnmocked).request,
        deleteComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["deleteComment"], allowUnmocked).request,
        deleteLabel: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["deleteLabel"], allowUnmocked).request,
        deleteMilestone: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["deleteMilestone"], allowUnmocked).request,
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["get"], allowUnmocked).request,
        getComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["getComment"], allowUnmocked).request,
        getEvent: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["getEvent"], allowUnmocked).request,
        getLabel: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["getLabel"], allowUnmocked).request,
        getMilestone: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["getMilestone"], allowUnmocked).request,
        list: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["list"], allowUnmocked).request,
        listAssignees: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listAssignees"], allowUnmocked).request,
        listComments: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listComments"], allowUnmocked).request,
        listCommentsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listCommentsForRepo"], allowUnmocked).request,
        listEvents: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listEvents"], allowUnmocked).request,
        listEventsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listEventsForRepo"], allowUnmocked).request,
        listEventsForTimeline: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listEventsForTimeline"], allowUnmocked).request,
        listForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listForAuthenticatedUser"], allowUnmocked).request,
        listForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listForOrg"], allowUnmocked).request,
        listForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listForRepo"], allowUnmocked).request,
        listLabelsForMilestone: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listLabelsForMilestone"], allowUnmocked).request,
        listLabelsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listLabelsForRepo"], allowUnmocked).request,
        listLabelsOnIssue: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listLabelsOnIssue"], allowUnmocked).request,
        listMilestones: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["listMilestones"], allowUnmocked).request,
        lock: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["lock"], allowUnmocked).request,
        removeAllLabels: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["removeAllLabels"], allowUnmocked).request,
        removeAssignees: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["removeAssignees"], allowUnmocked).request,
        removeLabel: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["removeLabel"], allowUnmocked).request,
        setLabels: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["setLabels"], allowUnmocked).request,
        unlock: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["unlock"], allowUnmocked).request,
        update: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["update"], allowUnmocked).request,
        updateComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["updateComment"], allowUnmocked).request,
        updateLabel: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["updateLabel"], allowUnmocked).request,
        updateMilestone: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["issues"]["updateMilestone"], allowUnmocked).request,
    },
    licenses: {
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["licenses"]["get"], allowUnmocked).request,
        getAllCommonlyUsed: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["licenses"]["getAllCommonlyUsed"], allowUnmocked).request,
        getForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["licenses"]["getForRepo"], allowUnmocked).request,
    },
    markdown: {
        render: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["markdown"]["render"], allowUnmocked).request,
        renderRaw: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["markdown"]["renderRaw"], allowUnmocked).request,
    },
    meta: {
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["meta"]["get"], allowUnmocked).request,
        getAllVersions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["meta"]["getAllVersions"], allowUnmocked).request,
        getOctocat: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["meta"]["getOctocat"], allowUnmocked).request,
        getZen: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["meta"]["getZen"], allowUnmocked).request,
        root: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["meta"]["root"], allowUnmocked).request,
    },
    migrations: {
        cancelImport: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["cancelImport"], allowUnmocked).request,
        deleteArchiveForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["deleteArchiveForAuthenticatedUser"], allowUnmocked).request,
        deleteArchiveForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["deleteArchiveForOrg"], allowUnmocked).request,
        downloadArchiveForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["downloadArchiveForOrg"], allowUnmocked).request,
        getArchiveForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["getArchiveForAuthenticatedUser"], allowUnmocked).request,
        getCommitAuthors: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["getCommitAuthors"], allowUnmocked).request,
        getImportStatus: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["getImportStatus"], allowUnmocked).request,
        getLargeFiles: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["getLargeFiles"], allowUnmocked).request,
        getStatusForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["getStatusForAuthenticatedUser"], allowUnmocked).request,
        getStatusForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["getStatusForOrg"], allowUnmocked).request,
        listForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["listForAuthenticatedUser"], allowUnmocked).request,
        listForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["listForOrg"], allowUnmocked).request,
        listReposForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["listReposForAuthenticatedUser"], allowUnmocked).request,
        listReposForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["listReposForOrg"], allowUnmocked).request,
        listReposForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["listReposForUser"], allowUnmocked).request,
        mapCommitAuthor: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["mapCommitAuthor"], allowUnmocked).request,
        setLfsPreference: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["setLfsPreference"], allowUnmocked).request,
        startForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["startForAuthenticatedUser"], allowUnmocked).request,
        startForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["startForOrg"], allowUnmocked).request,
        startImport: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["startImport"], allowUnmocked).request,
        unlockRepoForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["unlockRepoForAuthenticatedUser"], allowUnmocked).request,
        unlockRepoForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["unlockRepoForOrg"], allowUnmocked).request,
        updateImport: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["migrations"]["updateImport"], allowUnmocked).request,
    },
    orgs: {
        addSecurityManagerTeam: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["addSecurityManagerTeam"], allowUnmocked).request,
        blockUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["blockUser"], allowUnmocked).request,
        cancelInvitation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["cancelInvitation"], allowUnmocked).request,
        checkBlockedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["checkBlockedUser"], allowUnmocked).request,
        checkMembershipForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["checkMembershipForUser"], allowUnmocked).request,
        checkPublicMembershipForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["checkPublicMembershipForUser"], allowUnmocked).request,
        convertMemberToOutsideCollaborator: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["convertMemberToOutsideCollaborator"], allowUnmocked).request,
        createInvitation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["createInvitation"], allowUnmocked).request,
        createWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["createWebhook"], allowUnmocked).request,
        delete: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["delete"], allowUnmocked).request,
        deleteWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["deleteWebhook"], allowUnmocked).request,
        enableOrDisableSecurityProductOnAllOrgRepos: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["enableOrDisableSecurityProductOnAllOrgRepos"], allowUnmocked).request,
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["get"], allowUnmocked).request,
        getMembershipForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["getMembershipForAuthenticatedUser"], allowUnmocked).request,
        getMembershipForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["getMembershipForUser"], allowUnmocked).request,
        getWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["getWebhook"], allowUnmocked).request,
        getWebhookConfigForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["getWebhookConfigForOrg"], allowUnmocked).request,
        getWebhookDelivery: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["getWebhookDelivery"], allowUnmocked).request,
        list: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["list"], allowUnmocked).request,
        listAppInstallations: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listAppInstallations"], allowUnmocked).request,
        listBlockedUsers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listBlockedUsers"], allowUnmocked).request,
        listFailedInvitations: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listFailedInvitations"], allowUnmocked).request,
        listForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listForAuthenticatedUser"], allowUnmocked).request,
        listForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listForUser"], allowUnmocked).request,
        listInvitationTeams: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listInvitationTeams"], allowUnmocked).request,
        listMembers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listMembers"], allowUnmocked).request,
        listMembershipsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listMembershipsForAuthenticatedUser"], allowUnmocked).request,
        listOutsideCollaborators: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listOutsideCollaborators"], allowUnmocked).request,
        listPatGrantRepositories: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listPatGrantRepositories"], allowUnmocked).request,
        listPatGrantRequestRepositories: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listPatGrantRequestRepositories"], allowUnmocked).request,
        listPatGrantRequests: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listPatGrantRequests"], allowUnmocked).request,
        listPatGrants: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listPatGrants"], allowUnmocked).request,
        listPendingInvitations: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listPendingInvitations"], allowUnmocked).request,
        listPublicMembers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listPublicMembers"], allowUnmocked).request,
        listSecurityManagerTeams: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listSecurityManagerTeams"], allowUnmocked).request,
        listWebhookDeliveries: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listWebhookDeliveries"], allowUnmocked).request,
        listWebhooks: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["listWebhooks"], allowUnmocked).request,
        pingWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["pingWebhook"], allowUnmocked).request,
        redeliverWebhookDelivery: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["redeliverWebhookDelivery"], allowUnmocked).request,
        removeMember: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["removeMember"], allowUnmocked).request,
        removeMembershipForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["removeMembershipForUser"], allowUnmocked).request,
        removeOutsideCollaborator: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["removeOutsideCollaborator"], allowUnmocked).request,
        removePublicMembershipForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["removePublicMembershipForAuthenticatedUser"], allowUnmocked).request,
        removeSecurityManagerTeam: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["removeSecurityManagerTeam"], allowUnmocked).request,
        reviewPatGrantRequest: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["reviewPatGrantRequest"], allowUnmocked).request,
        reviewPatGrantRequestsInBulk: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["reviewPatGrantRequestsInBulk"], allowUnmocked).request,
        setMembershipForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["setMembershipForUser"], allowUnmocked).request,
        setPublicMembershipForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["setPublicMembershipForAuthenticatedUser"], allowUnmocked).request,
        unblockUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["unblockUser"], allowUnmocked).request,
        update: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["update"], allowUnmocked).request,
        updateMembershipForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["updateMembershipForAuthenticatedUser"], allowUnmocked).request,
        updatePatAccess: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["updatePatAccess"], allowUnmocked).request,
        updatePatAccesses: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["updatePatAccesses"], allowUnmocked).request,
        updateWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["updateWebhook"], allowUnmocked).request,
        updateWebhookConfigForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["orgs"]["updateWebhookConfigForOrg"], allowUnmocked).request,
    },
    packages: {
        deletePackageForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["deletePackageForAuthenticatedUser"], allowUnmocked).request,
        deletePackageForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["deletePackageForOrg"], allowUnmocked).request,
        deletePackageForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["deletePackageForUser"], allowUnmocked).request,
        deletePackageVersionForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["deletePackageVersionForAuthenticatedUser"], allowUnmocked).request,
        deletePackageVersionForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["deletePackageVersionForOrg"], allowUnmocked).request,
        deletePackageVersionForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["deletePackageVersionForUser"], allowUnmocked).request,
        getAllPackageVersionsForAPackageOwnedByAnOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getAllPackageVersionsForAPackageOwnedByAnOrg"], allowUnmocked).request,
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser"], allowUnmocked).request,
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getAllPackageVersionsForPackageOwnedByAuthenticatedUser"], allowUnmocked).request,
        getAllPackageVersionsForPackageOwnedByOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getAllPackageVersionsForPackageOwnedByOrg"], allowUnmocked).request,
        getAllPackageVersionsForPackageOwnedByUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getAllPackageVersionsForPackageOwnedByUser"], allowUnmocked).request,
        getPackageForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getPackageForAuthenticatedUser"], allowUnmocked).request,
        getPackageForOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getPackageForOrganization"], allowUnmocked).request,
        getPackageForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getPackageForUser"], allowUnmocked).request,
        getPackageVersionForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getPackageVersionForAuthenticatedUser"], allowUnmocked).request,
        getPackageVersionForOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getPackageVersionForOrganization"], allowUnmocked).request,
        getPackageVersionForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["getPackageVersionForUser"], allowUnmocked).request,
        listDockerMigrationConflictingPackagesForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["listDockerMigrationConflictingPackagesForAuthenticatedUser"], allowUnmocked).request,
        listDockerMigrationConflictingPackagesForOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["listDockerMigrationConflictingPackagesForOrganization"], allowUnmocked).request,
        listDockerMigrationConflictingPackagesForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["listDockerMigrationConflictingPackagesForUser"], allowUnmocked).request,
        listPackagesForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["listPackagesForAuthenticatedUser"], allowUnmocked).request,
        listPackagesForOrganization: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["listPackagesForOrganization"], allowUnmocked).request,
        listPackagesForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["listPackagesForUser"], allowUnmocked).request,
        restorePackageForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["restorePackageForAuthenticatedUser"], allowUnmocked).request,
        restorePackageForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["restorePackageForOrg"], allowUnmocked).request,
        restorePackageForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["restorePackageForUser"], allowUnmocked).request,
        restorePackageVersionForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["restorePackageVersionForAuthenticatedUser"], allowUnmocked).request,
        restorePackageVersionForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["restorePackageVersionForOrg"], allowUnmocked).request,
        restorePackageVersionForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["packages"]["restorePackageVersionForUser"], allowUnmocked).request,
    },
    projects: {
        addCollaborator: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["addCollaborator"], allowUnmocked).request,
        createCard: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["createCard"], allowUnmocked).request,
        createColumn: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["createColumn"], allowUnmocked).request,
        createForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["createForAuthenticatedUser"], allowUnmocked).request,
        createForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["createForOrg"], allowUnmocked).request,
        createForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["createForRepo"], allowUnmocked).request,
        delete: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["delete"], allowUnmocked).request,
        deleteCard: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["deleteCard"], allowUnmocked).request,
        deleteColumn: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["deleteColumn"], allowUnmocked).request,
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["get"], allowUnmocked).request,
        getCard: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["getCard"], allowUnmocked).request,
        getColumn: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["getColumn"], allowUnmocked).request,
        getPermissionForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["getPermissionForUser"], allowUnmocked).request,
        listCards: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["listCards"], allowUnmocked).request,
        listCollaborators: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["listCollaborators"], allowUnmocked).request,
        listColumns: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["listColumns"], allowUnmocked).request,
        listForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["listForOrg"], allowUnmocked).request,
        listForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["listForRepo"], allowUnmocked).request,
        listForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["listForUser"], allowUnmocked).request,
        moveCard: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["moveCard"], allowUnmocked).request,
        moveColumn: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["moveColumn"], allowUnmocked).request,
        removeCollaborator: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["removeCollaborator"], allowUnmocked).request,
        update: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["update"], allowUnmocked).request,
        updateCard: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["updateCard"], allowUnmocked).request,
        updateColumn: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["projects"]["updateColumn"], allowUnmocked).request,
    },
    pulls: {
        checkIfMerged: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["checkIfMerged"], allowUnmocked).request,
        create: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["create"], allowUnmocked).request,
        createReplyForReviewComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["createReplyForReviewComment"], allowUnmocked).request,
        createReview: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["createReview"], allowUnmocked).request,
        createReviewComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["createReviewComment"], allowUnmocked).request,
        deletePendingReview: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["deletePendingReview"], allowUnmocked).request,
        deleteReviewComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["deleteReviewComment"], allowUnmocked).request,
        dismissReview: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["dismissReview"], allowUnmocked).request,
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["get"], allowUnmocked).request,
        getReview: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["getReview"], allowUnmocked).request,
        getReviewComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["getReviewComment"], allowUnmocked).request,
        list: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["list"], allowUnmocked).request,
        listCommentsForReview: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["listCommentsForReview"], allowUnmocked).request,
        listCommits: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["listCommits"], allowUnmocked).request,
        listFiles: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["listFiles"], allowUnmocked).request,
        listRequestedReviewers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["listRequestedReviewers"], allowUnmocked).request,
        listReviewComments: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["listReviewComments"], allowUnmocked).request,
        listReviewCommentsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["listReviewCommentsForRepo"], allowUnmocked).request,
        listReviews: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["listReviews"], allowUnmocked).request,
        merge: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["merge"], allowUnmocked).request,
        removeRequestedReviewers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["removeRequestedReviewers"], allowUnmocked).request,
        requestReviewers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["requestReviewers"], allowUnmocked).request,
        submitReview: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["submitReview"], allowUnmocked).request,
        update: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["update"], allowUnmocked).request,
        updateBranch: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["updateBranch"], allowUnmocked).request,
        updateReview: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["updateReview"], allowUnmocked).request,
        updateReviewComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["pulls"]["updateReviewComment"], allowUnmocked).request,
    },
    rateLimit: {
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["rateLimit"]["get"], allowUnmocked).request,
    },
    reactions: {
        createForCommitComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["createForCommitComment"], allowUnmocked).request,
        createForIssue: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["createForIssue"], allowUnmocked).request,
        createForIssueComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["createForIssueComment"], allowUnmocked).request,
        createForPullRequestReviewComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["createForPullRequestReviewComment"], allowUnmocked).request,
        createForRelease: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["createForRelease"], allowUnmocked).request,
        createForTeamDiscussionCommentInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["createForTeamDiscussionCommentInOrg"], allowUnmocked).request,
        createForTeamDiscussionInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["createForTeamDiscussionInOrg"], allowUnmocked).request,
        deleteForCommitComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["deleteForCommitComment"], allowUnmocked).request,
        deleteForIssue: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["deleteForIssue"], allowUnmocked).request,
        deleteForIssueComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["deleteForIssueComment"], allowUnmocked).request,
        deleteForPullRequestComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["deleteForPullRequestComment"], allowUnmocked).request,
        deleteForRelease: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["deleteForRelease"], allowUnmocked).request,
        deleteForTeamDiscussion: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["deleteForTeamDiscussion"], allowUnmocked).request,
        deleteForTeamDiscussionComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["deleteForTeamDiscussionComment"], allowUnmocked).request,
        listForCommitComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["listForCommitComment"], allowUnmocked).request,
        listForIssue: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["listForIssue"], allowUnmocked).request,
        listForIssueComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["listForIssueComment"], allowUnmocked).request,
        listForPullRequestReviewComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["listForPullRequestReviewComment"], allowUnmocked).request,
        listForRelease: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["listForRelease"], allowUnmocked).request,
        listForTeamDiscussionCommentInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["listForTeamDiscussionCommentInOrg"], allowUnmocked).request,
        listForTeamDiscussionInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["reactions"]["listForTeamDiscussionInOrg"], allowUnmocked).request,
    },
    repos: {
        acceptInvitation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["acceptInvitation"], allowUnmocked).request,
        acceptInvitationForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["acceptInvitationForAuthenticatedUser"], allowUnmocked).request,
        addAppAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["addAppAccessRestrictions"], allowUnmocked).request,
        addCollaborator: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["addCollaborator"], allowUnmocked).request,
        addStatusCheckContexts: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["addStatusCheckContexts"], allowUnmocked).request,
        addTeamAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["addTeamAccessRestrictions"], allowUnmocked).request,
        addUserAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["addUserAccessRestrictions"], allowUnmocked).request,
        checkCollaborator: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["checkCollaborator"], allowUnmocked).request,
        checkVulnerabilityAlerts: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["checkVulnerabilityAlerts"], allowUnmocked).request,
        codeownersErrors: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["codeownersErrors"], allowUnmocked).request,
        compareCommits: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["compareCommits"], allowUnmocked).request,
        compareCommitsWithBasehead: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["compareCommitsWithBasehead"], allowUnmocked).request,
        createAutolink: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createAutolink"], allowUnmocked).request,
        createCommitComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createCommitComment"], allowUnmocked).request,
        createCommitSignatureProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createCommitSignatureProtection"], allowUnmocked).request,
        createCommitStatus: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createCommitStatus"], allowUnmocked).request,
        createDeployKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createDeployKey"], allowUnmocked).request,
        createDeployment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createDeployment"], allowUnmocked).request,
        createDeploymentBranchPolicy: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createDeploymentBranchPolicy"], allowUnmocked).request,
        createDeploymentProtectionRule: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createDeploymentProtectionRule"], allowUnmocked).request,
        createDeploymentStatus: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createDeploymentStatus"], allowUnmocked).request,
        createDispatchEvent: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createDispatchEvent"], allowUnmocked).request,
        createForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createForAuthenticatedUser"], allowUnmocked).request,
        createFork: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createFork"], allowUnmocked).request,
        createInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createInOrg"], allowUnmocked).request,
        createOrUpdateEnvironment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createOrUpdateEnvironment"], allowUnmocked).request,
        createOrUpdateFileContents: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createOrUpdateFileContents"], allowUnmocked).request,
        createOrgRuleset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createOrgRuleset"], allowUnmocked).request,
        createPagesDeployment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createPagesDeployment"], allowUnmocked).request,
        createPagesSite: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createPagesSite"], allowUnmocked).request,
        createRelease: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createRelease"], allowUnmocked).request,
        createRepoRuleset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createRepoRuleset"], allowUnmocked).request,
        createTagProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createTagProtection"], allowUnmocked).request,
        createUsingTemplate: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createUsingTemplate"], allowUnmocked).request,
        createWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["createWebhook"], allowUnmocked).request,
        declineInvitation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["declineInvitation"], allowUnmocked).request,
        declineInvitationForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["declineInvitationForAuthenticatedUser"], allowUnmocked).request,
        delete: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["delete"], allowUnmocked).request,
        deleteAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteAccessRestrictions"], allowUnmocked).request,
        deleteAdminBranchProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteAdminBranchProtection"], allowUnmocked).request,
        deleteAnEnvironment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteAnEnvironment"], allowUnmocked).request,
        deleteAutolink: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteAutolink"], allowUnmocked).request,
        deleteBranchProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteBranchProtection"], allowUnmocked).request,
        deleteCommitComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteCommitComment"], allowUnmocked).request,
        deleteCommitSignatureProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteCommitSignatureProtection"], allowUnmocked).request,
        deleteDeployKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteDeployKey"], allowUnmocked).request,
        deleteDeployment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteDeployment"], allowUnmocked).request,
        deleteDeploymentBranchPolicy: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteDeploymentBranchPolicy"], allowUnmocked).request,
        deleteFile: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteFile"], allowUnmocked).request,
        deleteInvitation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteInvitation"], allowUnmocked).request,
        deleteOrgRuleset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteOrgRuleset"], allowUnmocked).request,
        deletePagesSite: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deletePagesSite"], allowUnmocked).request,
        deletePullRequestReviewProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deletePullRequestReviewProtection"], allowUnmocked).request,
        deleteRelease: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteRelease"], allowUnmocked).request,
        deleteReleaseAsset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteReleaseAsset"], allowUnmocked).request,
        deleteRepoRuleset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteRepoRuleset"], allowUnmocked).request,
        deleteTagProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteTagProtection"], allowUnmocked).request,
        deleteWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["deleteWebhook"], allowUnmocked).request,
        disableAutomatedSecurityFixes: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["disableAutomatedSecurityFixes"], allowUnmocked).request,
        disableDeploymentProtectionRule: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["disableDeploymentProtectionRule"], allowUnmocked).request,
        disableLfsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["disableLfsForRepo"], allowUnmocked).request,
        disableVulnerabilityAlerts: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["disableVulnerabilityAlerts"], allowUnmocked).request,
        downloadArchive: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["downloadArchive"], allowUnmocked).request,
        downloadTarballArchive: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["downloadTarballArchive"], allowUnmocked).request,
        downloadZipballArchive: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["downloadZipballArchive"], allowUnmocked).request,
        enableAutomatedSecurityFixes: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["enableAutomatedSecurityFixes"], allowUnmocked).request,
        enableLfsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["enableLfsForRepo"], allowUnmocked).request,
        enableVulnerabilityAlerts: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["enableVulnerabilityAlerts"], allowUnmocked).request,
        generateReleaseNotes: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["generateReleaseNotes"], allowUnmocked).request,
        get: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["get"], allowUnmocked).request,
        getAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getAccessRestrictions"], allowUnmocked).request,
        getAdminBranchProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getAdminBranchProtection"], allowUnmocked).request,
        getAllDeploymentProtectionRules: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getAllDeploymentProtectionRules"], allowUnmocked).request,
        getAllEnvironments: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getAllEnvironments"], allowUnmocked).request,
        getAllStatusCheckContexts: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getAllStatusCheckContexts"], allowUnmocked).request,
        getAllTopics: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getAllTopics"], allowUnmocked).request,
        getAppsWithAccessToProtectedBranch: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getAppsWithAccessToProtectedBranch"], allowUnmocked).request,
        getAutolink: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getAutolink"], allowUnmocked).request,
        getBranch: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getBranch"], allowUnmocked).request,
        getBranchProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getBranchProtection"], allowUnmocked).request,
        getBranchRules: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getBranchRules"], allowUnmocked).request,
        getClones: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getClones"], allowUnmocked).request,
        getCodeFrequencyStats: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCodeFrequencyStats"], allowUnmocked).request,
        getCollaboratorPermissionLevel: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCollaboratorPermissionLevel"], allowUnmocked).request,
        getCombinedStatusForRef: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCombinedStatusForRef"], allowUnmocked).request,
        getCommit: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCommit"], allowUnmocked).request,
        getCommitActivityStats: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCommitActivityStats"], allowUnmocked).request,
        getCommitComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCommitComment"], allowUnmocked).request,
        getCommitSignatureProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCommitSignatureProtection"], allowUnmocked).request,
        getCommunityProfileMetrics: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCommunityProfileMetrics"], allowUnmocked).request,
        getContent: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getContent"], allowUnmocked).request,
        getContributorsStats: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getContributorsStats"], allowUnmocked).request,
        getCustomDeploymentProtectionRule: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getCustomDeploymentProtectionRule"], allowUnmocked).request,
        getDeployKey: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getDeployKey"], allowUnmocked).request,
        getDeployment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getDeployment"], allowUnmocked).request,
        getDeploymentBranchPolicy: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getDeploymentBranchPolicy"], allowUnmocked).request,
        getDeploymentStatus: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getDeploymentStatus"], allowUnmocked).request,
        getEnvironment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getEnvironment"], allowUnmocked).request,
        getLatestPagesBuild: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getLatestPagesBuild"], allowUnmocked).request,
        getLatestRelease: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getLatestRelease"], allowUnmocked).request,
        getOrgRuleset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getOrgRuleset"], allowUnmocked).request,
        getOrgRulesets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getOrgRulesets"], allowUnmocked).request,
        getPages: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getPages"], allowUnmocked).request,
        getPagesBuild: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getPagesBuild"], allowUnmocked).request,
        getPagesHealthCheck: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getPagesHealthCheck"], allowUnmocked).request,
        getParticipationStats: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getParticipationStats"], allowUnmocked).request,
        getPullRequestReviewProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getPullRequestReviewProtection"], allowUnmocked).request,
        getPunchCardStats: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getPunchCardStats"], allowUnmocked).request,
        getReadme: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getReadme"], allowUnmocked).request,
        getReadmeInDirectory: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getReadmeInDirectory"], allowUnmocked).request,
        getRelease: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getRelease"], allowUnmocked).request,
        getReleaseAsset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getReleaseAsset"], allowUnmocked).request,
        getReleaseByTag: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getReleaseByTag"], allowUnmocked).request,
        getRepoRuleset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getRepoRuleset"], allowUnmocked).request,
        getRepoRulesets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getRepoRulesets"], allowUnmocked).request,
        getStatusChecksProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getStatusChecksProtection"], allowUnmocked).request,
        getTeamsWithAccessToProtectedBranch: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getTeamsWithAccessToProtectedBranch"], allowUnmocked).request,
        getTopPaths: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getTopPaths"], allowUnmocked).request,
        getTopReferrers: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getTopReferrers"], allowUnmocked).request,
        getUsersWithAccessToProtectedBranch: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getUsersWithAccessToProtectedBranch"], allowUnmocked).request,
        getViews: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getViews"], allowUnmocked).request,
        getWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getWebhook"], allowUnmocked).request,
        getWebhookConfigForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getWebhookConfigForRepo"], allowUnmocked).request,
        getWebhookDelivery: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["getWebhookDelivery"], allowUnmocked).request,
        listAutolinks: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listAutolinks"], allowUnmocked).request,
        listBranches: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listBranches"], allowUnmocked).request,
        listBranchesForHeadCommit: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listBranchesForHeadCommit"], allowUnmocked).request,
        listCollaborators: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listCollaborators"], allowUnmocked).request,
        listCommentsForCommit: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listCommentsForCommit"], allowUnmocked).request,
        listCommitCommentsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listCommitCommentsForRepo"], allowUnmocked).request,
        listCommitStatusesForRef: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listCommitStatusesForRef"], allowUnmocked).request,
        listCommits: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listCommits"], allowUnmocked).request,
        listContributors: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listContributors"], allowUnmocked).request,
        listCustomDeploymentRuleIntegrations: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listCustomDeploymentRuleIntegrations"], allowUnmocked).request,
        listDeployKeys: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listDeployKeys"], allowUnmocked).request,
        listDeploymentBranchPolicies: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listDeploymentBranchPolicies"], allowUnmocked).request,
        listDeploymentStatuses: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listDeploymentStatuses"], allowUnmocked).request,
        listDeployments: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listDeployments"], allowUnmocked).request,
        listForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listForAuthenticatedUser"], allowUnmocked).request,
        listForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listForOrg"], allowUnmocked).request,
        listForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listForUser"], allowUnmocked).request,
        listForks: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listForks"], allowUnmocked).request,
        listInvitations: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listInvitations"], allowUnmocked).request,
        listInvitationsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listInvitationsForAuthenticatedUser"], allowUnmocked).request,
        listLanguages: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listLanguages"], allowUnmocked).request,
        listPagesBuilds: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listPagesBuilds"], allowUnmocked).request,
        listPublic: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listPublic"], allowUnmocked).request,
        listPullRequestsAssociatedWithCommit: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listPullRequestsAssociatedWithCommit"], allowUnmocked).request,
        listReleaseAssets: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listReleaseAssets"], allowUnmocked).request,
        listReleases: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listReleases"], allowUnmocked).request,
        listTagProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listTagProtection"], allowUnmocked).request,
        listTags: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listTags"], allowUnmocked).request,
        listTeams: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listTeams"], allowUnmocked).request,
        listWebhookDeliveries: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listWebhookDeliveries"], allowUnmocked).request,
        listWebhooks: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["listWebhooks"], allowUnmocked).request,
        merge: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["merge"], allowUnmocked).request,
        mergeUpstream: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["mergeUpstream"], allowUnmocked).request,
        pingWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["pingWebhook"], allowUnmocked).request,
        redeliverWebhookDelivery: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["redeliverWebhookDelivery"], allowUnmocked).request,
        removeAppAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["removeAppAccessRestrictions"], allowUnmocked).request,
        removeCollaborator: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["removeCollaborator"], allowUnmocked).request,
        removeStatusCheckContexts: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["removeStatusCheckContexts"], allowUnmocked).request,
        removeStatusCheckProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["removeStatusCheckProtection"], allowUnmocked).request,
        removeTeamAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["removeTeamAccessRestrictions"], allowUnmocked).request,
        removeUserAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["removeUserAccessRestrictions"], allowUnmocked).request,
        renameBranch: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["renameBranch"], allowUnmocked).request,
        replaceAllTopics: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["replaceAllTopics"], allowUnmocked).request,
        requestPagesBuild: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["requestPagesBuild"], allowUnmocked).request,
        setAdminBranchProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["setAdminBranchProtection"], allowUnmocked).request,
        setAppAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["setAppAccessRestrictions"], allowUnmocked).request,
        setStatusCheckContexts: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["setStatusCheckContexts"], allowUnmocked).request,
        setTeamAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["setTeamAccessRestrictions"], allowUnmocked).request,
        setUserAccessRestrictions: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["setUserAccessRestrictions"], allowUnmocked).request,
        testPushWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["testPushWebhook"], allowUnmocked).request,
        transfer: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["transfer"], allowUnmocked).request,
        update: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["update"], allowUnmocked).request,
        updateBranchProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateBranchProtection"], allowUnmocked).request,
        updateCommitComment: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateCommitComment"], allowUnmocked).request,
        updateDeploymentBranchPolicy: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateDeploymentBranchPolicy"], allowUnmocked).request,
        updateInformationAboutPagesSite: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateInformationAboutPagesSite"], allowUnmocked).request,
        updateInvitation: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateInvitation"], allowUnmocked).request,
        updateOrgRuleset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateOrgRuleset"], allowUnmocked).request,
        updatePullRequestReviewProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updatePullRequestReviewProtection"], allowUnmocked).request,
        updateRelease: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateRelease"], allowUnmocked).request,
        updateReleaseAsset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateReleaseAsset"], allowUnmocked).request,
        updateRepoRuleset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateRepoRuleset"], allowUnmocked).request,
        updateStatusCheckPotection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateStatusCheckPotection"], allowUnmocked).request,
        updateStatusCheckProtection: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateStatusCheckProtection"], allowUnmocked).request,
        updateWebhook: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateWebhook"], allowUnmocked).request,
        updateWebhookConfigForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["updateWebhookConfigForRepo"], allowUnmocked).request,
        uploadReleaseAsset: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["repos"]["uploadReleaseAsset"], allowUnmocked).request,
    },
    search: {
        code: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["search"]["code"], allowUnmocked).request,
        commits: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["search"]["commits"], allowUnmocked).request,
        issuesAndPullRequests: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["search"]["issuesAndPullRequests"], allowUnmocked).request,
        labels: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["search"]["labels"], allowUnmocked).request,
        repos: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["search"]["repos"], allowUnmocked).request,
        topics: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["search"]["topics"], allowUnmocked).request,
        users: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["search"]["users"], allowUnmocked).request,
    },
    secretScanning: {
        getAlert: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["secretScanning"]["getAlert"], allowUnmocked).request,
        listAlertsForEnterprise: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["secretScanning"]["listAlertsForEnterprise"], allowUnmocked).request,
        listAlertsForOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["secretScanning"]["listAlertsForOrg"], allowUnmocked).request,
        listAlertsForRepo: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["secretScanning"]["listAlertsForRepo"], allowUnmocked).request,
        listLocationsForAlert: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["secretScanning"]["listLocationsForAlert"], allowUnmocked).request,
        updateAlert: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["secretScanning"]["updateAlert"], allowUnmocked).request,
    },
    securityAdvisories: {
        createPrivateVulnerabilityReport: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["securityAdvisories"]["createPrivateVulnerabilityReport"], allowUnmocked).request,
        createRepositoryAdvisory: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["securityAdvisories"]["createRepositoryAdvisory"], allowUnmocked).request,
        getRepositoryAdvisory: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["securityAdvisories"]["getRepositoryAdvisory"], allowUnmocked).request,
        listRepositoryAdvisories: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["securityAdvisories"]["listRepositoryAdvisories"], allowUnmocked).request,
        updateRepositoryAdvisory: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["securityAdvisories"]["updateRepositoryAdvisory"], allowUnmocked).request,
    },
    teams: {
        addOrUpdateMembershipForUserInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["addOrUpdateMembershipForUserInOrg"], allowUnmocked).request,
        addOrUpdateProjectPermissionsInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["addOrUpdateProjectPermissionsInOrg"], allowUnmocked).request,
        addOrUpdateRepoPermissionsInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["addOrUpdateRepoPermissionsInOrg"], allowUnmocked).request,
        checkPermissionsForProjectInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["checkPermissionsForProjectInOrg"], allowUnmocked).request,
        checkPermissionsForRepoInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["checkPermissionsForRepoInOrg"], allowUnmocked).request,
        create: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["create"], allowUnmocked).request,
        createDiscussionCommentInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["createDiscussionCommentInOrg"], allowUnmocked).request,
        createDiscussionInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["createDiscussionInOrg"], allowUnmocked).request,
        deleteDiscussionCommentInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["deleteDiscussionCommentInOrg"], allowUnmocked).request,
        deleteDiscussionInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["deleteDiscussionInOrg"], allowUnmocked).request,
        deleteInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["deleteInOrg"], allowUnmocked).request,
        getByName: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["getByName"], allowUnmocked).request,
        getDiscussionCommentInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["getDiscussionCommentInOrg"], allowUnmocked).request,
        getDiscussionInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["getDiscussionInOrg"], allowUnmocked).request,
        getMembershipForUserInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["getMembershipForUserInOrg"], allowUnmocked).request,
        list: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["list"], allowUnmocked).request,
        listChildInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["listChildInOrg"], allowUnmocked).request,
        listDiscussionCommentsInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["listDiscussionCommentsInOrg"], allowUnmocked).request,
        listDiscussionsInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["listDiscussionsInOrg"], allowUnmocked).request,
        listForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["listForAuthenticatedUser"], allowUnmocked).request,
        listMembersInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["listMembersInOrg"], allowUnmocked).request,
        listPendingInvitationsInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["listPendingInvitationsInOrg"], allowUnmocked).request,
        listProjectsInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["listProjectsInOrg"], allowUnmocked).request,
        listReposInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["listReposInOrg"], allowUnmocked).request,
        removeMembershipForUserInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["removeMembershipForUserInOrg"], allowUnmocked).request,
        removeProjectInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["removeProjectInOrg"], allowUnmocked).request,
        removeRepoInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["removeRepoInOrg"], allowUnmocked).request,
        updateDiscussionCommentInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["updateDiscussionCommentInOrg"], allowUnmocked).request,
        updateDiscussionInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["updateDiscussionInOrg"], allowUnmocked).request,
        updateInOrg: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["teams"]["updateInOrg"], allowUnmocked).request,
    },
    users: {
        addEmailForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["addEmailForAuthenticated"], allowUnmocked).request,
        addEmailForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["addEmailForAuthenticatedUser"], allowUnmocked).request,
        addSocialAccountForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["addSocialAccountForAuthenticatedUser"], allowUnmocked).request,
        block: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["block"], allowUnmocked).request,
        checkBlocked: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["checkBlocked"], allowUnmocked).request,
        checkFollowingForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["checkFollowingForUser"], allowUnmocked).request,
        checkPersonIsFollowedByAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["checkPersonIsFollowedByAuthenticated"], allowUnmocked).request,
        createGpgKeyForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["createGpgKeyForAuthenticated"], allowUnmocked).request,
        createGpgKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["createGpgKeyForAuthenticatedUser"], allowUnmocked).request,
        createPublicSshKeyForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["createPublicSshKeyForAuthenticated"], allowUnmocked).request,
        createPublicSshKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["createPublicSshKeyForAuthenticatedUser"], allowUnmocked).request,
        createSshSigningKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["createSshSigningKeyForAuthenticatedUser"], allowUnmocked).request,
        deleteEmailForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["deleteEmailForAuthenticated"], allowUnmocked).request,
        deleteEmailForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["deleteEmailForAuthenticatedUser"], allowUnmocked).request,
        deleteGpgKeyForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["deleteGpgKeyForAuthenticated"], allowUnmocked).request,
        deleteGpgKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["deleteGpgKeyForAuthenticatedUser"], allowUnmocked).request,
        deletePublicSshKeyForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["deletePublicSshKeyForAuthenticated"], allowUnmocked).request,
        deletePublicSshKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["deletePublicSshKeyForAuthenticatedUser"], allowUnmocked).request,
        deleteSocialAccountForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["deleteSocialAccountForAuthenticatedUser"], allowUnmocked).request,
        deleteSshSigningKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["deleteSshSigningKeyForAuthenticatedUser"], allowUnmocked).request,
        follow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["follow"], allowUnmocked).request,
        getAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["getAuthenticated"], allowUnmocked).request,
        getByUsername: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["getByUsername"], allowUnmocked).request,
        getContextForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["getContextForUser"], allowUnmocked).request,
        getGpgKeyForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["getGpgKeyForAuthenticated"], allowUnmocked).request,
        getGpgKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["getGpgKeyForAuthenticatedUser"], allowUnmocked).request,
        getPublicSshKeyForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["getPublicSshKeyForAuthenticated"], allowUnmocked).request,
        getPublicSshKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["getPublicSshKeyForAuthenticatedUser"], allowUnmocked).request,
        getSshSigningKeyForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["getSshSigningKeyForAuthenticatedUser"], allowUnmocked).request,
        list: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["list"], allowUnmocked).request,
        listBlockedByAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listBlockedByAuthenticated"], allowUnmocked).request,
        listBlockedByAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listBlockedByAuthenticatedUser"], allowUnmocked).request,
        listEmailsForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listEmailsForAuthenticated"], allowUnmocked).request,
        listEmailsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listEmailsForAuthenticatedUser"], allowUnmocked).request,
        listFollowedByAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listFollowedByAuthenticated"], allowUnmocked).request,
        listFollowedByAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listFollowedByAuthenticatedUser"], allowUnmocked).request,
        listFollowersForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listFollowersForAuthenticatedUser"], allowUnmocked).request,
        listFollowersForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listFollowersForUser"], allowUnmocked).request,
        listFollowingForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listFollowingForUser"], allowUnmocked).request,
        listGpgKeysForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listGpgKeysForAuthenticated"], allowUnmocked).request,
        listGpgKeysForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listGpgKeysForAuthenticatedUser"], allowUnmocked).request,
        listGpgKeysForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listGpgKeysForUser"], allowUnmocked).request,
        listPublicEmailsForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listPublicEmailsForAuthenticated"], allowUnmocked).request,
        listPublicEmailsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listPublicEmailsForAuthenticatedUser"], allowUnmocked).request,
        listPublicKeysForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listPublicKeysForUser"], allowUnmocked).request,
        listPublicSshKeysForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listPublicSshKeysForAuthenticated"], allowUnmocked).request,
        listPublicSshKeysForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listPublicSshKeysForAuthenticatedUser"], allowUnmocked).request,
        listSocialAccountsForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listSocialAccountsForAuthenticatedUser"], allowUnmocked).request,
        listSocialAccountsForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listSocialAccountsForUser"], allowUnmocked).request,
        listSshSigningKeysForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listSshSigningKeysForAuthenticatedUser"], allowUnmocked).request,
        listSshSigningKeysForUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["listSshSigningKeysForUser"], allowUnmocked).request,
        setPrimaryEmailVisibilityForAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["setPrimaryEmailVisibilityForAuthenticated"], allowUnmocked).request,
        setPrimaryEmailVisibilityForAuthenticatedUser: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["setPrimaryEmailVisibilityForAuthenticatedUser"], allowUnmocked).request,
        unblock: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["unblock"], allowUnmocked).request,
        unfollow: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["unfollow"], allowUnmocked).request,
        updateAuthenticated: new request_mocker_1.MoctokitRequestMocker(baseUrl, endpoint_details_1.default["users"]["updateAuthenticated"], allowUnmocked).request,
    },
});
exports.default = endpointToMethod;
