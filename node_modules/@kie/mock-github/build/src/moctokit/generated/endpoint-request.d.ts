declare const endpointToMethod: (baseUrl: string, allowUnmocked?: boolean) => {
    actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: (params?: {
            org?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/{runner_id}/labels", "post">;
        addCustomLabelsToSelfHostedRunnerForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", "post">;
        addSelectedRepoToOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", "put">;
        addSelectedRepoToOrgVariable: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables/{name}/repositories/{repository_id}", "put">;
        addSelectedRepoToRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            required_workflow_id?: number | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}", "put">;
        approveWorkflowRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/approve", "post">;
        cancelWorkflowRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/cancel", "post">;
        createEnvironmentVariable: (params?: {
            repository_id?: number | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            value?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/variables", "post">;
        createOrUpdateEnvironmentSecret: (params?: {
            repository_id?: number | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            encrypted_value?: string | RegExp | undefined;
            key_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", "put">;
        createOrUpdateOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            encrypted_value?: string | RegExp | undefined;
            key_id?: string | RegExp | undefined;
            visibility?: RegExp | "all" | "private" | "selected" | undefined;
            selected_repository_ids?: RegExp | (string | number)[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets/{secret_name}", "put">;
        createOrUpdateRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            encrypted_value?: string | RegExp | undefined;
            key_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/secrets/{secret_name}", "put">;
        createOrgVariable: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            value?: string | RegExp | undefined;
            visibility?: RegExp | "all" | "private" | "selected" | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables", "post">;
        createRegistrationTokenForOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/registration-token", "post">;
        createRegistrationTokenForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/registration-token", "post">;
        createRemoveTokenForOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/remove-token", "post">;
        createRemoveTokenForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/remove-token", "post">;
        createRepoVariable: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            value?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/variables", "post">;
        createRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            workflow_file_path?: string | RegExp | undefined;
            repository_id?: string | RegExp | undefined;
            scope?: RegExp | "all" | "selected" | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows", "post">;
        createWorkflowDispatch: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            workflow_id?: string | number | RegExp | undefined;
            ref?: string | RegExp | undefined;
            inputs?: RegExp | {
                [key: string]: unknown;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", "post">;
        deleteActionsCacheById: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            cache_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/caches/{cache_id}", "delete">;
        deleteActionsCacheByKey: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            key?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/caches", "delete">;
        deleteArtifact: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            artifact_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", "delete">;
        deleteEnvironmentSecret: (params?: {
            repository_id?: number | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", "delete">;
        deleteEnvironmentVariable: (params?: {
            repository_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/variables/{name}", "delete">;
        deleteOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets/{secret_name}", "delete">;
        deleteOrgVariable: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables/{name}", "delete">;
        deleteRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/secrets/{secret_name}", "delete">;
        deleteRepoVariable: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/variables/{name}", "delete">;
        deleteRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            required_workflow_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows/{required_workflow_id}", "delete">;
        deleteSelfHostedRunnerFromOrg: (params?: {
            org?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/{runner_id}", "delete">;
        deleteSelfHostedRunnerFromRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/{runner_id}", "delete">;
        deleteWorkflowRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}", "delete">;
        deleteWorkflowRunLogs: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/logs", "delete">;
        disableSelectedRepositoryGithubActionsOrganization: (params?: {
            org?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions/repositories/{repository_id}", "delete">;
        disableWorkflow: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            workflow_id?: string | number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable", "put">;
        downloadArtifact: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            artifact_id?: number | RegExp | undefined;
            archive_format?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}", "get">;
        downloadJobLogsForWorkflowRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            job_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/jobs/{job_id}/logs", "get">;
        downloadWorkflowRunAttemptLogs: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
            attempt_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs", "get">;
        downloadWorkflowRunLogs: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/logs", "get">;
        enableSelectedRepositoryGithubActionsOrganization: (params?: {
            org?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions/repositories/{repository_id}", "put">;
        enableWorkflow: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            workflow_id?: string | number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable", "put">;
        generateRunnerJitconfigForEnterprise: (params?: {
            enterprise?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            runner_group_id?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
            work_folder?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/enterprises/{enterprise}/actions/runners/generate-jitconfig", "post">;
        generateRunnerJitconfigForOrg: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            runner_group_id?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
            work_folder?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/generate-jitconfig", "post">;
        generateRunnerJitconfigForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            runner_group_id?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
            work_folder?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/generate-jitconfig", "post">;
        getActionsCacheList: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/caches", "get">;
        getActionsCacheUsage: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/cache/usage", "get">;
        getActionsCacheUsageByRepoForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/cache/usage-by-repository", "get">;
        getActionsCacheUsageForOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/cache/usage", "get">;
        getAllowedActionsOrganization: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions/selected-actions", "get">;
        getAllowedActionsRepository: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions/selected-actions", "get">;
        getArtifact: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            artifact_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", "get">;
        getEnvironmentPublicKey: (params?: {
            repository_id?: number | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/secrets/public-key", "get">;
        getEnvironmentSecret: (params?: {
            repository_id?: number | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", "get">;
        getEnvironmentVariable: (params?: {
            repository_id?: number | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/variables/{name}", "get">;
        getGithubActionsDefaultWorkflowPermissionsOrganization: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions/workflow", "get">;
        getGithubActionsDefaultWorkflowPermissionsRepository: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions/workflow", "get">;
        getGithubActionsPermissionsOrganization: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions", "get">;
        getGithubActionsPermissionsRepository: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions", "get">;
        getJobForWorkflowRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            job_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/jobs/{job_id}", "get">;
        getOrgPublicKey: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets/public-key", "get">;
        getOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets/{secret_name}", "get">;
        getOrgVariable: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables/{name}", "get">;
        getPendingDeploymentsForRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", "get">;
        getRepoPermissions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions", "get">;
        getRepoPublicKey: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/secrets/public-key", "get">;
        getRepoRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            required_workflow_id_for_repo?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}", "get">;
        getRepoRequiredWorkflowUsage: (params?: {
            org?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            required_workflow_id_for_repo?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing", "get">;
        getRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/secrets/{secret_name}", "get">;
        getRepoVariable: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/variables/{name}", "get">;
        getRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            required_workflow_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows/{required_workflow_id}", "get">;
        getReviewsForRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/approvals", "get">;
        getSelfHostedRunnerForOrg: (params?: {
            org?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/{runner_id}", "get">;
        getSelfHostedRunnerForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/{runner_id}", "get">;
        getWorkflow: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            workflow_id?: string | number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/workflows/{workflow_id}", "get">;
        getWorkflowAccessToRepository: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions/access", "get">;
        getWorkflowRun: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}", "get">;
        getWorkflowRunAttempt: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}", "get">;
        getWorkflowRunUsage: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/timing", "get">;
        getWorkflowUsage: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            workflow_id?: string | number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing", "get">;
        listArtifactsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/artifacts", "get">;
        listEnvironmentSecrets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/secrets", "get">;
        listEnvironmentVariables: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/variables", "get">;
        listJobsForWorkflowRun: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/jobs", "get">;
        listJobsForWorkflowRunAttempt: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", "get">;
        listLabelsForSelfHostedRunnerForOrg: (params?: {
            org?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/{runner_id}/labels", "get">;
        listLabelsForSelfHostedRunnerForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", "get">;
        listOrgSecrets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets", "get">;
        listOrgVariables: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables", "get">;
        listRepoOrganizationSecrets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/organization-secrets", "get">;
        listRepoOrganizationVariables: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/organization-variables", "get">;
        listRepoRequiredWorkflows: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{org}/{repo}/actions/required_workflows", "get">;
        listRepoSecrets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/secrets", "get">;
        listRepoVariables: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/variables", "get">;
        listRepoWorkflows: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/workflows", "get">;
        listRequiredWorkflowRuns: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs", "get">;
        listRequiredWorkflows: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows", "get">;
        listRunnerApplicationsForOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/downloads", "get">;
        listRunnerApplicationsForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/downloads", "get">;
        listSelectedReposForOrgSecret: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets/{secret_name}/repositories", "get">;
        listSelectedReposForOrgVariable: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables/{name}/repositories", "get">;
        listSelectedRepositoriesEnabledGithubActionsOrganization: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions/repositories", "get">;
        listSelectedRepositoriesRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            required_workflow_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories", "get">;
        listSelfHostedRunnersForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners", "get">;
        listSelfHostedRunnersForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners", "get">;
        listWorkflowRunArtifacts: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", "get">;
        listWorkflowRuns: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", "get">;
        listWorkflowRunsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs", "get">;
        reRunJobForWorkflowRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            job_id?: number | RegExp | undefined;
            enable_debug_logging?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun", "post">;
        reRunWorkflow: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
            enable_debug_logging?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/rerun", "post">;
        reRunWorkflowFailedJobs: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
            enable_debug_logging?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs", "post">;
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: (params?: {
            org?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/{runner_id}/labels", "delete">;
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", "delete">;
        removeCustomLabelFromSelfHostedRunnerForOrg: (params?: {
            org?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/{runner_id}/labels/{name}", "delete">;
        removeCustomLabelFromSelfHostedRunnerForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}", "delete">;
        removeSelectedRepoFromOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", "delete">;
        removeSelectedRepoFromOrgVariable: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables/{name}/repositories/{repository_id}", "delete">;
        removeSelectedRepoFromRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            required_workflow_id?: number | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}", "delete">;
        reviewCustomGatesForRun: (params?: ({
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            comment?: string | RegExp | undefined;
        } | {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            state?: RegExp | "approved" | "rejected" | undefined;
            comment?: string | RegExp | undefined;
        }) | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule", "post">;
        reviewPendingDeploymentsForRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            run_id?: number | RegExp | undefined;
            environment_ids?: RegExp | number[] | undefined;
            state?: RegExp | "approved" | "rejected" | undefined;
            comment?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", "post">;
        setAllowedActionsOrganization: (params?: {
            org?: string | RegExp | undefined;
            github_owned_allowed?: boolean | RegExp | undefined;
            verified_allowed?: boolean | RegExp | undefined;
            patterns_allowed?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions/selected-actions", "put">;
        setAllowedActionsRepository: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            github_owned_allowed?: boolean | RegExp | undefined;
            verified_allowed?: boolean | RegExp | undefined;
            patterns_allowed?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions/selected-actions", "put">;
        setCustomLabelsForSelfHostedRunnerForOrg: (params?: {
            org?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/runners/{runner_id}/labels", "put">;
        setCustomLabelsForSelfHostedRunnerForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            runner_id?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", "put">;
        setGithubActionsDefaultWorkflowPermissionsOrganization: (params?: {
            org?: string | RegExp | undefined;
            default_workflow_permissions?: RegExp | "read" | "write" | undefined;
            can_approve_pull_request_reviews?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions/workflow", "put">;
        setGithubActionsDefaultWorkflowPermissionsRepository: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            default_workflow_permissions?: RegExp | "read" | "write" | undefined;
            can_approve_pull_request_reviews?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions/workflow", "put">;
        setGithubActionsPermissionsOrganization: (params?: {
            org?: string | RegExp | undefined;
            enabled_repositories?: RegExp | "all" | "selected" | "none" | undefined;
            allowed_actions?: RegExp | "all" | "selected" | "local_only" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions", "put">;
        setGithubActionsPermissionsRepository: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            enabled?: boolean | RegExp | undefined;
            allowed_actions?: RegExp | "all" | "selected" | "local_only" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions", "put">;
        setSelectedReposForOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/secrets/{secret_name}/repositories", "put">;
        setSelectedReposForOrgVariable: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables/{name}/repositories", "put">;
        setSelectedReposToRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            required_workflow_id?: number | RegExp | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories", "put">;
        setSelectedRepositoriesEnabledGithubActionsOrganization: (params?: {
            org?: string | RegExp | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/permissions/repositories", "put">;
        setWorkflowAccessToRepository: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            access_level?: RegExp | "enterprise" | "organization" | "none" | "user" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/permissions/access", "put">;
        updateEnvironmentVariable: (params?: {
            repository_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            value?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories/{repository_id}/environments/{environment_name}/variables/{name}", "patch">;
        updateOrgVariable: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            value?: string | RegExp | undefined;
            visibility?: RegExp | "all" | "private" | "selected" | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/variables/{name}", "patch">;
        updateRepoVariable: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            value?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/actions/variables/{name}", "patch">;
        updateRequiredWorkflow: (params?: {
            org?: string | RegExp | undefined;
            required_workflow_id?: number | RegExp | undefined;
            workflow_file_path?: string | RegExp | undefined;
            repository_id?: string | RegExp | undefined;
            scope?: RegExp | "all" | "selected" | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/actions/required_workflows/{required_workflow_id}", "patch">;
    };
    activity: {
        checkRepoIsStarredByAuthenticatedUser: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/starred/{owner}/{repo}", "get">;
        deleteRepoSubscription: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/subscription", "delete">;
        deleteThreadSubscription: (params?: {
            thread_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/notifications/threads/{thread_id}/subscription", "delete">;
        getFeeds: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/feeds", "get">;
        getRepoSubscription: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/subscription", "get">;
        getThread: (params?: {
            thread_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/notifications/threads/{thread_id}", "get">;
        getThreadSubscriptionForAuthenticatedUser: (params?: {
            thread_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/notifications/threads/{thread_id}/subscription", "get">;
        listEventsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/events", "get">;
        listNotificationsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/notifications", "get">;
        listOrgEventsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/events/orgs/{org}", "get">;
        listPublicEvents: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/events", "get">;
        listPublicEventsForRepoNetwork: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/networks/{owner}/{repo}/events", "get">;
        listPublicEventsForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/events/public", "get">;
        listPublicOrgEvents: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/events", "get">;
        listReceivedEventsForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/received_events", "get">;
        listReceivedPublicEventsForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/received_events/public", "get">;
        listRepoEvents: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/events", "get">;
        listRepoNotificationsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/notifications", "get">;
        listReposStarredByAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/starred", "get">;
        listReposStarredByUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/starred", "get">;
        listReposWatchedByUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/subscriptions", "get">;
        listStargazersForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/stargazers", "get">;
        listWatchedReposForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/subscriptions", "get">;
        listWatchersForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/subscribers", "get">;
        markNotificationsAsRead: (params?: {
            last_read_at?: string | RegExp | undefined;
            read?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/notifications", "put">;
        markRepoNotificationsAsRead: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            last_read_at?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/notifications", "put">;
        markThreadAsRead: (params?: {
            thread_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/notifications/threads/{thread_id}", "patch">;
        setRepoSubscription: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            subscribed?: boolean | RegExp | undefined;
            ignored?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/subscription", "put">;
        setThreadSubscription: (params?: {
            thread_id?: number | RegExp | undefined;
            ignored?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/notifications/threads/{thread_id}/subscription", "put">;
        starRepoForAuthenticatedUser: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/starred/{owner}/{repo}", "put">;
        unstarRepoForAuthenticatedUser: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/starred/{owner}/{repo}", "delete">;
    };
    apps: {
        addRepoToInstallation: (params?: {
            installation_id?: number | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/installations/{installation_id}/repositories/{repository_id}", "put">;
        addRepoToInstallationForAuthenticatedUser: (params?: {
            installation_id?: number | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/installations/{installation_id}/repositories/{repository_id}", "put">;
        checkToken: (params?: {
            client_id?: string | RegExp | undefined;
            access_token?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/applications/{client_id}/token", "post">;
        createFromManifest: (params?: {
            code?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app-manifests/{code}/conversions", "post">;
        createInstallationAccessToken: (params?: {
            installation_id?: number | RegExp | undefined;
            repositories?: RegExp | string[] | undefined;
            repository_ids?: RegExp | number[] | undefined;
            permissions?: RegExp | {
                actions?: "read" | "write" | undefined;
                administration?: "read" | "write" | undefined;
                checks?: "read" | "write" | undefined;
                contents?: "read" | "write" | undefined;
                deployments?: "read" | "write" | undefined;
                environments?: "read" | "write" | undefined;
                issues?: "read" | "write" | undefined;
                metadata?: "read" | "write" | undefined;
                packages?: "read" | "write" | undefined;
                pages?: "read" | "write" | undefined;
                pull_requests?: "read" | "write" | undefined;
                repository_hooks?: "read" | "write" | undefined;
                repository_projects?: "read" | "write" | "admin" | undefined;
                secret_scanning_alerts?: "read" | "write" | undefined;
                secrets?: "read" | "write" | undefined;
                security_events?: "read" | "write" | undefined;
                single_file?: "read" | "write" | undefined;
                statuses?: "read" | "write" | undefined;
                vulnerability_alerts?: "read" | "write" | undefined;
                workflows?: "write" | undefined;
                members?: "read" | "write" | undefined;
                organization_administration?: "read" | "write" | undefined;
                organization_custom_roles?: "read" | "write" | undefined;
                organization_announcement_banners?: "read" | "write" | undefined;
                organization_hooks?: "read" | "write" | undefined;
                organization_personal_access_tokens?: "read" | "write" | undefined;
                organization_personal_access_token_requests?: "read" | "write" | undefined;
                organization_plan?: "read" | undefined;
                organization_projects?: "read" | "write" | "admin" | undefined;
                organization_packages?: "read" | "write" | undefined;
                organization_secrets?: "read" | "write" | undefined;
                organization_self_hosted_runners?: "read" | "write" | undefined;
                organization_user_blocking?: "read" | "write" | undefined;
                team_discussions?: "read" | "write" | undefined;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/installations/{installation_id}/access_tokens", "post">;
        deleteAuthorization: (params?: {
            client_id?: string | RegExp | undefined;
            access_token?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/applications/{client_id}/grant", "delete">;
        deleteInstallation: (params?: {
            installation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/installations/{installation_id}", "delete">;
        deleteToken: (params?: {
            client_id?: string | RegExp | undefined;
            access_token?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/applications/{client_id}/token", "delete">;
        getAuthenticated: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app", "get">;
        getBySlug: (params?: {
            app_slug?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/apps/{app_slug}", "get">;
        getInstallation: (params?: {
            installation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/installations/{installation_id}", "get">;
        getOrgInstallation: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/installation", "get">;
        getRepoInstallation: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/installation", "get">;
        getSubscriptionPlanForAccount: (params?: {
            account_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/marketplace_listing/accounts/{account_id}", "get">;
        getSubscriptionPlanForAccountStubbed: (params?: {
            account_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/marketplace_listing/stubbed/accounts/{account_id}", "get">;
        getUserInstallation: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/installation", "get">;
        getWebhookConfigForApp: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/hook/config", "get">;
        getWebhookDelivery: (params?: {
            delivery_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/hook/deliveries/{delivery_id}", "get">;
        listAccountsForPlan: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/marketplace_listing/plans/{plan_id}/accounts", "get">;
        listAccountsForPlanStubbed: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/marketplace_listing/stubbed/plans/{plan_id}/accounts", "get">;
        listInstallationReposForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/installations/{installation_id}/repositories", "get">;
        listInstallationRequestsForAuthenticatedApp: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/installation-requests", "get">;
        listInstallations: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/installations", "get">;
        listInstallationsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/installations", "get">;
        listPlans: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/marketplace_listing/plans", "get">;
        listPlansStubbed: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/marketplace_listing/stubbed/plans", "get">;
        listReposAccessibleToInstallation: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/installation/repositories", "get">;
        listSubscriptionsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/marketplace_purchases", "get">;
        listSubscriptionsForAuthenticatedUserStubbed: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/marketplace_purchases/stubbed", "get">;
        listWebhookDeliveries: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/hook/deliveries", "get">;
        redeliverWebhookDelivery: (params?: {
            delivery_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/hook/deliveries/{delivery_id}/attempts", "post">;
        removeRepoFromInstallation: (params?: {
            installation_id?: number | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/installations/{installation_id}/repositories/{repository_id}", "delete">;
        removeRepoFromInstallationForAuthenticatedUser: (params?: {
            installation_id?: number | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/installations/{installation_id}/repositories/{repository_id}", "delete">;
        resetToken: (params?: {
            client_id?: string | RegExp | undefined;
            access_token?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/applications/{client_id}/token", "patch">;
        revokeInstallationAccessToken: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/installation/token", "delete">;
        scopeToken: (params?: {
            client_id?: string | RegExp | undefined;
            access_token?: string | RegExp | undefined;
            target?: string | RegExp | undefined;
            target_id?: number | RegExp | undefined;
            repositories?: RegExp | string[] | undefined;
            repository_ids?: RegExp | number[] | undefined;
            permissions?: RegExp | {
                actions?: "read" | "write" | undefined;
                administration?: "read" | "write" | undefined;
                checks?: "read" | "write" | undefined;
                contents?: "read" | "write" | undefined;
                deployments?: "read" | "write" | undefined;
                environments?: "read" | "write" | undefined;
                issues?: "read" | "write" | undefined;
                metadata?: "read" | "write" | undefined;
                packages?: "read" | "write" | undefined;
                pages?: "read" | "write" | undefined;
                pull_requests?: "read" | "write" | undefined;
                repository_hooks?: "read" | "write" | undefined;
                repository_projects?: "read" | "write" | "admin" | undefined;
                secret_scanning_alerts?: "read" | "write" | undefined;
                secrets?: "read" | "write" | undefined;
                security_events?: "read" | "write" | undefined;
                single_file?: "read" | "write" | undefined;
                statuses?: "read" | "write" | undefined;
                vulnerability_alerts?: "read" | "write" | undefined;
                workflows?: "write" | undefined;
                members?: "read" | "write" | undefined;
                organization_administration?: "read" | "write" | undefined;
                organization_custom_roles?: "read" | "write" | undefined;
                organization_announcement_banners?: "read" | "write" | undefined;
                organization_hooks?: "read" | "write" | undefined;
                organization_personal_access_tokens?: "read" | "write" | undefined;
                organization_personal_access_token_requests?: "read" | "write" | undefined;
                organization_plan?: "read" | undefined;
                organization_projects?: "read" | "write" | "admin" | undefined;
                organization_packages?: "read" | "write" | undefined;
                organization_secrets?: "read" | "write" | undefined;
                organization_self_hosted_runners?: "read" | "write" | undefined;
                organization_user_blocking?: "read" | "write" | undefined;
                team_discussions?: "read" | "write" | undefined;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/applications/{client_id}/token/scoped", "post">;
        suspendInstallation: (params?: {
            installation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/installations/{installation_id}/suspended", "put">;
        unsuspendInstallation: (params?: {
            installation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/installations/{installation_id}/suspended", "delete">;
        updateWebhookConfigForApp: (params?: {
            url?: string | RegExp | undefined;
            content_type?: string | RegExp | undefined;
            secret?: string | RegExp | undefined;
            insecure_ssl?: string | number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/app/hook/config", "patch">;
    };
    billing: {
        getGithubActionsBillingOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/settings/billing/actions", "get">;
        getGithubActionsBillingUser: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/settings/billing/actions", "get">;
        getGithubPackagesBillingOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/settings/billing/packages", "get">;
        getGithubPackagesBillingUser: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/settings/billing/packages", "get">;
        getSharedStorageBillingOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/settings/billing/shared-storage", "get">;
        getSharedStorageBillingUser: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/settings/billing/shared-storage", "get">;
    };
    checks: {
        create: (params?: ({
            [x: string]: unknown;
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            status?: RegExp | "queued" | "in_progress" | undefined;
        } | {
            [x: string]: unknown;
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            status?: RegExp | "completed" | undefined;
        }) | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-runs", "post">;
        createSuite: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            head_sha?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-suites", "post">;
        get: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            check_run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-runs/{check_run_id}", "get">;
        getSuite: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            check_suite_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-suites/{check_suite_id}", "get">;
        listAnnotations: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", "get">;
        listForRef: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{ref}/check-runs", "get">;
        listForSuite: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", "get">;
        listSuitesForRef: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{ref}/check-suites", "get">;
        rerequestRun: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            check_run_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest", "post">;
        rerequestSuite: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            check_suite_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest", "post">;
        setSuitesPreferences: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            auto_trigger_checks?: RegExp | {
                app_id: number;
                setting: boolean;
            }[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-suites/preferences", "patch">;
        update: (params?: ({
            [x: string]: unknown;
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            check_run_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            details_url?: string | RegExp | undefined;
            external_id?: string | RegExp | undefined;
            started_at?: string | RegExp | undefined;
            status?: RegExp | "completed" | undefined;
            conclusion?: RegExp | "success" | "failure" | "action_required" | "cancelled" | "neutral" | "skipped" | "stale" | "timed_out" | undefined;
            completed_at?: string | RegExp | undefined;
            output?: RegExp | {
                title?: string | undefined;
                summary: string;
                text?: string | undefined;
                annotations?: {
                    path: string;
                    start_line: number;
                    end_line: number;
                    start_column?: number | undefined;
                    end_column?: number | undefined;
                    annotation_level: "failure" | "notice" | "warning";
                    message: string;
                    title?: string | undefined;
                    raw_details?: string | undefined;
                }[] | undefined;
                images?: {
                    alt: string;
                    image_url: string;
                    caption?: string | undefined;
                }[] | undefined;
            } | undefined;
            actions?: RegExp | {
                label: string;
                description: string;
                identifier: string;
            }[] | undefined;
        } | {
            [x: string]: unknown;
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            check_run_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            details_url?: string | RegExp | undefined;
            external_id?: string | RegExp | undefined;
            started_at?: string | RegExp | undefined;
            status?: RegExp | "queued" | "in_progress" | undefined;
            conclusion?: RegExp | "success" | "failure" | "action_required" | "cancelled" | "neutral" | "skipped" | "stale" | "timed_out" | undefined;
            completed_at?: string | RegExp | undefined;
            output?: RegExp | {
                title?: string | undefined;
                summary: string;
                text?: string | undefined;
                annotations?: {
                    path: string;
                    start_line: number;
                    end_line: number;
                    start_column?: number | undefined;
                    end_column?: number | undefined;
                    annotation_level: "failure" | "notice" | "warning";
                    message: string;
                    title?: string | undefined;
                    raw_details?: string | undefined;
                }[] | undefined;
                images?: {
                    alt: string;
                    image_url: string;
                    caption?: string | undefined;
                }[] | undefined;
            } | undefined;
            actions?: RegExp | {
                label: string;
                description: string;
                identifier: string;
            }[] | undefined;
        }) | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/check-runs/{check_run_id}", "patch">;
    };
    codeScanning: {
        deleteAnalysis: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}", "delete">;
        getAlert: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            alert_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", "get">;
        getAnalysis: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            analysis_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}", "get">;
        getCodeqlDatabase: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            language?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}", "get">;
        getDefaultSetup: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/default-setup", "get">;
        getSarif: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            sarif_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}", "get">;
        listAlertInstances: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", "get">;
        listAlertsForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/code-scanning/alerts", "get">;
        listAlertsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/alerts", "get">;
        listAlertsInstances: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", "get">;
        listCodeqlDatabases: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/codeql/databases", "get">;
        listRecentAnalyses: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/analyses", "get">;
        updateAlert: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            alert_number?: number | RegExp | undefined;
            state?: RegExp | "open" | "dismissed" | undefined;
            dismissed_reason?: "" | RegExp | "false positive" | "won't fix" | "used in tests" | null | undefined;
            dismissed_comment?: string | RegExp | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", "patch">;
        updateDefaultSetup: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            state?: RegExp | "configured" | "not-configured" | undefined;
            query_suite?: RegExp | "default" | "extended" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/default-setup", "patch">;
        uploadSarif: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            commit_sha?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
            sarif?: string | RegExp | undefined;
            checkout_uri?: string | RegExp | undefined;
            started_at?: string | RegExp | undefined;
            tool_name?: string | RegExp | undefined;
            validate?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/code-scanning/sarifs", "post">;
    };
    codesOfConduct: {
        getAllCodesOfConduct: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/codes_of_conduct", "get">;
        getConductCode: (params?: {
            key?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/codes_of_conduct/{key}", "get">;
    };
    codespaces: {
        addRepositoryForSecretForAuthenticatedUser: (params?: {
            secret_name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets/{secret_name}/repositories/{repository_id}", "put">;
        addSelectedRepoToOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}", "put">;
        codespaceMachinesForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}/machines", "get">;
        createForAuthenticatedUser: (params?: ({
            repository_id?: RegExp | undefined;
            ref?: RegExp | undefined;
            client_ip?: RegExp | undefined;
            multi_repo_permissions_opt_out?: RegExp | undefined;
            display_name?: RegExp | undefined;
            retention_period_minutes?: RegExp | undefined;
            pull_request?: RegExp | {
                pull_request_number: number;
                repository_id: number;
            } | undefined;
            location?: string | RegExp | undefined;
            geo?: RegExp | "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest" | undefined;
            machine?: string | RegExp | undefined;
            devcontainer_path?: string | RegExp | undefined;
            working_directory?: string | RegExp | undefined;
            idle_timeout_minutes?: number | RegExp | undefined;
        } | {
            pull_request?: RegExp | undefined;
            repository_id?: number | RegExp | undefined;
            ref?: string | RegExp | undefined;
            location?: string | RegExp | undefined;
            geo?: RegExp | "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest" | undefined;
            client_ip?: string | RegExp | undefined;
            machine?: string | RegExp | undefined;
            devcontainer_path?: string | RegExp | undefined;
            multi_repo_permissions_opt_out?: boolean | RegExp | undefined;
            working_directory?: string | RegExp | undefined;
            idle_timeout_minutes?: number | RegExp | undefined;
            display_name?: string | RegExp | undefined;
            retention_period_minutes?: number | RegExp | undefined;
        }) | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces", "post">;
        createOrUpdateOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            encrypted_value?: string | RegExp | undefined;
            key_id?: string | RegExp | undefined;
            visibility?: RegExp | "all" | "private" | "selected" | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets/{secret_name}", "put">;
        createOrUpdateRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            encrypted_value?: string | RegExp | undefined;
            key_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces/secrets/{secret_name}", "put">;
        createOrUpdateSecretForAuthenticatedUser: (params?: {
            secret_name?: string | RegExp | undefined;
            encrypted_value?: string | RegExp | undefined;
            key_id?: string | RegExp | undefined;
            selected_repository_ids?: RegExp | (string | number)[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets/{secret_name}", "put">;
        createWithPrForAuthenticatedUser: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            location?: string | RegExp | undefined;
            geo?: RegExp | "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest" | undefined;
            client_ip?: string | RegExp | undefined;
            machine?: string | RegExp | undefined;
            devcontainer_path?: string | RegExp | undefined;
            multi_repo_permissions_opt_out?: boolean | RegExp | undefined;
            working_directory?: string | RegExp | undefined;
            idle_timeout_minutes?: number | RegExp | undefined;
            display_name?: string | RegExp | undefined;
            retention_period_minutes?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", "post">;
        createWithRepoForAuthenticatedUser: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
            location?: string | RegExp | undefined;
            geo?: RegExp | "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest" | undefined;
            client_ip?: string | RegExp | undefined;
            machine?: string | RegExp | undefined;
            devcontainer_path?: string | RegExp | undefined;
            multi_repo_permissions_opt_out?: boolean | RegExp | undefined;
            working_directory?: string | RegExp | undefined;
            idle_timeout_minutes?: number | RegExp | undefined;
            display_name?: string | RegExp | undefined;
            retention_period_minutes?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces", "post">;
        deleteCodespacesBillingUsers: (params?: {
            org?: string | RegExp | undefined;
            selected_usernames?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/billing/selected_users", "delete">;
        deleteForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}", "delete">;
        deleteFromOrganization: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
            codespace_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/members/{username}/codespaces/{codespace_name}", "delete">;
        deleteOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets/{secret_name}", "delete">;
        deleteRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces/secrets/{secret_name}", "delete">;
        deleteSecretForAuthenticatedUser: (params?: {
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets/{secret_name}", "delete">;
        exportForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}/exports", "post">;
        getCodespacesForUserInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/members/{username}/codespaces", "get">;
        getExportDetailsForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
            export_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}/exports/{export_id}", "get">;
        getForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}", "get">;
        getOrgPublicKey: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets/public-key", "get">;
        getOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets/{secret_name}", "get">;
        getPublicKeyForAuthenticatedUser: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets/public-key", "get">;
        getRepoPublicKey: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces/secrets/public-key", "get">;
        getRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces/secrets/{secret_name}", "get">;
        getSecretForAuthenticatedUser: (params?: {
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets/{secret_name}", "get">;
        listDevcontainersInRepositoryForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces/devcontainers", "get">;
        listForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces", "get">;
        listInOrganization: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces", "get">;
        listInRepositoryForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces", "get">;
        listOrgSecrets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets", "get">;
        listRepoSecrets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces/secrets", "get">;
        listRepositoriesForSecretForAuthenticatedUser: (params?: {
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets/{secret_name}/repositories", "get">;
        listSecretsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets", "get">;
        listSelectedReposForOrgSecret: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets/{secret_name}/repositories", "get">;
        preFlightWithRepoForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces/new", "get">;
        publishForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            private?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}/publish", "post">;
        removeRepositoryForSecretForAuthenticatedUser: (params?: {
            secret_name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets/{secret_name}/repositories/{repository_id}", "delete">;
        removeSelectedRepoFromOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}", "delete">;
        repoMachinesForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codespaces/machines", "get">;
        setCodespacesBilling: (params?: {
            org?: string | RegExp | undefined;
            visibility?: RegExp | "disabled" | "selected_members" | "all_members" | "all_members_and_outside_collaborators" | undefined;
            selected_usernames?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/billing", "put">;
        setCodespacesBillingUsers: (params?: {
            org?: string | RegExp | undefined;
            selected_usernames?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/billing/selected_users", "post">;
        setRepositoriesForSecretForAuthenticatedUser: (params?: {
            secret_name?: string | RegExp | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/secrets/{secret_name}/repositories", "put">;
        setSelectedReposForOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/codespaces/secrets/{secret_name}/repositories", "put">;
        startForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}/start", "post">;
        stopForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}/stop", "post">;
        stopInOrganization: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
            codespace_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop", "post">;
        updateForAuthenticatedUser: (params?: {
            codespace_name?: string | RegExp | undefined;
            machine?: string | RegExp | undefined;
            display_name?: string | RegExp | undefined;
            recent_folders?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/codespaces/{codespace_name}", "patch">;
    };
    dependabot: {
        addSelectedRepoToOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}", "put">;
        createOrUpdateOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            encrypted_value?: string | RegExp | undefined;
            key_id?: string | RegExp | undefined;
            visibility?: RegExp | "all" | "private" | "selected" | undefined;
            selected_repository_ids?: RegExp | (string | number)[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets/{secret_name}", "put">;
        createOrUpdateRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            encrypted_value?: string | RegExp | undefined;
            key_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependabot/secrets/{secret_name}", "put">;
        deleteOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets/{secret_name}", "delete">;
        deleteRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependabot/secrets/{secret_name}", "delete">;
        getAlert: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            alert_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependabot/alerts/{alert_number}", "get">;
        getOrgPublicKey: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets/public-key", "get">;
        getOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets/{secret_name}", "get">;
        getRepoPublicKey: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependabot/secrets/public-key", "get">;
        getRepoSecret: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependabot/secrets/{secret_name}", "get">;
        listAlertsForEnterprise: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/enterprises/{enterprise}/dependabot/alerts", "get">;
        listAlertsForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/alerts", "get">;
        listAlertsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependabot/alerts", "get">;
        listOrgSecrets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets", "get">;
        listRepoSecrets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependabot/secrets", "get">;
        listSelectedReposForOrgSecret: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets/{secret_name}/repositories", "get">;
        removeSelectedRepoFromOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            repository_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}", "delete">;
        setSelectedReposForOrgSecret: (params?: {
            org?: string | RegExp | undefined;
            secret_name?: string | RegExp | undefined;
            selected_repository_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/dependabot/secrets/{secret_name}/repositories", "put">;
        updateAlert: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            alert_number?: number | RegExp | undefined;
            state?: RegExp | "open" | "dismissed" | undefined;
            dismissed_reason?: RegExp | "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk" | undefined;
            dismissed_comment?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependabot/alerts/{alert_number}", "patch">;
    };
    dependencyGraph: {
        createRepositorySnapshot: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            version?: number | RegExp | undefined;
            job?: RegExp | {
                id: string;
                correlator: string;
                html_url?: string | undefined;
            } | undefined;
            sha?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
            detector?: RegExp | {
                name: string;
                version: string;
                url: string;
            } | undefined;
            metadata?: RegExp | {
                [key: string]: string | number | boolean | null | undefined;
            } | undefined;
            manifests?: RegExp | {
                [key: string]: {
                    name: string;
                    file?: {
                        source_location?: string | undefined;
                    } | undefined;
                    metadata?: {
                        [key: string]: string | number | boolean | null | undefined;
                    } | undefined;
                    resolved?: {
                        [key: string]: {
                            package_url?: string | undefined;
                            metadata?: {
                                [key: string]: string | number | boolean | null | undefined;
                            } | undefined;
                            relationship?: "direct" | "indirect" | undefined;
                            scope?: "runtime" | "development" | undefined;
                            dependencies?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            scanned?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependency-graph/snapshots", "post">;
        diffRange: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependency-graph/compare/{basehead}", "get">;
        exportSbom: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dependency-graph/sbom", "get">;
    };
    emojis: {
        get: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/emojis", "get">;
    };
    gists: {
        checkIsStarred: (params?: {
            gist_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/star", "get">;
        create: (params?: {
            description?: string | RegExp | undefined;
            files?: RegExp | {
                [key: string]: {
                    content: string;
                } | undefined;
            } | undefined;
            public?: boolean | RegExp | "true" | "false" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists", "post">;
        createComment: (params?: {
            gist_id?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/comments", "post">;
        delete: (params?: {
            gist_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}", "delete">;
        deleteComment: (params?: {
            gist_id?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/comments/{comment_id}", "delete">;
        fork: (params?: {
            gist_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/forks", "post">;
        get: (params?: {
            gist_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}", "get">;
        getComment: (params?: {
            gist_id?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/comments/{comment_id}", "get">;
        getRevision: (params?: {
            gist_id?: string | RegExp | undefined;
            sha?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/{sha}", "get">;
        list: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists", "get">;
        listComments: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/comments", "get">;
        listCommits: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/commits", "get">;
        listForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/gists", "get">;
        listForks: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/forks", "get">;
        listPublic: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/public", "get">;
        listStarred: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/starred", "get">;
        star: (params?: {
            gist_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/star", "put">;
        unstar: (params?: {
            gist_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/star", "delete">;
        update: (params?: {
            gist_id?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            files?: RegExp | {
                [key: string]: {
                    content?: string | undefined;
                    filename?: string | null | undefined;
                } | undefined;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}", "patch">;
        updateComment: (params?: {
            gist_id?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gists/{gist_id}/comments/{comment_id}", "patch">;
    };
    git: {
        createBlob: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            content?: string | RegExp | undefined;
            encoding?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/blobs", "post">;
        createCommit: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            message?: string | RegExp | undefined;
            tree?: string | RegExp | undefined;
            parents?: RegExp | string[] | undefined;
            author?: RegExp | {
                name: string;
                email: string;
                date?: string | undefined;
            } | undefined;
            committer?: RegExp | {
                name?: string | undefined;
                email?: string | undefined;
                date?: string | undefined;
            } | undefined;
            signature?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/commits", "post">;
        createRef: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
            sha?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/refs", "post">;
        createTag: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            tag?: string | RegExp | undefined;
            message?: string | RegExp | undefined;
            object?: string | RegExp | undefined;
            type?: RegExp | "tree" | "commit" | "blob" | undefined;
            tagger?: RegExp | {
                name: string;
                email: string;
                date?: string | undefined;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/tags", "post">;
        createTree: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            tree?: RegExp | {
                path?: string | undefined;
                mode?: "100644" | "100755" | "040000" | "160000" | "120000" | undefined;
                type?: "tree" | "commit" | "blob" | undefined;
                sha?: string | null | undefined;
                content?: string | undefined;
            }[] | undefined;
            base_tree?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/trees", "post">;
        deleteRef: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/refs/{ref}", "delete">;
        getBlob: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            file_sha?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/blobs/{file_sha}", "get">;
        getCommit: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            commit_sha?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/commits/{commit_sha}", "get">;
        getRef: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/ref/{ref}", "get">;
        getTag: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            tag_sha?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/tags/{tag_sha}", "get">;
        getTree: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/trees/{tree_sha}", "get">;
        listMatchingRefs: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/matching-refs/{ref}", "get">;
        updateRef: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
            sha?: string | RegExp | undefined;
            force?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/git/refs/{ref}", "patch">;
    };
    gitignore: {
        getAllTemplates: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gitignore/templates", "get">;
        getTemplate: (params?: {
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/gitignore/templates/{name}", "get">;
    };
    interactions: {
        getRestrictionsForAuthenticatedUser: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/interaction-limits", "get">;
        getRestrictionsForOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/interaction-limits", "get">;
        getRestrictionsForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/interaction-limits", "get">;
        getRestrictionsForYourPublicRepos: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/interaction-limits", "get">;
        removeRestrictionsForAuthenticatedUser: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/interaction-limits", "delete">;
        removeRestrictionsForOrg: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/interaction-limits", "delete">;
        removeRestrictionsForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/interaction-limits", "delete">;
        removeRestrictionsForYourPublicRepos: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/interaction-limits", "delete">;
        setRestrictionsForAuthenticatedUser: (params?: {
            limit?: RegExp | "existing_users" | "contributors_only" | "collaborators_only" | undefined;
            expiry?: RegExp | "one_day" | "three_days" | "one_week" | "one_month" | "six_months" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/interaction-limits", "put">;
        setRestrictionsForOrg: (params?: {
            org?: string | RegExp | undefined;
            limit?: RegExp | "existing_users" | "contributors_only" | "collaborators_only" | undefined;
            expiry?: RegExp | "one_day" | "three_days" | "one_week" | "one_month" | "six_months" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/interaction-limits", "put">;
        setRestrictionsForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            limit?: RegExp | "existing_users" | "contributors_only" | "collaborators_only" | undefined;
            expiry?: RegExp | "one_day" | "three_days" | "one_week" | "one_month" | "six_months" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/interaction-limits", "put">;
        setRestrictionsForYourPublicRepos: (params?: {
            limit?: RegExp | "existing_users" | "contributors_only" | "collaborators_only" | undefined;
            expiry?: RegExp | "one_day" | "three_days" | "one_week" | "one_month" | "six_months" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/interaction-limits", "put">;
    };
    issues: {
        addAssignees: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            assignees?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/assignees", "post">;
        addLabels: (params?: ({
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            labels?: RegExp | {
                name: string;
            }[] | undefined;
        } | {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
        }) | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/labels", "post">;
        checkUserCanBeAssigned: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            assignee?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/assignees/{assignee}", "get">;
        checkUserCanBeAssignedToIssue: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            assignee?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}", "get">;
        create: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            title?: string | number | RegExp | undefined;
            body?: string | RegExp | undefined;
            assignee?: string | RegExp | null | undefined;
            milestone?: string | number | RegExp | undefined;
            labels?: RegExp | (string | {
                id?: number | undefined;
                name?: string | undefined;
                description?: string | null | undefined;
                color?: string | null | undefined;
            })[] | undefined;
            assignees?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues", "post">;
        createComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/comments", "post">;
        createLabel: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            color?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/labels", "post">;
        createMilestone: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            title?: string | RegExp | undefined;
            state?: RegExp | "closed" | "open" | undefined;
            description?: string | RegExp | undefined;
            due_on?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/milestones", "post">;
        deleteComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/comments/{comment_id}", "delete">;
        deleteLabel: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/labels/{name}", "delete">;
        deleteMilestone: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            milestone_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/milestones/{milestone_number}", "delete">;
        get: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}", "get">;
        getComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/comments/{comment_id}", "get">;
        getEvent: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            event_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/events/{event_id}", "get">;
        getLabel: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/labels/{name}", "get">;
        getMilestone: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            milestone_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/milestones/{milestone_number}", "get">;
        list: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/issues", "get">;
        listAssignees: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/assignees", "get">;
        listComments: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/comments", "get">;
        listCommentsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/comments", "get">;
        listEvents: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/events", "get">;
        listEventsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/events", "get">;
        listEventsForTimeline: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/timeline", "get">;
        listForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/issues", "get">;
        listForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/issues", "get">;
        listForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues", "get">;
        listLabelsForMilestone: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/milestones/{milestone_number}/labels", "get">;
        listLabelsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/labels", "get">;
        listLabelsOnIssue: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/labels", "get">;
        listMilestones: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/milestones", "get">;
        lock: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            lock_reason?: RegExp | "off-topic" | "too heated" | "resolved" | "spam" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/lock", "put">;
        removeAllLabels: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/labels", "delete">;
        removeAssignees: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            assignees?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/assignees", "delete">;
        removeLabel: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}", "delete">;
        setLabels: (params?: ({
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            labels?: RegExp | {
                name: string;
            }[] | undefined;
        } | {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            labels?: RegExp | string[] | undefined;
        }) | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/labels", "put">;
        unlock: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/lock", "delete">;
        update: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            title?: string | number | RegExp | undefined;
            body?: string | RegExp | null | undefined;
            assignee?: string | RegExp | null | undefined;
            state?: RegExp | "closed" | "open" | undefined;
            state_reason?: RegExp | "completed" | "not_planned" | "reopened" | null | undefined;
            milestone?: string | number | RegExp | undefined;
            labels?: RegExp | (string | {
                id?: number | undefined;
                name?: string | undefined;
                description?: string | null | undefined;
                color?: string | null | undefined;
            })[] | undefined;
            assignees?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}", "patch">;
        updateComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/comments/{comment_id}", "patch">;
        updateLabel: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            new_name?: string | RegExp | undefined;
            color?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/labels/{name}", "patch">;
        updateMilestone: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            milestone_number?: number | RegExp | undefined;
            title?: string | RegExp | undefined;
            state?: RegExp | "closed" | "open" | undefined;
            description?: string | RegExp | undefined;
            due_on?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/milestones/{milestone_number}", "patch">;
    };
    licenses: {
        get: (params?: {
            license?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/licenses/{license}", "get">;
        getAllCommonlyUsed: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/licenses", "get">;
        getForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/license", "get">;
    };
    markdown: {
        render: (params?: {
            text?: string | RegExp | undefined;
            mode?: RegExp | "markdown" | "gfm" | undefined;
            context?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/markdown", "post">;
        renderRaw: (params?: {
            data?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/markdown/raw", "post">;
    };
    meta: {
        get: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/meta", "get">;
        getAllVersions: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/versions", "get">;
        getOctocat: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/octocat", "get">;
        getZen: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/zen", "get">;
        root: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/", "get">;
    };
    migrations: {
        cancelImport: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/import", "delete">;
        deleteArchiveForAuthenticatedUser: (params?: {
            migration_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/migrations/{migration_id}/archive", "delete">;
        deleteArchiveForOrg: (params?: {
            org?: string | RegExp | undefined;
            migration_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/migrations/{migration_id}/archive", "delete">;
        downloadArchiveForOrg: (params?: {
            org?: string | RegExp | undefined;
            migration_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/migrations/{migration_id}/archive", "get">;
        getArchiveForAuthenticatedUser: (params?: {
            migration_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/migrations/{migration_id}/archive", "get">;
        getCommitAuthors: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/import/authors", "get">;
        getImportStatus: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/import", "get">;
        getLargeFiles: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/import/large_files", "get">;
        getStatusForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/migrations/{migration_id}", "get">;
        getStatusForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/migrations/{migration_id}", "get">;
        listForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/migrations", "get">;
        listForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/migrations", "get">;
        listReposForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/migrations/{migration_id}/repositories", "get">;
        listReposForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/migrations/{migration_id}/repositories", "get">;
        listReposForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/migrations/{migration_id}/repositories", "get">;
        mapCommitAuthor: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            author_id?: number | RegExp | undefined;
            email?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/import/authors/{author_id}", "patch">;
        setLfsPreference: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            use_lfs?: RegExp | "opt_in" | "opt_out" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/import/lfs", "patch">;
        startForAuthenticatedUser: (params?: {
            lock_repositories?: boolean | RegExp | undefined;
            exclude_metadata?: boolean | RegExp | undefined;
            exclude_git_data?: boolean | RegExp | undefined;
            exclude_attachments?: boolean | RegExp | undefined;
            exclude_releases?: boolean | RegExp | undefined;
            exclude_owner_projects?: boolean | RegExp | undefined;
            org_metadata_only?: boolean | RegExp | undefined;
            exclude?: RegExp | "repositories"[] | undefined;
            repositories?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/migrations", "post">;
        startForOrg: (params?: {
            org?: string | RegExp | undefined;
            repositories?: RegExp | string[] | undefined;
            lock_repositories?: boolean | RegExp | undefined;
            exclude_metadata?: boolean | RegExp | undefined;
            exclude_git_data?: boolean | RegExp | undefined;
            exclude_attachments?: boolean | RegExp | undefined;
            exclude_releases?: boolean | RegExp | undefined;
            exclude_owner_projects?: boolean | RegExp | undefined;
            org_metadata_only?: boolean | RegExp | undefined;
            exclude?: RegExp | "repositories"[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/migrations", "post">;
        startImport: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            vcs_url?: string | RegExp | undefined;
            vcs?: RegExp | "git" | "subversion" | "mercurial" | "tfvc" | undefined;
            vcs_username?: string | RegExp | undefined;
            vcs_password?: string | RegExp | undefined;
            tfvc_project?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/import", "put">;
        unlockRepoForAuthenticatedUser: (params?: {
            migration_id?: number | RegExp | undefined;
            repo_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/migrations/{migration_id}/repos/{repo_name}/lock", "delete">;
        unlockRepoForOrg: (params?: {
            org?: string | RegExp | undefined;
            migration_id?: number | RegExp | undefined;
            repo_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock", "delete">;
        updateImport: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            vcs_username?: string | RegExp | undefined;
            vcs_password?: string | RegExp | undefined;
            vcs?: RegExp | "git" | "subversion" | "mercurial" | "tfvc" | undefined;
            tfvc_project?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/import", "patch">;
    };
    orgs: {
        addSecurityManagerTeam: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/security-managers/teams/{team_slug}", "put">;
        blockUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/blocks/{username}", "put">;
        cancelInvitation: (params?: {
            org?: string | RegExp | undefined;
            invitation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/invitations/{invitation_id}", "delete">;
        checkBlockedUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/blocks/{username}", "get">;
        checkMembershipForUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/members/{username}", "get">;
        checkPublicMembershipForUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/public_members/{username}", "get">;
        convertMemberToOutsideCollaborator: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
            async?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/outside_collaborators/{username}", "put">;
        createInvitation: (params?: {
            org?: string | RegExp | undefined;
            invitee_id?: number | RegExp | undefined;
            email?: string | RegExp | undefined;
            role?: RegExp | "admin" | "direct_member" | "billing_manager" | undefined;
            team_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/invitations", "post">;
        createWebhook: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            config?: RegExp | {
                url: string;
                content_type?: string | undefined;
                secret?: string | undefined;
                insecure_ssl?: string | number | undefined;
                username?: string | undefined;
                password?: string | undefined;
            } | undefined;
            events?: RegExp | string[] | undefined;
            active?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks", "post">;
        delete: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}", "delete">;
        deleteWebhook: (params?: {
            org?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}", "delete">;
        enableOrDisableSecurityProductOnAllOrgRepos: (params?: {
            org?: string | RegExp | undefined;
            security_product?: RegExp | "dependency_graph" | "dependabot_alerts" | "dependabot_security_updates" | "advanced_security" | "code_scanning_default_setup" | "secret_scanning" | "secret_scanning_push_protection" | undefined;
            enablement?: RegExp | "enable_all" | "disable_all" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/{security_product}/{enablement}", "post">;
        get: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}", "get">;
        getMembershipForAuthenticatedUser: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/memberships/orgs/{org}", "get">;
        getMembershipForUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/memberships/{username}", "get">;
        getWebhook: (params?: {
            org?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}", "get">;
        getWebhookConfigForOrg: (params?: {
            org?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}/config", "get">;
        getWebhookDelivery: (params?: {
            org?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
            delivery_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}", "get">;
        list: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations", "get">;
        listAppInstallations: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/installations", "get">;
        listBlockedUsers: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/blocks", "get">;
        listFailedInvitations: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/failed_invitations", "get">;
        listForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/orgs", "get">;
        listForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/orgs", "get">;
        listInvitationTeams: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/invitations/{invitation_id}/teams", "get">;
        listMembers: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/members", "get">;
        listMembershipsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/memberships/orgs", "get">;
        listOutsideCollaborators: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/outside_collaborators", "get">;
        listPatGrantRepositories: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations/{org}/personal-access-tokens/{pat_id}/repositories", "get">;
        listPatGrantRequestRepositories: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories", "get">;
        listPatGrantRequests: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations/{org}/personal-access-token-requests", "get">;
        listPatGrants: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations/{org}/personal-access-tokens", "get">;
        listPendingInvitations: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/invitations", "get">;
        listPublicMembers: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/public_members", "get">;
        listSecurityManagerTeams: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/security-managers", "get">;
        listWebhookDeliveries: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}/deliveries", "get">;
        listWebhooks: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks", "get">;
        pingWebhook: (params?: {
            org?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}/pings", "post">;
        redeliverWebhookDelivery: (params?: {
            org?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
            delivery_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", "post">;
        removeMember: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/members/{username}", "delete">;
        removeMembershipForUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/memberships/{username}", "delete">;
        removeOutsideCollaborator: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/outside_collaborators/{username}", "delete">;
        removePublicMembershipForAuthenticatedUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/public_members/{username}", "delete">;
        removeSecurityManagerTeam: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/security-managers/teams/{team_slug}", "delete">;
        reviewPatGrantRequest: (params?: {
            org?: string | RegExp | undefined;
            pat_request_id?: number | RegExp | undefined;
            action?: RegExp | "approve" | "deny" | undefined;
            reason?: string | RegExp | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations/{org}/personal-access-token-requests/{pat_request_id}", "post">;
        reviewPatGrantRequestsInBulk: (params?: {
            org?: string | RegExp | undefined;
            pat_request_ids?: RegExp | number[] | undefined;
            action?: RegExp | "approve" | "deny" | undefined;
            reason?: string | RegExp | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations/{org}/personal-access-token-requests", "post">;
        setMembershipForUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
            role?: RegExp | "admin" | "member" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/memberships/{username}", "put">;
        setPublicMembershipForAuthenticatedUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/public_members/{username}", "put">;
        unblockUser: (params?: {
            org?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/blocks/{username}", "delete">;
        update: (params?: {
            org?: string | RegExp | undefined;
            billing_email?: string | RegExp | undefined;
            company?: string | RegExp | undefined;
            email?: string | RegExp | undefined;
            twitter_username?: string | RegExp | undefined;
            location?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            has_organization_projects?: boolean | RegExp | undefined;
            has_repository_projects?: boolean | RegExp | undefined;
            default_repository_permission?: RegExp | "read" | "write" | "none" | "admin" | undefined;
            members_can_create_repositories?: boolean | RegExp | undefined;
            members_can_create_internal_repositories?: boolean | RegExp | undefined;
            members_can_create_private_repositories?: boolean | RegExp | undefined;
            members_can_create_public_repositories?: boolean | RegExp | undefined;
            members_allowed_repository_creation_type?: RegExp | "all" | "private" | "none" | undefined;
            members_can_create_pages?: boolean | RegExp | undefined;
            members_can_create_public_pages?: boolean | RegExp | undefined;
            members_can_create_private_pages?: boolean | RegExp | undefined;
            members_can_fork_private_repositories?: boolean | RegExp | undefined;
            web_commit_signoff_required?: boolean | RegExp | undefined;
            blog?: string | RegExp | undefined;
            advanced_security_enabled_for_new_repositories?: boolean | RegExp | undefined;
            dependabot_alerts_enabled_for_new_repositories?: boolean | RegExp | undefined;
            dependabot_security_updates_enabled_for_new_repositories?: boolean | RegExp | undefined;
            dependency_graph_enabled_for_new_repositories?: boolean | RegExp | undefined;
            secret_scanning_enabled_for_new_repositories?: boolean | RegExp | undefined;
            secret_scanning_push_protection_enabled_for_new_repositories?: boolean | RegExp | undefined;
            secret_scanning_push_protection_custom_link_enabled?: boolean | RegExp | undefined;
            secret_scanning_push_protection_custom_link?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}", "patch">;
        updateMembershipForAuthenticatedUser: (params?: {
            org?: string | RegExp | undefined;
            state?: RegExp | "active" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/memberships/orgs/{org}", "patch">;
        updatePatAccess: (params?: {
            org?: string | RegExp | undefined;
            pat_id?: number | RegExp | undefined;
            action?: RegExp | "revoke" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations/{org}/personal-access-tokens/{pat_id}", "post">;
        updatePatAccesses: (params?: {
            org?: string | RegExp | undefined;
            action?: RegExp | "revoke" | undefined;
            pat_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/organizations/{org}/personal-access-tokens", "post">;
        updateWebhook: (params?: {
            org?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
            config?: RegExp | {
                url: string;
                content_type?: string | undefined;
                secret?: string | undefined;
                insecure_ssl?: string | number | undefined;
            } | undefined;
            events?: RegExp | string[] | undefined;
            active?: boolean | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}", "patch">;
        updateWebhookConfigForOrg: (params?: {
            org?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
            url?: string | RegExp | undefined;
            content_type?: string | RegExp | undefined;
            secret?: string | RegExp | undefined;
            insecure_ssl?: string | number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/hooks/{hook_id}/config", "patch">;
    };
    packages: {
        deletePackageForAuthenticatedUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages/{package_type}/{package_name}", "delete">;
        deletePackageForOrg: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages/{package_type}/{package_name}", "delete">;
        deletePackageForUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/packages/{package_type}/{package_name}", "delete">;
        deletePackageVersionForAuthenticatedUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages/{package_type}/{package_name}/versions/{package_version_id}", "delete">;
        deletePackageVersionForOrg: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            org?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}", "delete">;
        deletePackageVersionForUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}", "delete">;
        getAllPackageVersionsForAPackageOwnedByAnOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages/{package_type}/{package_name}/versions", "get">;
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages/{package_type}/{package_name}/versions", "get">;
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages/{package_type}/{package_name}/versions", "get">;
        getAllPackageVersionsForPackageOwnedByOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages/{package_type}/{package_name}/versions", "get">;
        getAllPackageVersionsForPackageOwnedByUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/packages/{package_type}/{package_name}/versions", "get">;
        getPackageForAuthenticatedUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages/{package_type}/{package_name}", "get">;
        getPackageForOrganization: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages/{package_type}/{package_name}", "get">;
        getPackageForUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/packages/{package_type}/{package_name}", "get">;
        getPackageVersionForAuthenticatedUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages/{package_type}/{package_name}/versions/{package_version_id}", "get">;
        getPackageVersionForOrganization: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            org?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}", "get">;
        getPackageVersionForUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}", "get">;
        listDockerMigrationConflictingPackagesForAuthenticatedUser: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/docker/conflicts", "get">;
        listDockerMigrationConflictingPackagesForOrganization: (params?: {
            org?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/docker/conflicts", "get">;
        listDockerMigrationConflictingPackagesForUser: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/docker/conflicts", "get">;
        listPackagesForAuthenticatedUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            visibility?: RegExp | "private" | "public" | "internal" | undefined;
            page?: number | RegExp | undefined;
            per_page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages", "get">;
        listPackagesForOrganization: (params?: {
            org?: string | RegExp | undefined;
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            visibility?: RegExp | "private" | "public" | "internal" | undefined;
            page?: number | RegExp | undefined;
            per_page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages", "get">;
        listPackagesForUser: (params?: {
            username?: string | RegExp | undefined;
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            visibility?: RegExp | "private" | "public" | "internal" | undefined;
            page?: number | RegExp | undefined;
            per_page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/packages", "get">;
        restorePackageForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages/{package_type}/{package_name}/restore", "post">;
        restorePackageForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages/{package_type}/{package_name}/restore", "post">;
        restorePackageForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/packages/{package_type}/{package_name}/restore", "post">;
        restorePackageVersionForAuthenticatedUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", "post">;
        restorePackageVersionForOrg: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            org?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", "post">;
        restorePackageVersionForUser: (params?: {
            package_type?: RegExp | "container" | "npm" | "maven" | "rubygems" | "docker" | "nuget" | undefined;
            package_name?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
            package_version_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", "post">;
    };
    projects: {
        addCollaborator: (params?: {
            project_id?: number | RegExp | undefined;
            username?: string | RegExp | undefined;
            permission?: RegExp | "read" | "write" | "admin" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}/collaborators/{username}", "put">;
        createCard: (params?: ({
            column_id?: number | RegExp | undefined;
            note?: RegExp | undefined;
            content_id?: number | RegExp | undefined;
            content_type?: string | RegExp | undefined;
        } | {
            column_id?: number | RegExp | undefined;
            content_type?: RegExp | undefined;
            content_id?: RegExp | undefined;
            note?: string | RegExp | null | undefined;
        }) | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/{column_id}/cards", "post">;
        createColumn: (params?: {
            project_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}/columns", "post">;
        createForAuthenticatedUser: (params?: {
            name?: string | RegExp | undefined;
            body?: string | RegExp | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/projects", "post">;
        createForOrg: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/projects", "post">;
        createForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/projects", "post">;
        delete: (params?: {
            project_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}", "delete">;
        deleteCard: (params?: {
            card_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/cards/{card_id}", "delete">;
        deleteColumn: (params?: {
            column_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/{column_id}", "delete">;
        get: (params?: {
            project_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}", "get">;
        getCard: (params?: {
            card_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/cards/{card_id}", "get">;
        getColumn: (params?: {
            column_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/{column_id}", "get">;
        getPermissionForUser: (params?: {
            project_id?: number | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}/collaborators/{username}/permission", "get">;
        listCards: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/{column_id}/cards", "get">;
        listCollaborators: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}/collaborators", "get">;
        listColumns: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}/columns", "get">;
        listForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/projects", "get">;
        listForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/projects", "get">;
        listForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/projects", "get">;
        moveCard: (params?: {
            card_id?: number | RegExp | undefined;
            position?: string | RegExp | undefined;
            column_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/cards/{card_id}/moves", "post">;
        moveColumn: (params?: {
            column_id?: number | RegExp | undefined;
            position?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/{column_id}/moves", "post">;
        removeCollaborator: (params?: {
            project_id?: number | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}/collaborators/{username}", "delete">;
        update: (params?: {
            project_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            body?: string | RegExp | null | undefined;
            state?: string | RegExp | undefined;
            organization_permission?: RegExp | "read" | "write" | "none" | "admin" | undefined;
            private?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/{project_id}", "patch">;
        updateCard: (params?: {
            card_id?: number | RegExp | undefined;
            note?: string | RegExp | null | undefined;
            archived?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/cards/{card_id}", "patch">;
        updateColumn: (params?: {
            column_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/projects/columns/{column_id}", "patch">;
    };
    pulls: {
        checkIfMerged: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/merge", "get">;
        create: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            title?: string | RegExp | undefined;
            head?: string | RegExp | undefined;
            head_repo?: string | RegExp | undefined;
            base?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
            maintainer_can_modify?: boolean | RegExp | undefined;
            draft?: boolean | RegExp | undefined;
            issue?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls", "post">;
        createReplyForReviewComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies", "post">;
        createReview: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            commit_id?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
            event?: RegExp | "APPROVE" | "REQUEST_CHANGES" | "COMMENT" | undefined;
            comments?: RegExp | {
                path: string;
                position?: number | undefined;
                body: string;
                line?: number | undefined;
                side?: string | undefined;
                start_line?: number | undefined;
                start_side?: string | undefined;
            }[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/reviews", "post">;
        createReviewComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
            commit_id?: string | RegExp | undefined;
            path?: string | RegExp | undefined;
            position?: number | RegExp | undefined;
            side?: RegExp | "LEFT" | "RIGHT" | undefined;
            line?: number | RegExp | undefined;
            start_line?: number | RegExp | undefined;
            start_side?: RegExp | "side" | "LEFT" | "RIGHT" | undefined;
            in_reply_to?: number | RegExp | undefined;
            subject_type?: RegExp | "LINE" | "FILE" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/comments", "post">;
        deletePendingReview: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            review_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", "delete">;
        deleteReviewComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/comments/{comment_id}", "delete">;
        dismissReview: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            review_id?: number | RegExp | undefined;
            message?: string | RegExp | undefined;
            event?: RegExp | "DISMISS" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals", "put">;
        get: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}", "get">;
        getReview: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            review_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", "get">;
        getReviewComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/comments/{comment_id}", "get">;
        list: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls", "get">;
        listCommentsForReview: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments", "get">;
        listCommits: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/commits", "get">;
        listFiles: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/files", "get">;
        listRequestedReviewers: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", "get">;
        listReviewComments: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/comments", "get">;
        listReviewCommentsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/comments", "get">;
        listReviews: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/reviews", "get">;
        merge: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            commit_title?: string | RegExp | undefined;
            commit_message?: string | RegExp | undefined;
            sha?: string | RegExp | undefined;
            merge_method?: RegExp | "merge" | "squash" | "rebase" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/merge", "put">;
        removeRequestedReviewers: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            reviewers?: RegExp | string[] | undefined;
            team_reviewers?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", "delete">;
        requestReviewers: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            reviewers?: RegExp | string[] | undefined;
            team_reviewers?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", "post">;
        submitReview: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            review_id?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
            event?: RegExp | "APPROVE" | "REQUEST_CHANGES" | "COMMENT" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events", "post">;
        update: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            title?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
            state?: RegExp | "closed" | "open" | undefined;
            base?: string | RegExp | undefined;
            maintainer_can_modify?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}", "patch">;
        updateBranch: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            expected_head_sha?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/update-branch", "put">;
        updateReview: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pull_number?: number | RegExp | undefined;
            review_id?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", "put">;
        updateReviewComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/comments/{comment_id}", "patch">;
    };
    rateLimit: {
        get: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/rate_limit", "get">;
    };
    reactions: {
        createForCommitComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            content?: RegExp | "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/comments/{comment_id}/reactions", "post">;
        createForIssue: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            content?: RegExp | "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/reactions", "post">;
        createForIssueComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            content?: RegExp | "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", "post">;
        createForPullRequestReviewComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            content?: RegExp | "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", "post">;
        createForRelease: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            release_id?: number | RegExp | undefined;
            content?: RegExp | "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/{release_id}/reactions", "post">;
        createForTeamDiscussionCommentInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            comment_number?: number | RegExp | undefined;
            content?: RegExp | "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", "post">;
        createForTeamDiscussionInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            content?: RegExp | "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", "post">;
        deleteForCommitComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            reaction_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}", "delete">;
        deleteForIssue: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            issue_number?: number | RegExp | undefined;
            reaction_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}", "delete">;
        deleteForIssueComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            reaction_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}", "delete">;
        deleteForPullRequestComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            reaction_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}", "delete">;
        deleteForRelease: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            release_id?: number | RegExp | undefined;
            reaction_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}", "delete">;
        deleteForTeamDiscussion: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            reaction_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}", "delete">;
        deleteForTeamDiscussionComment: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            comment_number?: number | RegExp | undefined;
            reaction_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}", "delete">;
        listForCommitComment: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/comments/{comment_id}/reactions", "get">;
        listForIssue: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/{issue_number}/reactions", "get">;
        listForIssueComment: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", "get">;
        listForPullRequestReviewComment: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", "get">;
        listForRelease: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/{release_id}/reactions", "get">;
        listForTeamDiscussionCommentInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", "get">;
        listForTeamDiscussionInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", "get">;
    };
    repos: {
        acceptInvitation: (params?: {
            invitation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/repository_invitations/{invitation_id}", "patch">;
        acceptInvitationForAuthenticatedUser: (params?: {
            invitation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/repository_invitations/{invitation_id}", "patch">;
        addAppAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            apps?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", "post">;
        addCollaborator: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
            permission?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/collaborators/{username}", "put">;
        addStatusCheckContexts: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            contexts?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", "post">;
        addTeamAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            teams?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", "post">;
        addUserAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            users?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", "post">;
        checkCollaborator: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/collaborators/{username}", "get">;
        checkVulnerabilityAlerts: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/vulnerability-alerts", "get">;
        codeownersErrors: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/codeowners/errors", "get">;
        compareCommits: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/compare/{base}...{head}", "get">;
        compareCommitsWithBasehead: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/compare/{basehead}", "get">;
        createAutolink: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            key_prefix?: string | RegExp | undefined;
            url_template?: string | RegExp | undefined;
            is_alphanumeric?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/autolinks", "post">;
        createCommitComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            commit_sha?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
            path?: string | RegExp | undefined;
            position?: number | RegExp | undefined;
            line?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{commit_sha}/comments", "post">;
        createCommitSignatureProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", "post">;
        createCommitStatus: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            sha?: string | RegExp | undefined;
            state?: RegExp | "error" | "success" | "failure" | "pending" | undefined;
            target_url?: string | RegExp | null | undefined;
            description?: string | RegExp | null | undefined;
            context?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/statuses/{sha}", "post">;
        createDeployKey: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            title?: string | RegExp | undefined;
            key?: string | RegExp | undefined;
            read_only?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/keys", "post">;
        createDeployment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
            task?: string | RegExp | undefined;
            auto_merge?: boolean | RegExp | undefined;
            required_contexts?: RegExp | string[] | undefined;
            payload?: string | RegExp | {
                [key: string]: unknown;
            } | undefined;
            environment?: string | RegExp | undefined;
            description?: string | RegExp | null | undefined;
            transient_environment?: boolean | RegExp | undefined;
            production_environment?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/deployments", "post">;
        createDeploymentBranchPolicy: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies", "post">;
        createDeploymentProtectionRule: (params?: {
            environment_name?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            owner?: string | RegExp | undefined;
            integration_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules", "post">;
        createDeploymentStatus: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            deployment_id?: number | RegExp | undefined;
            state?: RegExp | "error" | "success" | "failure" | "queued" | "in_progress" | "pending" | "inactive" | undefined;
            target_url?: string | RegExp | undefined;
            log_url?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            environment?: RegExp | "production" | "staging" | "qa" | undefined;
            environment_url?: string | RegExp | undefined;
            auto_inactive?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", "post">;
        createDispatchEvent: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            event_type?: string | RegExp | undefined;
            client_payload?: RegExp | {
                [key: string]: unknown;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/dispatches", "post">;
        createForAuthenticatedUser: (params?: {
            name?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            homepage?: string | RegExp | undefined;
            private?: boolean | RegExp | undefined;
            has_issues?: boolean | RegExp | undefined;
            has_projects?: boolean | RegExp | undefined;
            has_wiki?: boolean | RegExp | undefined;
            has_discussions?: boolean | RegExp | undefined;
            team_id?: number | RegExp | undefined;
            auto_init?: boolean | RegExp | undefined;
            gitignore_template?: string | RegExp | undefined;
            license_template?: string | RegExp | undefined;
            allow_squash_merge?: boolean | RegExp | undefined;
            allow_merge_commit?: boolean | RegExp | undefined;
            allow_rebase_merge?: boolean | RegExp | undefined;
            allow_auto_merge?: boolean | RegExp | undefined;
            delete_branch_on_merge?: boolean | RegExp | undefined;
            squash_merge_commit_title?: RegExp | "PR_TITLE" | "COMMIT_OR_PR_TITLE" | undefined;
            squash_merge_commit_message?: RegExp | "PR_BODY" | "COMMIT_MESSAGES" | "BLANK" | undefined;
            merge_commit_title?: RegExp | "PR_TITLE" | "MERGE_MESSAGE" | undefined;
            merge_commit_message?: RegExp | "PR_TITLE" | "PR_BODY" | "BLANK" | undefined;
            has_downloads?: boolean | RegExp | undefined;
            is_template?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/repos", "post">;
        createFork: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            organization?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            default_branch_only?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/forks", "post">;
        createInOrg: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            homepage?: string | RegExp | undefined;
            private?: boolean | RegExp | undefined;
            visibility?: RegExp | "private" | "public" | "internal" | undefined;
            has_issues?: boolean | RegExp | undefined;
            has_projects?: boolean | RegExp | undefined;
            has_wiki?: boolean | RegExp | undefined;
            has_downloads?: boolean | RegExp | undefined;
            is_template?: boolean | RegExp | undefined;
            team_id?: number | RegExp | undefined;
            auto_init?: boolean | RegExp | undefined;
            gitignore_template?: string | RegExp | undefined;
            license_template?: string | RegExp | undefined;
            allow_squash_merge?: boolean | RegExp | undefined;
            allow_merge_commit?: boolean | RegExp | undefined;
            allow_rebase_merge?: boolean | RegExp | undefined;
            allow_auto_merge?: boolean | RegExp | undefined;
            delete_branch_on_merge?: boolean | RegExp | undefined;
            use_squash_pr_title_as_default?: boolean | RegExp | undefined;
            squash_merge_commit_title?: RegExp | "PR_TITLE" | "COMMIT_OR_PR_TITLE" | undefined;
            squash_merge_commit_message?: RegExp | "PR_BODY" | "COMMIT_MESSAGES" | "BLANK" | undefined;
            merge_commit_title?: RegExp | "PR_TITLE" | "MERGE_MESSAGE" | undefined;
            merge_commit_message?: RegExp | "PR_TITLE" | "PR_BODY" | "BLANK" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/repos", "post">;
        createOrUpdateEnvironment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            wait_timer?: number | RegExp | undefined;
            reviewers?: RegExp | {
                type?: "User" | "Team" | undefined;
                id?: number | undefined;
            }[] | null | undefined;
            deployment_branch_policy?: RegExp | {
                protected_branches: boolean;
                custom_branch_policies: boolean;
            } | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}", "put">;
        createOrUpdateFileContents: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            path?: string | RegExp | undefined;
            message?: string | RegExp | undefined;
            content?: string | RegExp | undefined;
            sha?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            committer?: RegExp | {
                name: string;
                email: string;
                date?: string | undefined;
            } | undefined;
            author?: RegExp | {
                name: string;
                email: string;
                date?: string | undefined;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/contents/{path}", "put">;
        createOrgRuleset: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            target?: RegExp | "branch" | "tag" | undefined;
            enforcement?: RegExp | "active" | "disabled" | "evaluate" | undefined;
            bypass_actors?: RegExp | {
                actor_id?: number | undefined;
                actor_type?: "Team" | "Integration" | undefined;
            }[] | undefined;
            conditions?: RegExp | ({
                ref_name?: {
                    include?: string[] | undefined;
                    exclude?: string[] | undefined;
                } | undefined;
            } & {
                repository_name?: {
                    include?: string[] | undefined;
                    exclude?: string[] | undefined;
                    protected?: boolean | undefined;
                } | undefined;
            }) | undefined;
            rules?: RegExp | ({
                type: "creation";
            } | {
                type: "update";
                parameters?: {
                    update_allows_fetch_and_merge: boolean;
                } | undefined;
            } | {
                type: "deletion";
            } | {
                type: "required_linear_history";
            } | {
                type: "required_deployments";
                parameters?: {
                    required_deployment_environments: string[];
                } | undefined;
            } | {
                type: "required_signatures";
            } | {
                type: "pull_request";
                parameters?: {
                    dismiss_stale_reviews_on_push: boolean;
                    require_code_owner_review: boolean;
                    require_last_push_approval: boolean;
                    required_approving_review_count: number;
                    required_review_thread_resolution: boolean;
                } | undefined;
            } | {
                type: "required_status_checks";
                parameters?: {
                    required_status_checks: {
                        context: string;
                        integration_id?: number | undefined;
                    }[];
                    strict_required_status_checks_policy: boolean;
                } | undefined;
            } | {
                type: "non_fast_forward";
            } | {
                type: "commit_message_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "commit_author_email_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "committer_email_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "branch_name_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "tag_name_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            })[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/rulesets", "post">;
        createPagesDeployment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            artifact_url?: string | RegExp | undefined;
            environment?: string | RegExp | undefined;
            pages_build_version?: string | RegExp | undefined;
            oidc_token?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages/deployment", "post">;
        createPagesSite: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            build_type?: RegExp | "legacy" | "workflow" | undefined;
            source?: RegExp | {
                branch: string;
                path?: "/" | "/docs" | undefined;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages", "post">;
        createRelease: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            tag_name?: string | RegExp | undefined;
            target_commitish?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
            draft?: boolean | RegExp | undefined;
            prerelease?: boolean | RegExp | undefined;
            discussion_category_name?: string | RegExp | undefined;
            generate_release_notes?: boolean | RegExp | undefined;
            make_latest?: RegExp | "true" | "false" | "legacy" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases", "post">;
        createRepoRuleset: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            target?: RegExp | "branch" | "tag" | undefined;
            enforcement?: RegExp | "active" | "disabled" | "evaluate" | undefined;
            bypass_mode?: RegExp | "repository" | "organization" | "none" | undefined;
            bypass_actors?: RegExp | {
                actor_id?: number | undefined;
                actor_type?: "Team" | "Integration" | undefined;
            }[] | undefined;
            conditions?: RegExp | {
                ref_name?: {
                    include?: string[] | undefined;
                    exclude?: string[] | undefined;
                } | undefined;
            } | undefined;
            rules?: RegExp | ({
                type: "creation";
            } | {
                type: "update";
                parameters?: {
                    update_allows_fetch_and_merge: boolean;
                } | undefined;
            } | {
                type: "deletion";
            } | {
                type: "required_linear_history";
            } | {
                type: "required_deployments";
                parameters?: {
                    required_deployment_environments: string[];
                } | undefined;
            } | {
                type: "required_signatures";
            } | {
                type: "pull_request";
                parameters?: {
                    dismiss_stale_reviews_on_push: boolean;
                    require_code_owner_review: boolean;
                    require_last_push_approval: boolean;
                    required_approving_review_count: number;
                    required_review_thread_resolution: boolean;
                } | undefined;
            } | {
                type: "required_status_checks";
                parameters?: {
                    required_status_checks: {
                        context: string;
                        integration_id?: number | undefined;
                    }[];
                    strict_required_status_checks_policy: boolean;
                } | undefined;
            } | {
                type: "non_fast_forward";
            } | {
                type: "commit_message_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "commit_author_email_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "committer_email_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "branch_name_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "tag_name_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            })[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/rulesets", "post">;
        createTagProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            pattern?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/tags/protection", "post">;
        createUsingTemplate: (params?: {
            template_owner?: string | RegExp | undefined;
            template_repo?: string | RegExp | undefined;
            owner?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            include_all_branches?: boolean | RegExp | undefined;
            private?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{template_owner}/{template_repo}/generate", "post">;
        createWebhook: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            config?: RegExp | {
                url?: string | undefined;
                content_type?: string | undefined;
                secret?: string | undefined;
                insecure_ssl?: string | number | undefined;
                token?: string | undefined;
                digest?: string | undefined;
            } | undefined;
            events?: RegExp | string[] | undefined;
            active?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks", "post">;
        declineInvitation: (params?: {
            invitation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/repository_invitations/{invitation_id}", "delete">;
        declineInvitationForAuthenticatedUser: (params?: {
            invitation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/repository_invitations/{invitation_id}", "delete">;
        delete: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}", "delete">;
        deleteAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions", "delete">;
        deleteAdminBranchProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", "delete">;
        deleteAnEnvironment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}", "delete">;
        deleteAutolink: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            autolink_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/autolinks/{autolink_id}", "delete">;
        deleteBranchProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection", "delete">;
        deleteCommitComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/comments/{comment_id}", "delete">;
        deleteCommitSignatureProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", "delete">;
        deleteDeployKey: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/keys/{key_id}", "delete">;
        deleteDeployment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            deployment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/deployments/{deployment_id}", "delete">;
        deleteDeploymentBranchPolicy: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            branch_policy_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}", "delete">;
        deleteFile: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            path?: string | RegExp | undefined;
            message?: string | RegExp | undefined;
            sha?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            committer?: RegExp | {
                name?: string | undefined;
                email?: string | undefined;
            } | undefined;
            author?: RegExp | {
                name?: string | undefined;
                email?: string | undefined;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/contents/{path}", "delete">;
        deleteInvitation: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            invitation_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/invitations/{invitation_id}", "delete">;
        deleteOrgRuleset: (params?: {
            org?: string | RegExp | undefined;
            ruleset_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/rulesets/{ruleset_id}", "delete">;
        deletePagesSite: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages", "delete">;
        deletePullRequestReviewProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", "delete">;
        deleteRelease: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            release_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/{release_id}", "delete">;
        deleteReleaseAsset: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            asset_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/assets/{asset_id}", "delete">;
        deleteRepoRuleset: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ruleset_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/rulesets/{ruleset_id}", "delete">;
        deleteTagProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            tag_protection_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/tags/protection/{tag_protection_id}", "delete">;
        deleteWebhook: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}", "delete">;
        disableAutomatedSecurityFixes: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/automated-security-fixes", "delete">;
        disableDeploymentProtectionRule: (params?: {
            environment_name?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            owner?: string | RegExp | undefined;
            protection_rule_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}", "delete">;
        disableLfsForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/lfs", "delete">;
        disableVulnerabilityAlerts: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/vulnerability-alerts", "delete">;
        downloadArchive: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/zipball/{ref}", "get">;
        downloadTarballArchive: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/tarball/{ref}", "get">;
        downloadZipballArchive: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ref?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/zipball/{ref}", "get">;
        enableAutomatedSecurityFixes: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/automated-security-fixes", "put">;
        enableLfsForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/lfs", "put">;
        enableVulnerabilityAlerts: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/vulnerability-alerts", "put">;
        generateReleaseNotes: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            tag_name?: string | RegExp | undefined;
            target_commitish?: string | RegExp | undefined;
            previous_tag_name?: string | RegExp | undefined;
            configuration_file_path?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/generate-notes", "post">;
        get: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}", "get">;
        getAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions", "get">;
        getAdminBranchProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", "get">;
        getAllDeploymentProtectionRules: (params?: {
            environment_name?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            owner?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules", "get">;
        getAllEnvironments: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments", "get">;
        getAllStatusCheckContexts: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", "get">;
        getAllTopics: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/topics", "get">;
        getAppsWithAccessToProtectedBranch: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", "get">;
        getAutolink: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            autolink_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/autolinks/{autolink_id}", "get">;
        getBranch: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}", "get">;
        getBranchProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection", "get">;
        getBranchRules: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/rules/branches/{branch}", "get">;
        getClones: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/traffic/clones", "get">;
        getCodeFrequencyStats: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/stats/code_frequency", "get">;
        getCollaboratorPermissionLevel: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/collaborators/{username}/permission", "get">;
        getCombinedStatusForRef: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{ref}/status", "get">;
        getCommit: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{ref}", "get">;
        getCommitActivityStats: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/stats/commit_activity", "get">;
        getCommitComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/comments/{comment_id}", "get">;
        getCommitSignatureProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", "get">;
        getCommunityProfileMetrics: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/community/profile", "get">;
        getContent: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/contents/{path}", "get">;
        getContributorsStats: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/stats/contributors", "get">;
        getCustomDeploymentProtectionRule: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            protection_rule_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}", "get">;
        getDeployKey: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/keys/{key_id}", "get">;
        getDeployment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            deployment_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/deployments/{deployment_id}", "get">;
        getDeploymentBranchPolicy: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            branch_policy_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}", "get">;
        getDeploymentStatus: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            deployment_id?: number | RegExp | undefined;
            status_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}", "get">;
        getEnvironment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}", "get">;
        getLatestPagesBuild: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages/builds/latest", "get">;
        getLatestRelease: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/latest", "get">;
        getOrgRuleset: (params?: {
            org?: string | RegExp | undefined;
            ruleset_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/rulesets/{ruleset_id}", "get">;
        getOrgRulesets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/rulesets", "get">;
        getPages: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages", "get">;
        getPagesBuild: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            build_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages/builds/{build_id}", "get">;
        getPagesHealthCheck: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages/health", "get">;
        getParticipationStats: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/stats/participation", "get">;
        getPullRequestReviewProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", "get">;
        getPunchCardStats: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/stats/punch_card", "get">;
        getReadme: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/readme", "get">;
        getReadmeInDirectory: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/readme/{dir}", "get">;
        getRelease: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            release_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/{release_id}", "get">;
        getReleaseAsset: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            asset_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/assets/{asset_id}", "get">;
        getReleaseByTag: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            tag?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/tags/{tag}", "get">;
        getRepoRuleset: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/rulesets/{ruleset_id}", "get">;
        getRepoRulesets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/rulesets", "get">;
        getStatusChecksProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", "get">;
        getTeamsWithAccessToProtectedBranch: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", "get">;
        getTopPaths: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/traffic/popular/paths", "get">;
        getTopReferrers: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/traffic/popular/referrers", "get">;
        getUsersWithAccessToProtectedBranch: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", "get">;
        getViews: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/traffic/views", "get">;
        getWebhook: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}", "get">;
        getWebhookConfigForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}/config", "get">;
        getWebhookDelivery: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
            delivery_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}", "get">;
        listAutolinks: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/autolinks", "get">;
        listBranches: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches", "get">;
        listBranchesForHeadCommit: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            commit_sha?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", "get">;
        listCollaborators: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/collaborators", "get">;
        listCommentsForCommit: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{commit_sha}/comments", "get">;
        listCommitCommentsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/comments", "get">;
        listCommitStatusesForRef: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{ref}/statuses", "get">;
        listCommits: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits", "get">;
        listContributors: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/contributors", "get">;
        listCustomDeploymentRuleIntegrations: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps", "get">;
        listDeployKeys: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/keys", "get">;
        listDeploymentBranchPolicies: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies", "get">;
        listDeploymentStatuses: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", "get">;
        listDeployments: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/deployments", "get">;
        listForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/repos", "get">;
        listForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/repos", "get">;
        listForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/repos", "get">;
        listForks: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/forks", "get">;
        listInvitations: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/invitations", "get">;
        listInvitationsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/repository_invitations", "get">;
        listLanguages: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/languages", "get">;
        listPagesBuilds: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages/builds", "get">;
        listPublic: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repositories", "get">;
        listPullRequestsAssociatedWithCommit: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/commits/{commit_sha}/pulls", "get">;
        listReleaseAssets: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/{release_id}/assets", "get">;
        listReleases: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases", "get">;
        listTagProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/tags/protection", "get">;
        listTags: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/tags", "get">;
        listTeams: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/teams", "get">;
        listWebhookDeliveries: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}/deliveries", "get">;
        listWebhooks: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks", "get">;
        merge: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            base?: string | RegExp | undefined;
            head?: string | RegExp | undefined;
            commit_message?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/merges", "post">;
        mergeUpstream: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/merge-upstream", "post">;
        pingWebhook: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}/pings", "post">;
        redeliverWebhookDelivery: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
            delivery_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", "post">;
        removeAppAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            apps?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", "delete">;
        removeCollaborator: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/collaborators/{username}", "delete">;
        removeStatusCheckContexts: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            contexts?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", "delete">;
        removeStatusCheckProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", "delete">;
        removeTeamAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            teams?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", "delete">;
        removeUserAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            users?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", "delete">;
        renameBranch: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            new_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/rename", "post">;
        replaceAllTopics: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            names?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/topics", "put">;
        requestPagesBuild: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages/builds", "post">;
        setAdminBranchProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", "post">;
        setAppAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            apps?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", "put">;
        setStatusCheckContexts: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            contexts?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", "put">;
        setTeamAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            teams?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", "put">;
        setUserAccessRestrictions: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            users?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", "put">;
        testPushWebhook: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}/tests", "post">;
        transfer: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            new_owner?: string | RegExp | undefined;
            new_name?: string | RegExp | undefined;
            team_ids?: RegExp | number[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/transfer", "post">;
        update: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            homepage?: string | RegExp | undefined;
            private?: boolean | RegExp | undefined;
            visibility?: RegExp | "private" | "public" | "internal" | undefined;
            security_and_analysis?: RegExp | {
                advanced_security?: {
                    status?: string | undefined;
                } | undefined;
                secret_scanning?: {
                    status?: string | undefined;
                } | undefined;
                secret_scanning_push_protection?: {
                    status?: string | undefined;
                } | undefined;
            } | null | undefined;
            has_issues?: boolean | RegExp | undefined;
            has_projects?: boolean | RegExp | undefined;
            has_wiki?: boolean | RegExp | undefined;
            is_template?: boolean | RegExp | undefined;
            default_branch?: string | RegExp | undefined;
            allow_squash_merge?: boolean | RegExp | undefined;
            allow_merge_commit?: boolean | RegExp | undefined;
            allow_rebase_merge?: boolean | RegExp | undefined;
            allow_auto_merge?: boolean | RegExp | undefined;
            delete_branch_on_merge?: boolean | RegExp | undefined;
            allow_update_branch?: boolean | RegExp | undefined;
            use_squash_pr_title_as_default?: boolean | RegExp | undefined;
            squash_merge_commit_title?: RegExp | "PR_TITLE" | "COMMIT_OR_PR_TITLE" | undefined;
            squash_merge_commit_message?: RegExp | "PR_BODY" | "COMMIT_MESSAGES" | "BLANK" | undefined;
            merge_commit_title?: RegExp | "PR_TITLE" | "MERGE_MESSAGE" | undefined;
            merge_commit_message?: RegExp | "PR_TITLE" | "PR_BODY" | "BLANK" | undefined;
            archived?: boolean | RegExp | undefined;
            allow_forking?: boolean | RegExp | undefined;
            web_commit_signoff_required?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}", "patch">;
        updateBranchProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            required_status_checks?: RegExp | {
                strict: boolean;
                contexts: string[];
                checks?: {
                    context: string;
                    app_id?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            enforce_admins?: boolean | RegExp | null | undefined;
            required_pull_request_reviews?: RegExp | {
                dismissal_restrictions?: {
                    users?: string[] | undefined;
                    teams?: string[] | undefined;
                    apps?: string[] | undefined;
                } | undefined;
                dismiss_stale_reviews?: boolean | undefined;
                require_code_owner_reviews?: boolean | undefined;
                required_approving_review_count?: number | undefined;
                require_last_push_approval?: boolean | undefined;
                bypass_pull_request_allowances?: {
                    users?: string[] | undefined;
                    teams?: string[] | undefined;
                    apps?: string[] | undefined;
                } | undefined;
            } | null | undefined;
            restrictions?: RegExp | {
                users: string[];
                teams: string[];
                apps?: string[] | undefined;
            } | null | undefined;
            required_linear_history?: boolean | RegExp | undefined;
            allow_force_pushes?: boolean | RegExp | null | undefined;
            allow_deletions?: boolean | RegExp | undefined;
            block_creations?: boolean | RegExp | undefined;
            required_conversation_resolution?: boolean | RegExp | undefined;
            lock_branch?: boolean | RegExp | undefined;
            allow_fork_syncing?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection", "put">;
        updateCommitComment: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            comment_id?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/comments/{comment_id}", "patch">;
        updateDeploymentBranchPolicy: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            environment_name?: string | RegExp | undefined;
            branch_policy_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}", "put">;
        updateInformationAboutPagesSite: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            cname?: string | RegExp | null | undefined;
            https_enforced?: boolean | RegExp | undefined;
            build_type?: RegExp | "legacy" | "workflow" | undefined;
            source?: RegExp | "gh-pages" | "master" | "master /docs" | {
                branch: string;
                path: "/" | "/docs";
            } | undefined;
            public?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/pages", "put">;
        updateInvitation: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            invitation_id?: number | RegExp | undefined;
            permissions?: RegExp | "read" | "write" | "admin" | "maintain" | "triage" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/invitations/{invitation_id}", "patch">;
        updateOrgRuleset: (params?: {
            org?: string | RegExp | undefined;
            ruleset_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            target?: RegExp | "branch" | "tag" | undefined;
            enforcement?: RegExp | "active" | "disabled" | "evaluate" | undefined;
            bypass_actors?: RegExp | {
                actor_id?: number | undefined;
                actor_type?: "Team" | "Integration" | undefined;
            }[] | undefined;
            conditions?: RegExp | ({
                ref_name?: {
                    include?: string[] | undefined;
                    exclude?: string[] | undefined;
                } | undefined;
            } & {
                repository_name?: {
                    include?: string[] | undefined;
                    exclude?: string[] | undefined;
                    protected?: boolean | undefined;
                } | undefined;
            }) | undefined;
            rules?: RegExp | ({
                type: "creation";
            } | {
                type: "update";
                parameters?: {
                    update_allows_fetch_and_merge: boolean;
                } | undefined;
            } | {
                type: "deletion";
            } | {
                type: "required_linear_history";
            } | {
                type: "required_deployments";
                parameters?: {
                    required_deployment_environments: string[];
                } | undefined;
            } | {
                type: "required_signatures";
            } | {
                type: "pull_request";
                parameters?: {
                    dismiss_stale_reviews_on_push: boolean;
                    require_code_owner_review: boolean;
                    require_last_push_approval: boolean;
                    required_approving_review_count: number;
                    required_review_thread_resolution: boolean;
                } | undefined;
            } | {
                type: "required_status_checks";
                parameters?: {
                    required_status_checks: {
                        context: string;
                        integration_id?: number | undefined;
                    }[];
                    strict_required_status_checks_policy: boolean;
                } | undefined;
            } | {
                type: "non_fast_forward";
            } | {
                type: "commit_message_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "commit_author_email_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "committer_email_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "branch_name_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "tag_name_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            })[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/rulesets/{ruleset_id}", "put">;
        updatePullRequestReviewProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            dismissal_restrictions?: RegExp | {
                users?: string[] | undefined;
                teams?: string[] | undefined;
                apps?: string[] | undefined;
            } | undefined;
            dismiss_stale_reviews?: boolean | RegExp | undefined;
            require_code_owner_reviews?: boolean | RegExp | undefined;
            required_approving_review_count?: number | RegExp | undefined;
            require_last_push_approval?: boolean | RegExp | undefined;
            bypass_pull_request_allowances?: RegExp | {
                users?: string[] | undefined;
                teams?: string[] | undefined;
                apps?: string[] | undefined;
            } | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", "patch">;
        updateRelease: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            release_id?: number | RegExp | undefined;
            tag_name?: string | RegExp | undefined;
            target_commitish?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
            draft?: boolean | RegExp | undefined;
            prerelease?: boolean | RegExp | undefined;
            make_latest?: RegExp | "true" | "false" | "legacy" | undefined;
            discussion_category_name?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/{release_id}", "patch">;
        updateReleaseAsset: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            asset_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            label?: string | RegExp | undefined;
            state?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/assets/{asset_id}", "patch">;
        updateRepoRuleset: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ruleset_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            target?: RegExp | "branch" | "tag" | undefined;
            enforcement?: RegExp | "active" | "disabled" | "evaluate" | undefined;
            bypass_mode?: RegExp | "repository" | "organization" | "none" | undefined;
            bypass_actors?: RegExp | {
                actor_id?: number | undefined;
                actor_type?: "Team" | "Integration" | undefined;
            }[] | undefined;
            conditions?: RegExp | {
                ref_name?: {
                    include?: string[] | undefined;
                    exclude?: string[] | undefined;
                } | undefined;
            } | undefined;
            rules?: RegExp | ({
                type: "creation";
            } | {
                type: "update";
                parameters?: {
                    update_allows_fetch_and_merge: boolean;
                } | undefined;
            } | {
                type: "deletion";
            } | {
                type: "required_linear_history";
            } | {
                type: "required_deployments";
                parameters?: {
                    required_deployment_environments: string[];
                } | undefined;
            } | {
                type: "required_signatures";
            } | {
                type: "pull_request";
                parameters?: {
                    dismiss_stale_reviews_on_push: boolean;
                    require_code_owner_review: boolean;
                    require_last_push_approval: boolean;
                    required_approving_review_count: number;
                    required_review_thread_resolution: boolean;
                } | undefined;
            } | {
                type: "required_status_checks";
                parameters?: {
                    required_status_checks: {
                        context: string;
                        integration_id?: number | undefined;
                    }[];
                    strict_required_status_checks_policy: boolean;
                } | undefined;
            } | {
                type: "non_fast_forward";
            } | {
                type: "commit_message_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "commit_author_email_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "committer_email_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "branch_name_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            } | {
                type: "tag_name_pattern";
                parameters?: {
                    name?: string | undefined;
                    negate?: boolean | undefined;
                    operator: "contains" | "starts_with" | "ends_with" | "regex";
                    pattern: string;
                } | undefined;
            })[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/rulesets/{ruleset_id}", "put">;
        updateStatusCheckPotection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            strict?: boolean | RegExp | undefined;
            contexts?: RegExp | string[] | undefined;
            checks?: RegExp | {
                context: string;
                app_id?: number | undefined;
            }[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", "patch">;
        updateStatusCheckProtection: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            branch?: string | RegExp | undefined;
            strict?: boolean | RegExp | undefined;
            contexts?: RegExp | string[] | undefined;
            checks?: RegExp | {
                context: string;
                app_id?: number | undefined;
            }[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", "patch">;
        updateWebhook: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
            config?: RegExp | {
                url: string;
                content_type?: string | undefined;
                secret?: string | undefined;
                insecure_ssl?: string | number | undefined;
                address?: string | undefined;
                room?: string | undefined;
            } | undefined;
            events?: RegExp | string[] | undefined;
            add_events?: RegExp | string[] | undefined;
            remove_events?: RegExp | string[] | undefined;
            active?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}", "patch">;
        updateWebhookConfigForRepo: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            hook_id?: number | RegExp | undefined;
            url?: string | RegExp | undefined;
            content_type?: string | RegExp | undefined;
            secret?: string | RegExp | undefined;
            insecure_ssl?: string | number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/hooks/{hook_id}/config", "patch">;
        uploadReleaseAsset: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            release_id?: number | RegExp | undefined;
            name?: string | RegExp | undefined;
            label?: string | RegExp | undefined;
            data?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/releases/{release_id}/assets", "post">;
    };
    search: {
        code: (params?: {
            q?: string | RegExp | undefined;
            sort?: RegExp | "indexed" | undefined;
            order?: RegExp | "desc" | "asc" | undefined;
            per_page?: number | RegExp | undefined;
            page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/search/code", "get">;
        commits: (params?: {
            q?: string | RegExp | undefined;
            sort?: RegExp | "author-date" | "committer-date" | undefined;
            order?: RegExp | "desc" | "asc" | undefined;
            per_page?: number | RegExp | undefined;
            page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/search/commits", "get">;
        issuesAndPullRequests: (params?: {
            q?: string | RegExp | undefined;
            sort?: RegExp | "created" | "interactions" | "comments" | "reactions" | "reactions-+1" | "reactions--1" | "reactions-smile" | "reactions-thinking_face" | "reactions-heart" | "reactions-tada" | "updated" | undefined;
            order?: RegExp | "desc" | "asc" | undefined;
            per_page?: number | RegExp | undefined;
            page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/search/issues", "get">;
        labels: (params?: {
            repository_id?: number | RegExp | undefined;
            q?: string | RegExp | undefined;
            sort?: RegExp | "created" | "updated" | undefined;
            order?: RegExp | "desc" | "asc" | undefined;
            per_page?: number | RegExp | undefined;
            page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/search/labels", "get">;
        repos: (params?: {
            q?: string | RegExp | undefined;
            sort?: RegExp | "forks" | "updated" | "stars" | "help-wanted-issues" | undefined;
            order?: RegExp | "desc" | "asc" | undefined;
            per_page?: number | RegExp | undefined;
            page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/search/repositories", "get">;
        topics: (params?: {
            q?: string | RegExp | undefined;
            per_page?: number | RegExp | undefined;
            page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/search/topics", "get">;
        users: (params?: {
            q?: string | RegExp | undefined;
            sort?: RegExp | "repositories" | "followers" | "joined" | undefined;
            order?: RegExp | "desc" | "asc" | undefined;
            per_page?: number | RegExp | undefined;
            page?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/search/users", "get">;
    };
    secretScanning: {
        getAlert: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            alert_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", "get">;
        listAlertsForEnterprise: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/enterprises/{enterprise}/secret-scanning/alerts", "get">;
        listAlertsForOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/secret-scanning/alerts", "get">;
        listAlertsForRepo: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/secret-scanning/alerts", "get">;
        listLocationsForAlert: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations", "get">;
        updateAlert: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            alert_number?: number | RegExp | undefined;
            state?: RegExp | "open" | "resolved" | undefined;
            resolution?: RegExp | "false_positive" | "wont_fix" | "revoked" | "used_in_tests" | null | undefined;
            resolution_comment?: string | RegExp | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", "patch">;
    };
    securityAdvisories: {
        createPrivateVulnerabilityReport: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            summary?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            vulnerabilities?: RegExp | {
                package: {
                    ecosystem: "actions" | "npm" | "maven" | "rubygems" | "nuget" | "pip" | "composer" | "go" | "rust" | "erlang" | "pub" | "other";
                    name?: string | null | undefined;
                };
                vulnerable_version_range?: string | null | undefined;
                patched_versions?: string | null | undefined;
                vulnerable_functions?: string[] | null | undefined;
            }[] | null | undefined;
            cwe_ids?: RegExp | string[] | null | undefined;
            severity?: RegExp | "critical" | "high" | "medium" | "low" | null | undefined;
            cvss_vector_string?: string | RegExp | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/security-advisories/reports", "post">;
        createRepositoryAdvisory: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            summary?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            cve_id?: string | RegExp | null | undefined;
            vulnerabilities?: RegExp | {
                package: {
                    ecosystem: "actions" | "npm" | "maven" | "rubygems" | "nuget" | "pip" | "composer" | "go" | "rust" | "erlang" | "pub" | "other";
                    name?: string | null | undefined;
                };
                vulnerable_version_range?: string | null | undefined;
                patched_versions?: string | null | undefined;
                vulnerable_functions?: string[] | null | undefined;
            }[] | undefined;
            cwe_ids?: RegExp | string[] | null | undefined;
            credits?: RegExp | {
                login: string;
                type: "other" | "analyst" | "finder" | "reporter" | "coordinator" | "remediation_developer" | "remediation_reviewer" | "remediation_verifier" | "tool" | "sponsor";
            }[] | null | undefined;
            severity?: RegExp | "critical" | "high" | "medium" | "low" | null | undefined;
            cvss_vector_string?: string | RegExp | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/security-advisories", "post">;
        getRepositoryAdvisory: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ghsa_id?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/security-advisories/{ghsa_id}", "get">;
        listRepositoryAdvisories: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/security-advisories", "get">;
        updateRepositoryAdvisory: (params?: {
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            ghsa_id?: string | RegExp | undefined;
            summary?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            cve_id?: string | RegExp | null | undefined;
            vulnerabilities?: RegExp | {
                package: {
                    ecosystem: "actions" | "npm" | "maven" | "rubygems" | "nuget" | "pip" | "composer" | "go" | "rust" | "erlang" | "pub" | "other";
                    name?: string | null | undefined;
                };
                vulnerable_version_range?: string | null | undefined;
                patched_versions?: string | null | undefined;
                vulnerable_functions?: string[] | null | undefined;
            }[] | undefined;
            cwe_ids?: RegExp | string[] | null | undefined;
            credits?: RegExp | {
                login: string;
                type: "other" | "analyst" | "finder" | "reporter" | "coordinator" | "remediation_developer" | "remediation_reviewer" | "remediation_verifier" | "tool" | "sponsor";
            }[] | null | undefined;
            severity?: RegExp | "critical" | "high" | "medium" | "low" | null | undefined;
            cvss_vector_string?: string | RegExp | null | undefined;
            state?: RegExp | "draft" | "closed" | "published" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/repos/{owner}/{repo}/security-advisories/{ghsa_id}", "patch">;
    };
    teams: {
        addOrUpdateMembershipForUserInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
            role?: RegExp | "member" | "maintainer" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/memberships/{username}", "put">;
        addOrUpdateProjectPermissionsInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            project_id?: number | RegExp | undefined;
            permission?: RegExp | "read" | "write" | "admin" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/projects/{project_id}", "put">;
        addOrUpdateRepoPermissionsInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
            permission?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", "put">;
        checkPermissionsForProjectInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            project_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/projects/{project_id}", "get">;
        checkPermissionsForRepoInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", "get">;
        create: (params?: {
            org?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            maintainers?: RegExp | string[] | undefined;
            repo_names?: RegExp | string[] | undefined;
            privacy?: RegExp | "secret" | "closed" | undefined;
            notification_setting?: RegExp | "notifications_enabled" | "notifications_disabled" | undefined;
            permission?: RegExp | "push" | "pull" | undefined;
            parent_team_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams", "post">;
        createDiscussionCommentInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", "post">;
        createDiscussionInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            title?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
            private?: boolean | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions", "post">;
        deleteDiscussionCommentInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            comment_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", "delete">;
        deleteDiscussionInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", "delete">;
        deleteInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}", "delete">;
        getByName: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}", "get">;
        getDiscussionCommentInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            comment_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", "get">;
        getDiscussionInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", "get">;
        getMembershipForUserInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/memberships/{username}", "get">;
        list: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams", "get">;
        listChildInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/teams", "get">;
        listDiscussionCommentsInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", "get">;
        listDiscussionsInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions", "get">;
        listForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/teams", "get">;
        listMembersInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/members", "get">;
        listPendingInvitationsInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/invitations", "get">;
        listProjectsInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/projects", "get">;
        listReposInOrg: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/repos", "get">;
        removeMembershipForUserInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/memberships/{username}", "delete">;
        removeProjectInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            project_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/projects/{project_id}", "delete">;
        removeRepoInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            owner?: string | RegExp | undefined;
            repo?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", "delete">;
        updateDiscussionCommentInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            comment_number?: number | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", "patch">;
        updateDiscussionInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            discussion_number?: number | RegExp | undefined;
            title?: string | RegExp | undefined;
            body?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", "patch">;
        updateInOrg: (params?: {
            org?: string | RegExp | undefined;
            team_slug?: string | RegExp | undefined;
            name?: string | RegExp | undefined;
            description?: string | RegExp | undefined;
            privacy?: RegExp | "secret" | "closed" | undefined;
            notification_setting?: RegExp | "notifications_enabled" | "notifications_disabled" | undefined;
            permission?: RegExp | "push" | "admin" | "pull" | undefined;
            parent_team_id?: number | RegExp | null | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/orgs/{org}/teams/{team_slug}", "patch">;
    };
    users: {
        addEmailForAuthenticated: (params?: {
            emails?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/emails", "post">;
        addEmailForAuthenticatedUser: (params?: {
            emails?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/emails", "post">;
        addSocialAccountForAuthenticatedUser: (params?: {
            account_urls?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/social_accounts", "post">;
        block: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/blocks/{username}", "put">;
        checkBlocked: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/blocks/{username}", "get">;
        checkFollowingForUser: (params?: {
            username?: string | RegExp | undefined;
            target_user?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/following/{target_user}", "get">;
        checkPersonIsFollowedByAuthenticated: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/following/{username}", "get">;
        createGpgKeyForAuthenticated: (params?: {
            name?: string | RegExp | undefined;
            armored_public_key?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/gpg_keys", "post">;
        createGpgKeyForAuthenticatedUser: (params?: {
            name?: string | RegExp | undefined;
            armored_public_key?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/gpg_keys", "post">;
        createPublicSshKeyForAuthenticated: (params?: {
            title?: string | RegExp | undefined;
            key?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/keys", "post">;
        createPublicSshKeyForAuthenticatedUser: (params?: {
            title?: string | RegExp | undefined;
            key?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/keys", "post">;
        createSshSigningKeyForAuthenticatedUser: (params?: {
            title?: string | RegExp | undefined;
            key?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/ssh_signing_keys", "post">;
        deleteEmailForAuthenticated: (params?: {
            emails?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/emails", "delete">;
        deleteEmailForAuthenticatedUser: (params?: {
            emails?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/emails", "delete">;
        deleteGpgKeyForAuthenticated: (params?: {
            gpg_key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/gpg_keys/{gpg_key_id}", "delete">;
        deleteGpgKeyForAuthenticatedUser: (params?: {
            gpg_key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/gpg_keys/{gpg_key_id}", "delete">;
        deletePublicSshKeyForAuthenticated: (params?: {
            key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/keys/{key_id}", "delete">;
        deletePublicSshKeyForAuthenticatedUser: (params?: {
            key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/keys/{key_id}", "delete">;
        deleteSocialAccountForAuthenticatedUser: (params?: {
            account_urls?: RegExp | string[] | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/social_accounts", "delete">;
        deleteSshSigningKeyForAuthenticatedUser: (params?: {
            ssh_signing_key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/ssh_signing_keys/{ssh_signing_key_id}", "delete">;
        follow: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/following/{username}", "put">;
        getAuthenticated: (params?: {} | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user", "get">;
        getByUsername: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}", "get">;
        getContextForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/hovercard", "get">;
        getGpgKeyForAuthenticated: (params?: {
            gpg_key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/gpg_keys/{gpg_key_id}", "get">;
        getGpgKeyForAuthenticatedUser: (params?: {
            gpg_key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/gpg_keys/{gpg_key_id}", "get">;
        getPublicSshKeyForAuthenticated: (params?: {
            key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/keys/{key_id}", "get">;
        getPublicSshKeyForAuthenticatedUser: (params?: {
            key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/keys/{key_id}", "get">;
        getSshSigningKeyForAuthenticatedUser: (params?: {
            ssh_signing_key_id?: number | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/ssh_signing_keys/{ssh_signing_key_id}", "get">;
        list: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users", "get">;
        listBlockedByAuthenticated: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/blocks", "get">;
        listBlockedByAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/blocks", "get">;
        listEmailsForAuthenticated: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/emails", "get">;
        listEmailsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/emails", "get">;
        listFollowedByAuthenticated: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/following", "get">;
        listFollowedByAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/following", "get">;
        listFollowersForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/followers", "get">;
        listFollowersForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/followers", "get">;
        listFollowingForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/following", "get">;
        listGpgKeysForAuthenticated: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/gpg_keys", "get">;
        listGpgKeysForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/gpg_keys", "get">;
        listGpgKeysForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/gpg_keys", "get">;
        listPublicEmailsForAuthenticated: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/public_emails", "get">;
        listPublicEmailsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/public_emails", "get">;
        listPublicKeysForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/keys", "get">;
        listPublicSshKeysForAuthenticated: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/keys", "get">;
        listPublicSshKeysForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/keys", "get">;
        listSocialAccountsForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/social_accounts", "get">;
        listSocialAccountsForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/social_accounts", "get">;
        listSshSigningKeysForAuthenticatedUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/ssh_signing_keys", "get">;
        listSshSigningKeysForUser: (params?: undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/users/{username}/ssh_signing_keys", "get">;
        setPrimaryEmailVisibilityForAuthenticated: (params?: {
            visibility?: RegExp | "private" | "public" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/email/visibility", "patch">;
        setPrimaryEmailVisibilityForAuthenticatedUser: (params?: {
            visibility?: RegExp | "private" | "public" | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/email/visibility", "patch">;
        unblock: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/blocks/{username}", "delete">;
        unfollow: (params?: {
            username?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user/following/{username}", "delete">;
        updateAuthenticated: (params?: {
            name?: string | RegExp | undefined;
            email?: string | RegExp | undefined;
            blog?: string | RegExp | undefined;
            twitter_username?: string | RegExp | null | undefined;
            company?: string | RegExp | undefined;
            location?: string | RegExp | undefined;
            hireable?: boolean | RegExp | undefined;
            bio?: string | RegExp | undefined;
        } | undefined) => import("../response/response-mocker").MoctokitResponseMocker<"/user", "patch">;
    };
};
export default endpointToMethod;
