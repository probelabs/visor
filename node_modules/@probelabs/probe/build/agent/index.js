#!/usr/bin/env node
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/agent/tokenCounter.js
import { get_encoding } from "tiktoken";
var TokenCounter;
var init_tokenCounter = __esm({
  "src/agent/tokenCounter.js"() {
    "use strict";
    TokenCounter = class {
      constructor() {
        try {
          this.tokenizer = get_encoding("cl100k_base");
          this.contextSize = 0;
          this.history = [];
          this.requestTokens = 0;
          this.responseTokens = 0;
          this.currentRequestTokens = 0;
          this.currentResponseTokens = 0;
          this.cacheCreationTokens = 0;
          this.cacheReadTokens = 0;
          this.currentCacheCreationTokens = 0;
          this.currentCacheReadTokens = 0;
          this.cachedPromptTokens = 0;
          this.currentCachedPromptTokens = 0;
        } catch (error) {
          console.error("Error initializing tokenizer:", error);
          this.tokenizer = null;
          this.contextSize = 0;
          this.requestTokens = 0;
          this.responseTokens = 0;
          this.currentRequestTokens = 0;
          this.currentResponseTokens = 0;
          this.cacheCreationTokens = 0;
          this.cacheReadTokens = 0;
          this.currentCacheCreationTokens = 0;
          this.currentCacheReadTokens = 0;
          this.cachedPromptTokens = 0;
          this.currentCachedPromptTokens = 0;
          this.history = [];
        }
        this.debug = process.env.DEBUG === "1";
      }
      /**
       * Count tokens in a string using tiktoken or fallback method
       * @param {string} text - The text to count tokens for
       * @returns {number} - The number of tokens
       */
      countTokens(text) {
        if (typeof text !== "string") {
          text = String(text);
        }
        if (this.tokenizer) {
          try {
            const tokens = this.tokenizer.encode(text);
            return tokens.length;
          } catch (error) {
            return Math.ceil(text.length / 4);
          }
        } else {
          return Math.ceil(text.length / 4);
        }
      }
      /**
       * Add to request token count (manual counting, less used now with recordUsage)
       * @param {string|number} input - The text to count tokens for or the token count directly
       */
      addRequestTokens(input) {
        let tokenCount = 0;
        if (typeof input === "number") {
          tokenCount = input;
        } else if (typeof input === "string") {
          tokenCount = this.countTokens(input);
        } else {
          console.warn("[WARN] Invalid input type for addRequestTokens:", typeof input);
          return;
        }
        this.requestTokens += tokenCount;
        this.currentRequestTokens = tokenCount;
        if (this.debug) {
          console.log(`[DEBUG] (Manual) Added ${tokenCount} request tokens. Total: ${this.requestTokens}, Current: ${this.currentRequestTokens}`);
        }
      }
      /**
       * Add to response token count (manual counting, less used now with recordUsage)
       * @param {string|number} input - The text to count tokens for or the token count directly
       */
      addResponseTokens(input) {
        let tokenCount = 0;
        if (typeof input === "number") {
          tokenCount = input;
        } else if (typeof input === "string") {
          tokenCount = this.countTokens(input);
        } else {
          console.warn("[WARN] Invalid input type for addResponseTokens:", typeof input);
          return;
        }
        this.responseTokens += tokenCount;
        this.currentResponseTokens = tokenCount;
        if (this.debug) {
          console.log(`[DEBUG] (Manual) Added ${tokenCount} response tokens. Total: ${this.responseTokens}, Current: ${this.currentResponseTokens}`);
        }
      }
      /**
       * Record token usage from the AI SDK's result for a single LLM call.
       * This resets 'current' counters and updates totals.
       * @param {Object} usage - The usage object { promptTokens, completionTokens, totalTokens }
       * @param {Object} providerMetadata - Metadata possibly containing cache info
       */
      recordUsage(usage, providerMetadata) {
        if (!usage) {
          console.warn("[WARN] No usage information provided to recordUsage");
          return;
        }
        this.currentRequestTokens = 0;
        this.currentResponseTokens = 0;
        this.currentCacheCreationTokens = 0;
        this.currentCacheReadTokens = 0;
        this.currentCachedPromptTokens = 0;
        const promptTokens = Number(usage.promptTokens) || 0;
        const completionTokens = Number(usage.completionTokens) || 0;
        this.currentRequestTokens = promptTokens;
        this.currentResponseTokens = completionTokens;
        this.requestTokens += promptTokens;
        this.responseTokens += completionTokens;
        if (providerMetadata?.anthropic) {
          const cacheCreation = Number(providerMetadata.anthropic.cacheCreationInputTokens) || 0;
          const cacheRead = Number(providerMetadata.anthropic.cacheReadInputTokens) || 0;
          this.currentCacheCreationTokens = cacheCreation;
          this.currentCacheReadTokens = cacheRead;
          this.cacheCreationTokens += cacheCreation;
          this.cacheReadTokens += cacheRead;
          if (this.debug) {
            console.log(`[DEBUG] Anthropic cache tokens (current): creation=${cacheCreation}, read=${cacheRead}`);
          }
        }
        if (providerMetadata?.openai) {
          const cachedPrompt = Number(providerMetadata.openai.cachedPromptTokens) || 0;
          this.currentCachedPromptTokens = cachedPrompt;
          this.cachedPromptTokens += cachedPrompt;
          if (this.debug) {
            console.log(`[DEBUG] OpenAI cached prompt tokens (current): ${cachedPrompt}`);
          }
        }
        if (this.debug) {
          console.log(
            `[DEBUG] Recorded usage: current(req=${this.currentRequestTokens}, resp=${this.currentResponseTokens}), total(req=${this.requestTokens}, resp=${this.responseTokens})`
          );
          console.log(`[DEBUG] Total cache tokens: Anthropic(create=${this.cacheCreationTokens}, read=${this.cacheReadTokens}), OpenAI(prompt=${this.cachedPromptTokens})`);
        }
      }
      /**
       * Calculate the current context window size based on provided messages or internal history.
       * @param {Array|null} messages - Optional messages array to use for calculation. If null, uses internal this.history.
       * @returns {number} - Total tokens estimated in the context window.
       */
      calculateContextSize(messages = null) {
        const msgsToCount = messages !== null ? messages : this.history;
        let totalTokens = 0;
        if (this.debug && messages === null) {
          console.log(`[DEBUG] Calculating context size from internal history (${this.history.length} messages)`);
        }
        for (const msg of msgsToCount) {
          let messageTokens = 0;
          messageTokens += 4;
          if (typeof msg.content === "string") {
            messageTokens += this.countTokens(msg.content);
          } else if (Array.isArray(msg.content)) {
            for (const item of msg.content) {
              if (item.type === "text" && typeof item.text === "string") {
                messageTokens += this.countTokens(item.text);
              } else {
                messageTokens += this.countTokens(JSON.stringify(item));
              }
            }
          } else if (msg.content) {
            messageTokens += this.countTokens(JSON.stringify(msg.content));
          }
          if (msg.toolCalls) {
            messageTokens += this.countTokens(JSON.stringify(msg.toolCalls));
            messageTokens += 5;
          }
          if (msg.role === "tool" && msg.toolCallId) {
            messageTokens += this.countTokens(msg.toolCallId);
            messageTokens += 5;
          }
          if (msg.toolCallResults) {
            messageTokens += this.countTokens(JSON.stringify(msg.toolCallResults));
            messageTokens += 5;
          }
          totalTokens += messageTokens;
        }
        if (messages === null) {
          this.contextSize = totalTokens;
          if (this.debug) {
            console.log(`[DEBUG] Updated internal context size: ${this.contextSize} tokens`);
          }
        }
        return totalTokens;
      }
      /**
       * Update internal history and recalculate internal context window size.
       * @param {Array} messages - New message history array.
       */
      updateHistory(messages) {
        if (!Array.isArray(messages)) {
          console.warn("[WARN] updateHistory called with non-array:", messages);
          this.history = [];
        } else {
          this.history = [...messages];
        }
        this.calculateContextSize();
        if (this.debug) {
          console.log(`[DEBUG] History updated (${this.history.length} messages). Recalculated context size: ${this.contextSize}`);
        }
      }
      /**
       * Clear all counters and internal history. Reset context size.
       */
      clear() {
        this.requestTokens = 0;
        this.responseTokens = 0;
        this.currentRequestTokens = 0;
        this.currentResponseTokens = 0;
        this.cacheCreationTokens = 0;
        this.cacheReadTokens = 0;
        this.currentCacheCreationTokens = 0;
        this.currentCacheReadTokens = 0;
        this.cachedPromptTokens = 0;
        this.currentCachedPromptTokens = 0;
        this.history = [];
        this.contextSize = 0;
        if (this.debug) {
          console.log("[DEBUG] TokenCounter cleared: usage, history, and context size reset.");
        }
      }
      /**
       * Start a new conversation turn - reset CURRENT token counters.
       * Calculates context size based on history *before* the new turn.
       */
      startNewTurn() {
        this.currentRequestTokens = 0;
        this.currentResponseTokens = 0;
        this.currentCacheCreationTokens = 0;
        this.currentCacheReadTokens = 0;
        this.currentCachedPromptTokens = 0;
        this.calculateContextSize();
        if (this.debug) {
          console.log("[DEBUG] TokenCounter: New turn started. Current counters reset.");
          console.log(`[DEBUG] Context size at start of turn: ${this.contextSize} tokens`);
        }
      }
      /**
       * Get the current token usage state including context size.
       * Recalculates context size from internal history before returning.
       * @returns {Object} - Object containing current turn, total session, and context window usage.
       */
      getTokenUsage() {
        const currentContextSize = this.calculateContextSize();
        const currentCacheRead = this.currentCacheReadTokens + this.currentCachedPromptTokens;
        const currentCacheWrite = this.currentCacheCreationTokens;
        const totalCacheRead = this.cacheReadTokens + this.cachedPromptTokens;
        const totalCacheWrite = this.cacheCreationTokens;
        const usageData = {
          contextWindow: currentContextSize,
          // Use the freshly calculated value
          current: {
            // Usage for the *last* LLM call recorded
            request: this.currentRequestTokens,
            response: this.currentResponseTokens,
            total: this.currentRequestTokens + this.currentResponseTokens,
            cacheRead: currentCacheRead,
            cacheWrite: currentCacheWrite,
            cacheTotal: currentCacheRead + currentCacheWrite,
            // Keep detailed breakdown if needed
            anthropic: {
              cacheCreation: this.currentCacheCreationTokens,
              cacheRead: this.currentCacheReadTokens
            },
            openai: {
              cachedPrompt: this.currentCachedPromptTokens
            }
          },
          total: {
            // Accumulated usage over the session
            request: this.requestTokens,
            response: this.responseTokens,
            total: this.requestTokens + this.responseTokens,
            cacheRead: totalCacheRead,
            cacheWrite: totalCacheWrite,
            cacheTotal: totalCacheRead + totalCacheWrite,
            // Keep detailed breakdown if needed
            anthropic: {
              cacheCreation: this.cacheCreationTokens,
              cacheRead: this.cacheReadTokens
            },
            openai: {
              cachedPrompt: this.cachedPromptTokens
            }
          }
        };
        if (this.debug) {
        }
        return usageData;
      }
    };
  }
});

// src/directory-resolver.js
import path from "path";
import os from "os";
import fs from "fs-extra";
import { fileURLToPath } from "url";
async function getPackageBinDir() {
  const debug = process.env.DEBUG === "1" || process.env.VERBOSE === "1";
  if (debug) {
    console.log("DEBUG: Starting probe binary directory resolution");
  }
  if (process.env.PROBE_BINARY_PATH) {
    if (debug) {
      console.log(`DEBUG: Checking PROBE_BINARY_PATH: ${process.env.PROBE_BINARY_PATH}`);
    }
    const binaryPath = process.env.PROBE_BINARY_PATH;
    if (await fs.pathExists(binaryPath)) {
      const binDir = path.dirname(binaryPath);
      if (await canWriteToDirectory(binDir)) {
        if (debug) {
          console.log(`DEBUG: Using PROBE_BINARY_PATH directory: ${binDir}`);
        }
        return binDir;
      }
    } else {
      console.warn(`Warning: PROBE_BINARY_PATH ${binaryPath} does not exist`);
    }
  }
  if (process.env.PROBE_CACHE_DIR) {
    if (debug) {
      console.log(`DEBUG: Checking PROBE_CACHE_DIR: ${process.env.PROBE_CACHE_DIR}`);
    }
    const cacheDir = path.join(process.env.PROBE_CACHE_DIR, "bin");
    if (await ensureDirectory(cacheDir)) {
      if (debug) {
        console.log(`DEBUG: Using PROBE_CACHE_DIR: ${cacheDir}`);
      }
      return cacheDir;
    }
  }
  const packageRoot = await findPackageRoot();
  if (packageRoot) {
    if (debug) {
      console.log(`DEBUG: Found package root: ${packageRoot}`);
    }
    const packageBinDir = path.join(packageRoot, "bin");
    if (await ensureDirectory(packageBinDir) && await canWriteToDirectory(packageBinDir)) {
      if (debug) {
        console.log(`DEBUG: Using package bin directory: ${packageBinDir}`);
      }
      return packageBinDir;
    } else if (debug) {
      console.log(`DEBUG: Package bin directory ${packageBinDir} not writable, trying fallbacks`);
    }
  }
  const homeCache = path.join(os.homedir(), ".probe", "bin");
  if (debug) {
    console.log(`DEBUG: Trying home cache directory: ${homeCache}`);
  }
  if (await ensureDirectory(homeCache)) {
    if (debug) {
      console.log(`DEBUG: Using home cache directory: ${homeCache}`);
    }
    return homeCache;
  }
  const tempCache = path.join(os.tmpdir(), "probe-cache", "bin");
  if (debug) {
    console.log(`DEBUG: Trying temp cache directory: ${tempCache}`);
  }
  if (await ensureDirectory(tempCache)) {
    if (debug) {
      console.log(`DEBUG: Using temp cache directory: ${tempCache}`);
    }
    return tempCache;
  }
  const errorMessage = [
    "Could not find a writable directory for probe binary.",
    "Tried the following locations:",
    packageRoot ? `- Package bin directory: ${path.join(packageRoot, "bin")}` : "- Package root not found",
    `- Home cache directory: ${homeCache}`,
    `- Temp cache directory: ${tempCache}`,
    "",
    "You can override the location using environment variables:",
    "- PROBE_BINARY_PATH=/path/to/probe (direct path to binary)",
    "- PROBE_CACHE_DIR=/path/to/cache (cache directory, binary will be in /bin subdirectory)"
  ].join("\n");
  throw new Error(errorMessage);
}
async function findPackageRoot() {
  const debug = process.env.DEBUG === "1" || process.env.VERBOSE === "1";
  let currentDir = __dirname;
  const rootDir = path.parse(currentDir).root;
  if (debug) {
    console.log(`DEBUG: Starting package root search from: ${currentDir}`);
  }
  while (currentDir !== rootDir) {
    const packageJsonPath = path.join(currentDir, "package.json");
    try {
      if (await fs.pathExists(packageJsonPath)) {
        const packageJson = await fs.readJson(packageJsonPath);
        if (debug) {
          console.log(`DEBUG: Found package.json at ${packageJsonPath}, name: ${packageJson.name}`);
        }
        if (packageJson.name === "@probelabs/probe") {
          if (debug) {
            console.log(`DEBUG: Found probe package root: ${currentDir}`);
          }
          return currentDir;
        }
      }
    } catch (err) {
      if (debug) {
        console.log(`DEBUG: Error reading package.json at ${packageJsonPath}: ${err.message}`);
      }
    }
    currentDir = path.dirname(currentDir);
  }
  if (debug) {
    console.log("DEBUG: Package root not found, reached filesystem root");
  }
  return null;
}
async function ensureDirectory(dirPath) {
  const debug = process.env.DEBUG === "1" || process.env.VERBOSE === "1";
  try {
    await fs.ensureDir(dirPath);
    const testFile = path.join(dirPath, ".probe-write-test");
    await fs.writeFile(testFile, "test");
    await fs.remove(testFile);
    if (debug) {
      console.log(`DEBUG: Directory ${dirPath} is writable`);
    }
    return true;
  } catch (error) {
    if (debug) {
      console.log(`DEBUG: Directory ${dirPath} not writable: ${error.message}`);
    }
    return false;
  }
}
async function canWriteToDirectory(dirPath) {
  const debug = process.env.DEBUG === "1" || process.env.VERBOSE === "1";
  try {
    const exists = await fs.pathExists(dirPath);
    if (!exists) {
      if (debug) {
        console.log(`DEBUG: Directory ${dirPath} does not exist`);
      }
      return false;
    }
    const testFile = path.join(dirPath, ".probe-write-test");
    await fs.writeFile(testFile, "test");
    await fs.remove(testFile);
    if (debug) {
      console.log(`DEBUG: Directory ${dirPath} is writable`);
    }
    return true;
  } catch (error) {
    if (debug) {
      console.log(`DEBUG: Directory ${dirPath} not writable: ${error.message}`);
    }
    return false;
  }
}
var __filename, __dirname;
var init_directory_resolver = __esm({
  "src/directory-resolver.js"() {
    "use strict";
    __filename = fileURLToPath(import.meta.url);
    __dirname = path.dirname(__filename);
  }
});

// src/downloader.js
import axios from "axios";
import fs2 from "fs-extra";
import path2 from "path";
import { createHash } from "crypto";
import { promisify } from "util";
import { exec as execCallback } from "child_process";
import tar from "tar";
import os2 from "os";
import { fileURLToPath as fileURLToPath2 } from "url";
function detectOsArch() {
  const osType = os2.platform();
  const archType = os2.arch();
  let osInfo;
  let archInfo;
  switch (osType) {
    case "linux":
      osInfo = {
        type: "linux",
        keywords: ["linux", "Linux", "gnu"]
      };
      break;
    case "darwin":
      osInfo = {
        type: "darwin",
        keywords: ["darwin", "Darwin", "mac", "Mac", "apple", "Apple", "osx", "OSX"]
      };
      break;
    case "win32":
      osInfo = {
        type: "windows",
        keywords: ["windows", "Windows", "msvc", "pc-windows"]
      };
      break;
    default:
      throw new Error(`Unsupported operating system: ${osType}`);
  }
  switch (archType) {
    case "x64":
      archInfo = {
        type: "x86_64",
        keywords: ["x86_64", "amd64", "x64", "64bit", "64-bit"]
      };
      break;
    case "arm64":
      archInfo = {
        type: "aarch64",
        keywords: ["arm64", "aarch64", "arm", "ARM"]
      };
      break;
    default:
      throw new Error(`Unsupported architecture: ${archType}`);
  }
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Detected OS: ${osInfo.type}, Architecture: ${archInfo.type}`);
  }
  return { os: osInfo, arch: archInfo };
}
function constructAssetInfo(version, osInfo, archInfo) {
  let platform;
  let extension;
  switch (osInfo.type) {
    case "linux":
      platform = `${archInfo.type}-unknown-linux-gnu`;
      extension = "tar.gz";
      break;
    case "darwin":
      platform = `${archInfo.type}-apple-darwin`;
      extension = "tar.gz";
      break;
    case "windows":
      platform = `${archInfo.type}-pc-windows-msvc`;
      extension = "zip";
      break;
    default:
      throw new Error(`Unsupported OS type: ${osInfo.type}`);
  }
  const assetName = `probe-v${version}-${platform}.${extension}`;
  const checksumName = `${assetName}.sha256`;
  const baseUrl = `https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/download/v${version}`;
  const assetUrl = `${baseUrl}/${assetName}`;
  const checksumUrl = `${baseUrl}/${checksumName}`;
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Constructed asset URL: ${assetUrl}`);
  }
  return {
    name: assetName,
    url: assetUrl,
    checksumName,
    checksumUrl
  };
}
async function getLatestRelease(version) {
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log("Fetching release information...");
  }
  try {
    let releaseUrl;
    if (version) {
      releaseUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/tags/v${version}`;
    } else {
      releaseUrl = `https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases`;
    }
    const response = await axios.get(releaseUrl);
    if (response.status !== 200) {
      throw new Error(`Failed to fetch release information: ${response.statusText}`);
    }
    let releaseData;
    if (version) {
      releaseData = response.data;
    } else {
      if (!Array.isArray(response.data) || response.data.length === 0) {
        throw new Error("No releases found");
      }
      releaseData = response.data[0];
    }
    const tag = releaseData.tag_name;
    const assets = releaseData.assets.map((asset) => ({
      name: asset.name,
      url: asset.browser_download_url
    }));
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`Found release: ${tag} with ${assets.length} assets`);
    }
    return { tag, assets };
  } catch (error) {
    if (axios.isAxiosError(error) && error.response?.status === 404) {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Release v${version} not found, trying to fetch all releases...`);
      }
      const response = await axios.get(`https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases`);
      if (response.data.length === 0) {
        throw new Error("No releases found");
      }
      let bestRelease = response.data[0];
      if (version && version !== "0.0.0") {
        if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
          console.log(`Looking for releases matching version: ${version}`);
          console.log(`Available releases: ${response.data.slice(0, 5).map((r) => r.tag_name).join(", ")}...`);
        }
        for (const release of response.data) {
          const releaseTag = release.tag_name.startsWith("v") ? release.tag_name.substring(1) : release.tag_name;
          if (releaseTag === version) {
            if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
              console.log(`Found exact matching release: ${release.tag_name}`);
            }
            bestRelease = release;
            break;
          }
        }
        if (bestRelease === response.data[0]) {
          const versionParts = version.split(/[\.-]/);
          const majorMinor = versionParts.slice(0, 2).join(".");
          if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
            console.log(`Looking for releases matching major.minor: ${majorMinor}`);
          }
          for (const release of response.data) {
            const releaseTag = release.tag_name.startsWith("v") ? release.tag_name.substring(1) : release.tag_name;
            const releaseVersionParts = releaseTag.split(/[\.-]/);
            const releaseMajorMinor = releaseVersionParts.slice(0, 2).join(".");
            if (releaseMajorMinor === majorMinor) {
              if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
                console.log(`Found matching major.minor release: ${release.tag_name}`);
              }
              bestRelease = release;
              break;
            }
          }
        }
      }
      const tag = bestRelease.tag_name;
      const assets = bestRelease.assets.map((asset) => ({
        name: asset.name,
        url: asset.browser_download_url
      }));
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Using release: ${tag} with ${assets.length} assets`);
      }
      return { tag, assets };
    }
    throw error;
  }
}
function findBestAsset(assets, osInfo, archInfo) {
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Finding appropriate binary for ${osInfo.type} ${archInfo.type}...`);
  }
  let bestAsset = null;
  let bestScore = 0;
  for (const asset of assets) {
    if (asset.name.endsWith(".sha256") || asset.name.endsWith(".md5") || asset.name.endsWith(".asc")) {
      continue;
    }
    if (osInfo.type === "windows" && asset.name.match(/darwin|linux/)) {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Skipping non-Windows binary: ${asset.name}`);
      }
      continue;
    } else if (osInfo.type === "darwin" && asset.name.match(/windows|msvc|linux/)) {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Skipping non-macOS binary: ${asset.name}`);
      }
      continue;
    } else if (osInfo.type === "linux" && asset.name.match(/darwin|windows|msvc/)) {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Skipping non-Linux binary: ${asset.name}`);
      }
      continue;
    }
    let score = 0;
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`Evaluating asset: ${asset.name}`);
    }
    let osMatched = false;
    for (const keyword of osInfo.keywords) {
      if (asset.name.includes(keyword)) {
        score += 10;
        osMatched = true;
        if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
          console.log(`  OS match found (${keyword}): +10, score = ${score}`);
        }
        break;
      }
    }
    for (const keyword of archInfo.keywords) {
      if (asset.name.includes(keyword)) {
        score += 5;
        if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
          console.log(`  Arch match found (${keyword}): +5, score = ${score}`);
        }
        break;
      }
    }
    if (asset.name.startsWith(`${BINARY_NAME}-`)) {
      score += 3;
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`  Binary name match: +3, score = ${score}`);
      }
    }
    if (osMatched && score >= 15) {
      score += 5;
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`  OS+Arch bonus: +5, score = ${score}`);
      }
    }
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`  Final score for ${asset.name}: ${score}`);
    }
    if (score === 23) {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Found perfect match: ${asset.name}`);
      }
      return asset;
    }
    if (score > bestScore) {
      bestScore = score;
      bestAsset = asset;
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`  New best asset: ${asset.name} (score: ${score})`);
      }
    }
  }
  if (!bestAsset) {
    throw new Error(`Could not find a suitable binary for ${osInfo.type} ${archInfo.type}`);
  }
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Selected asset: ${bestAsset.name} (score: ${bestScore})`);
  }
  return bestAsset;
}
async function downloadAsset(asset, outputDir) {
  await fs2.ensureDir(outputDir);
  const assetPath = path2.join(outputDir, asset.name);
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Downloading ${asset.name}...`);
  }
  const assetResponse = await axios.get(asset.url, { responseType: "arraybuffer" });
  await fs2.writeFile(assetPath, Buffer.from(assetResponse.data));
  const checksumUrl = asset.checksumUrl || `${asset.url}.sha256`;
  const checksumFileName = asset.checksumName || `${asset.name}.sha256`;
  let checksumPath = null;
  try {
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`Downloading checksum...`);
    }
    const checksumResponse = await axios.get(checksumUrl);
    checksumPath = path2.join(outputDir, checksumFileName);
    await fs2.writeFile(checksumPath, checksumResponse.data);
  } catch (error) {
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log("No checksum file found, skipping verification");
    }
  }
  return { assetPath, checksumPath };
}
async function verifyChecksum(assetPath, checksumPath) {
  if (!checksumPath) {
    return true;
  }
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Verifying checksum...`);
  }
  const checksumContent = await fs2.readFile(checksumPath, "utf-8");
  const expectedChecksum = checksumContent.trim().split(" ")[0];
  const fileBuffer = await fs2.readFile(assetPath);
  const actualChecksum = createHash("sha256").update(fileBuffer).digest("hex");
  if (expectedChecksum !== actualChecksum) {
    console.error(`Checksum verification failed!`);
    console.error(`Expected: ${expectedChecksum}`);
    console.error(`Actual: ${actualChecksum}`);
    return false;
  }
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Checksum verified successfully`);
  }
  return true;
}
async function extractBinary(assetPath, outputDir) {
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Extracting ${path2.basename(assetPath)}...`);
  }
  const assetName = path2.basename(assetPath);
  const isWindows = os2.platform() === "win32";
  const binaryName = isWindows ? `${BINARY_NAME}.exe` : `${BINARY_NAME}-binary`;
  const binaryPath = path2.join(outputDir, binaryName);
  try {
    const extractDir = path2.join(outputDir, "temp_extract");
    await fs2.ensureDir(extractDir);
    if (assetName.endsWith(".tar.gz") || assetName.endsWith(".tgz")) {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Extracting tar.gz to ${extractDir}...`);
      }
      await tar.extract({
        file: assetPath,
        cwd: extractDir
      });
    } else if (assetName.endsWith(".zip")) {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Extracting zip to ${extractDir}...`);
      }
      await exec(`unzip -q "${assetPath}" -d "${extractDir}"`);
    } else {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Copying binary directly to ${binaryPath}`);
      }
      await fs2.copyFile(assetPath, binaryPath);
      if (!isWindows) {
        await fs2.chmod(binaryPath, 493);
      }
      await fs2.remove(extractDir);
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Binary installed to ${binaryPath}`);
      }
      return binaryPath;
    }
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`Searching for binary in extracted files...`);
    }
    const findBinary = async (dir) => {
      const entries = await fs2.readdir(dir, { withFileTypes: true });
      for (const entry of entries) {
        const fullPath = path2.join(dir, entry.name);
        if (entry.isDirectory()) {
          const result = await findBinary(fullPath);
          if (result) return result;
        } else if (entry.isFile()) {
          if (entry.name === binaryName || entry.name === BINARY_NAME || isWindows && entry.name.endsWith(".exe")) {
            return fullPath;
          }
        }
      }
      return null;
    };
    const binaryFilePath = await findBinary(extractDir);
    if (!binaryFilePath) {
      const allFiles = await fs2.readdir(extractDir, { recursive: true });
      console.error(`Binary not found in extracted files. Found: ${allFiles.join(", ")}`);
      throw new Error(`Binary not found in the archive.`);
    }
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`Found binary at ${binaryFilePath}`);
      console.log(`Copying binary to ${binaryPath}`);
    }
    await fs2.copyFile(binaryFilePath, binaryPath);
    if (!isWindows) {
      await fs2.chmod(binaryPath, 493);
    }
    await fs2.remove(extractDir);
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`Binary successfully installed to ${binaryPath}`);
    }
    return binaryPath;
  } catch (error) {
    console.error(`Error extracting binary: ${error instanceof Error ? error.message : String(error)}`);
    throw error;
  }
}
async function getVersionInfo(binDir) {
  try {
    const versionInfoPath = path2.join(binDir, "version-info.json");
    if (await fs2.pathExists(versionInfoPath)) {
      const content = await fs2.readFile(versionInfoPath, "utf-8");
      return JSON.parse(content);
    }
    return null;
  } catch (error) {
    console.warn(`Warning: Could not read version info: ${error}`);
    return null;
  }
}
async function saveVersionInfo(version, binDir) {
  const versionInfo = {
    version,
    lastUpdated: (/* @__PURE__ */ new Date()).toISOString()
  };
  const versionInfoPath = path2.join(binDir, "version-info.json");
  await fs2.writeFile(versionInfoPath, JSON.stringify(versionInfo, null, 2));
  if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
    console.log(`Version info saved: ${version} at ${versionInfoPath}`);
  }
}
async function getPackageVersion() {
  try {
    const possiblePaths = [
      path2.resolve(__dirname2, "..", "package.json"),
      // When installed from npm: src/../package.json
      path2.resolve(__dirname2, "..", "..", "package.json")
      // In development: src/../../package.json
    ];
    for (const packageJsonPath of possiblePaths) {
      try {
        if (fs2.existsSync(packageJsonPath)) {
          if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
            console.log(`Found package.json at: ${packageJsonPath}`);
          }
          const packageJson = JSON.parse(fs2.readFileSync(packageJsonPath, "utf-8"));
          if (packageJson.version) {
            if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
              console.log(`Using version from package.json: ${packageJson.version}`);
            }
            return packageJson.version;
          }
        }
      } catch (err) {
        console.error(`Error reading package.json at ${packageJsonPath}:`, err);
      }
    }
    return "0.0.0";
  } catch (error) {
    console.error("Error getting package version:", error);
    return "0.0.0";
  }
}
async function downloadProbeBinary(version) {
  try {
    const localDir = await getPackageBinDir();
    if (!version || version === "0.0.0") {
      version = await getPackageVersion();
    }
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`Downloading probe binary (version: ${version || "latest"})...`);
      console.log(`Using binary directory: ${localDir}`);
    }
    const isWindows = os2.platform() === "win32";
    const binaryName = isWindows ? `${BINARY_NAME}.exe` : `${BINARY_NAME}-binary`;
    const binaryPath = path2.join(localDir, binaryName);
    if (await fs2.pathExists(binaryPath)) {
      const versionInfo = await getVersionInfo(localDir);
      if (versionInfo && versionInfo.version === version) {
        if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
          console.log(`Using existing binary at ${binaryPath} (version: ${versionInfo.version})`);
        }
        return binaryPath;
      }
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Existing binary version (${versionInfo?.version || "unknown"}) doesn't match requested version (${version}). Downloading new version...`);
      }
    }
    const { os: osInfo, arch: archInfo } = detectOsArch();
    let versionToUse = version;
    let bestAsset;
    let tagVersion;
    if (!versionToUse || versionToUse === "0.0.0") {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log("No specific version requested, will use the latest release");
      }
      const { tag, assets } = await getLatestRelease(void 0);
      tagVersion = tag.startsWith("v") ? tag.substring(1) : tag;
      bestAsset = findBestAsset(assets, osInfo, archInfo);
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Found release version: ${tagVersion}`);
      }
    } else {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Direct download for version: ${versionToUse}`);
      }
      tagVersion = versionToUse;
      bestAsset = constructAssetInfo(versionToUse, osInfo, archInfo);
    }
    const { assetPath, checksumPath } = await downloadAsset(bestAsset, localDir);
    const checksumValid = await verifyChecksum(assetPath, checksumPath);
    if (!checksumValid) {
      throw new Error("Checksum verification failed");
    }
    const extractedBinaryPath = await extractBinary(assetPath, localDir);
    await saveVersionInfo(tagVersion, localDir);
    try {
      await fs2.remove(assetPath);
      if (checksumPath) {
        await fs2.remove(checksumPath);
      }
    } catch (err) {
      if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
        console.log(`Warning: Could not clean up temporary files: ${err}`);
      }
    }
    if (process.env.DEBUG === "1" || process.env.VERBOSE === "1") {
      console.log(`Binary successfully installed at ${extractedBinaryPath} (version: ${tagVersion})`);
    }
    return extractedBinaryPath;
  } catch (error) {
    console.error("Error downloading probe binary:", error);
    throw error;
  }
}
var exec, REPO_OWNER, REPO_NAME, BINARY_NAME, __filename2, __dirname2;
var init_downloader = __esm({
  "src/downloader.js"() {
    "use strict";
    init_utils();
    init_directory_resolver();
    exec = promisify(execCallback);
    REPO_OWNER = "probelabs";
    REPO_NAME = "probe";
    BINARY_NAME = "probe";
    __filename2 = fileURLToPath2(import.meta.url);
    __dirname2 = path2.dirname(__filename2);
  }
});

// src/utils.js
import path3 from "path";
import fs3 from "fs-extra";
import { fileURLToPath as fileURLToPath3 } from "url";
async function getBinaryPath(options = {}) {
  const { forceDownload = false, version } = options;
  if (probeBinaryPath && !forceDownload && fs3.existsSync(probeBinaryPath)) {
    return probeBinaryPath;
  }
  if (process.env.PROBE_PATH && fs3.existsSync(process.env.PROBE_PATH) && !forceDownload) {
    probeBinaryPath = process.env.PROBE_PATH;
    return probeBinaryPath;
  }
  const binDir = await getPackageBinDir();
  const isWindows = process.platform === "win32";
  const binaryName = isWindows ? "probe.exe" : "probe";
  const binaryPath = path3.join(binDir, binaryName);
  if (fs3.existsSync(binaryPath) && !forceDownload) {
    probeBinaryPath = binaryPath;
    return probeBinaryPath;
  }
  console.log(`${forceDownload ? "Force downloading" : "Binary not found. Downloading"} probe binary...`);
  probeBinaryPath = await downloadProbeBinary(version);
  return probeBinaryPath;
}
function buildCliArgs(options, flagMap) {
  const cliArgs = [];
  for (const [key, flag] of Object.entries(flagMap)) {
    if (key in options) {
      const value = options[key];
      if (typeof value === "boolean") {
        if (value) {
          cliArgs.push(flag);
        }
      } else if (Array.isArray(value)) {
        for (const item of value) {
          cliArgs.push(flag, item);
        }
      } else if (value !== void 0 && value !== null) {
        cliArgs.push(flag, value.toString());
      }
    }
  }
  return cliArgs;
}
function escapeString(str) {
  if (process.platform === "win32") {
    return `"${str.replace(/"/g, '\\"')}"`;
  } else {
    return `'${str.replace(/'/g, "'\\''")}'`;
  }
}
var __filename3, __dirname3, probeBinaryPath;
var init_utils = __esm({
  "src/utils.js"() {
    "use strict";
    init_downloader();
    init_directory_resolver();
    __filename3 = fileURLToPath3(import.meta.url);
    __dirname3 = path3.dirname(__filename3);
    probeBinaryPath = "";
  }
});

// src/search.js
import { exec as exec2 } from "child_process";
import { promisify as promisify2 } from "util";
async function search(options) {
  if (!options || !options.path) {
    throw new Error("Path is required");
  }
  if (!options.query) {
    throw new Error("Query is required");
  }
  const binaryPath = await getBinaryPath(options.binaryOptions || {});
  const cliArgs = buildCliArgs(options, SEARCH_FLAG_MAP);
  if (options.json) {
    cliArgs.push("--format", "json");
  }
  if (!options.maxTokens) {
    options.maxTokens = 1e4;
    cliArgs.push("--max-tokens", "10000");
  }
  if (!options.timeout) {
    options.timeout = 30;
    cliArgs.push("--timeout", "30");
  }
  if (options.language) {
    if (!cliArgs.includes("--language")) {
      cliArgs.push("--language", options.language);
    }
  }
  if (options.exact) {
    if (!cliArgs.includes("--exact")) {
      cliArgs.push("--exact");
    }
  }
  if (!options.session && process.env.PROBE_SESSION_ID) {
    options.session = process.env.PROBE_SESSION_ID;
  }
  const queries = Array.isArray(options.query) ? options.query : [options.query];
  if (process.env.DEBUG === "1") {
    let logMessage = `
Search: query="${queries[0]}" path="${options.path}"`;
    if (options.maxResults) logMessage += ` maxResults=${options.maxResults}`;
    logMessage += ` maxTokens=${options.maxTokens}`;
    logMessage += ` timeout=${options.timeout}`;
    if (options.allowTests) logMessage += " allowTests=true";
    if (options.language) logMessage += ` language=${options.language}`;
    if (options.exact) logMessage += " exact=true";
    if (options.session) logMessage += ` session=${options.session}`;
    console.error(logMessage);
  }
  const positionalArgs = [];
  if (queries.length > 0) {
    positionalArgs.push(escapeString(queries[0]));
  }
  positionalArgs.push(escapeString(options.path));
  const command = `${binaryPath} search ${cliArgs.join(" ")} ${positionalArgs.join(" ")}`;
  try {
    const { stdout, stderr } = await execAsync(command, {
      shell: true,
      timeout: options.timeout * 1e3
      // Convert seconds to milliseconds
    });
    if (stderr && process.env.DEBUG) {
      console.error(`stderr: ${stderr}`);
    }
    let resultCount = 0;
    let tokenCount = 0;
    let bytesCount = 0;
    const lines = stdout.split("\n");
    for (const line of lines) {
      if (line.startsWith("```") && !line.includes("```language")) {
        resultCount++;
      }
    }
    const totalBytesMatch = stdout.match(/Total bytes returned:\s*(\d+)/i);
    if (totalBytesMatch && totalBytesMatch[1]) {
      bytesCount = parseInt(totalBytesMatch[1], 10);
    }
    const totalTokensMatch = stdout.match(/Total tokens returned:\s*(\d+)/i);
    if (totalTokensMatch && totalTokensMatch[1]) {
      tokenCount = parseInt(totalTokensMatch[1], 10);
    } else {
      const tokenMatch = stdout.match(/Tokens:?\s*(\d+)/i) || stdout.match(/(\d+)\s*tokens/i) || stdout.match(/token count:?\s*(\d+)/i);
      if (tokenMatch && tokenMatch[1]) {
        tokenCount = parseInt(tokenMatch[1], 10);
      } else {
        tokenCount = options.maxTokens;
      }
    }
    if (process.env.DEBUG === "1") {
      let resultsMessage = `
Search results: ${resultCount} matches, ${tokenCount} tokens`;
      if (bytesCount > 0) {
        resultsMessage += `, ${bytesCount} bytes`;
      }
      console.error(resultsMessage);
    }
    if (options.json) {
      try {
        return JSON.parse(stdout);
      } catch (error) {
        console.error("Error parsing JSON output:", error);
        return stdout;
      }
    }
    return stdout;
  } catch (error) {
    if (error.code === "ETIMEDOUT" || error.killed) {
      const timeoutMessage = `Search operation timed out after ${options.timeout} seconds.
Command: ${command}`;
      console.error(timeoutMessage);
      throw new Error(timeoutMessage);
    }
    const errorMessage = `Error executing search command: ${error.message}
Command: ${command}`;
    throw new Error(errorMessage);
  }
}
var execAsync, SEARCH_FLAG_MAP;
var init_search = __esm({
  "src/search.js"() {
    "use strict";
    init_utils();
    execAsync = promisify2(exec2);
    SEARCH_FLAG_MAP = {
      filesOnly: "--files-only",
      ignore: "--ignore",
      excludeFilenames: "--exclude-filenames",
      reranker: "--reranker",
      frequencySearch: "--frequency",
      exact: "--exact",
      maxResults: "--max-results",
      maxBytes: "--max-bytes",
      maxTokens: "--max-tokens",
      allowTests: "--allow-tests",
      noMerge: "--no-merge",
      mergeThreshold: "--merge-threshold",
      session: "--session",
      timeout: "--timeout",
      language: "--language"
    };
  }
});

// src/query.js
import { exec as exec3 } from "child_process";
import { promisify as promisify3 } from "util";
async function query(options) {
  if (!options || !options.path) {
    throw new Error("Path is required");
  }
  if (!options.pattern) {
    throw new Error("Pattern is required");
  }
  const binaryPath = await getBinaryPath(options.binaryOptions || {});
  const cliArgs = buildCliArgs(options, QUERY_FLAG_MAP);
  if (options.json && !options.format) {
    cliArgs.push("--format", "json");
  }
  cliArgs.push(escapeString(options.pattern), escapeString(options.path));
  if (process.env.DEBUG === "1") {
    let logMessage = `Query: pattern="${options.pattern}" path="${options.path}"`;
    if (options.language) logMessage += ` language=${options.language}`;
    if (options.maxResults) logMessage += ` maxResults=${options.maxResults}`;
    if (options.allowTests) logMessage += " allowTests=true";
    console.error(logMessage);
  }
  const command = `${binaryPath} query ${cliArgs.join(" ")}`;
  try {
    const { stdout, stderr } = await execAsync2(command);
    if (stderr) {
      console.error(`stderr: ${stderr}`);
    }
    let resultCount = 0;
    const lines = stdout.split("\n");
    for (const line of lines) {
      if (line.startsWith("```") && !line.includes("```language")) {
        resultCount++;
      }
    }
    if (process.env.DEBUG === "1") {
      console.error(`Query results: ${resultCount} matches`);
    }
    if (options.json || options.format === "json") {
      try {
        return JSON.parse(stdout);
      } catch (error) {
        console.error("Error parsing JSON output:", error);
        return stdout;
      }
    }
    return stdout;
  } catch (error) {
    const errorMessage = `Error executing query command: ${error.message}
Command: ${command}`;
    throw new Error(errorMessage);
  }
}
var execAsync2, QUERY_FLAG_MAP;
var init_query = __esm({
  "src/query.js"() {
    "use strict";
    init_utils();
    execAsync2 = promisify3(exec3);
    QUERY_FLAG_MAP = {
      language: "--language",
      ignore: "--ignore",
      allowTests: "--allow-tests",
      maxResults: "--max-results",
      format: "--format"
    };
  }
});

// src/extract.js
import { exec as exec4 } from "child_process";
import { promisify as promisify4 } from "util";
async function extract(options) {
  if (!options) {
    throw new Error("Options object is required");
  }
  if ((!options.files || !Array.isArray(options.files) || options.files.length === 0) && !options.inputFile) {
    throw new Error("Either files array or inputFile must be provided");
  }
  const binaryPath = await getBinaryPath(options.binaryOptions || {});
  const cliArgs = buildCliArgs(options, EXTRACT_FLAG_MAP);
  if (options.json && !options.format) {
    cliArgs.push("--format", "json");
  }
  if (options.files && Array.isArray(options.files) && options.files.length > 0) {
    for (const file of options.files) {
      cliArgs.push(escapeString(file));
    }
  }
  if (process.env.DEBUG === "1") {
    let logMessage = `
Extract:`;
    if (options.files && options.files.length > 0) {
      logMessage += ` files="${options.files.join(", ")}"`;
    }
    if (options.inputFile) logMessage += ` inputFile="${options.inputFile}"`;
    if (options.allowTests) logMessage += " allowTests=true";
    if (options.contextLines) logMessage += ` contextLines=${options.contextLines}`;
    if (options.format) logMessage += ` format=${options.format}`;
    if (options.json) logMessage += " json=true";
    console.error(logMessage);
  }
  const command = `${binaryPath} extract ${cliArgs.join(" ")}`;
  try {
    const { stdout, stderr } = await execAsync3(command);
    if (stderr) {
      console.error(`stderr: ${stderr}`);
    }
    let tokenUsage = {
      requestTokens: 0,
      responseTokens: 0,
      totalTokens: 0
    };
    if (options.files && Array.isArray(options.files)) {
      tokenUsage.requestTokens = options.files.join(" ").length / 4;
    } else if (options.inputFile) {
      tokenUsage.requestTokens = options.inputFile.length / 4;
    }
    if (stdout.includes("Total tokens returned:")) {
      const tokenMatch = stdout.match(/Total tokens returned: (\d+)/);
      if (tokenMatch && tokenMatch[1]) {
        tokenUsage.responseTokens = parseInt(tokenMatch[1], 10);
        tokenUsage.totalTokens = tokenUsage.requestTokens + tokenUsage.responseTokens;
      }
    }
    let output = stdout;
    if (!output.includes("Token Usage:")) {
      output += `
Token Usage:
  Request tokens: ${tokenUsage.requestTokens}
  Response tokens: ${tokenUsage.responseTokens}
  Total tokens: ${tokenUsage.totalTokens}
`;
    }
    if (options.json || options.format === "json") {
      try {
        const jsonOutput = JSON.parse(stdout);
        if (!jsonOutput.token_usage) {
          jsonOutput.token_usage = {
            request_tokens: tokenUsage.requestTokens,
            response_tokens: tokenUsage.responseTokens,
            total_tokens: tokenUsage.totalTokens
          };
        }
        return jsonOutput;
      } catch (error) {
        console.error("Error parsing JSON output:", error);
        return output;
      }
    }
    return output;
  } catch (error) {
    const errorMessage = `Error executing extract command: ${error.message}
Command: ${command}`;
    throw new Error(errorMessage);
  }
}
var execAsync3, EXTRACT_FLAG_MAP;
var init_extract = __esm({
  "src/extract.js"() {
    "use strict";
    init_utils();
    execAsync3 = promisify4(exec4);
    EXTRACT_FLAG_MAP = {
      allowTests: "--allow-tests",
      contextLines: "--context",
      format: "--format",
      inputFile: "--input-file"
    };
  }
});

// src/tools/common.js
import { z } from "zod";
function parseXmlToolCall(xmlString) {
  const toolMatch = xmlString.match(/<([a-zA-Z0-9_]+)>([\s\S]*?)<\/\1>/);
  if (!toolMatch) {
    return null;
  }
  const toolName = toolMatch[1];
  const innerContent = toolMatch[2];
  const params = {};
  const paramRegex = /<([a-zA-Z0-9_]+)>([\s\S]*?)<\/\1>/g;
  let paramMatch;
  while ((paramMatch = paramRegex.exec(innerContent)) !== null) {
    const paramName = paramMatch[1];
    let paramValue = paramMatch[2].trim();
    if (paramValue.toLowerCase() === "true") {
      paramValue = true;
    } else if (paramValue.toLowerCase() === "false") {
      paramValue = false;
    } else if (!isNaN(paramValue) && paramValue.trim() !== "") {
      const num = Number(paramValue);
      if (Number.isFinite(num)) {
        paramValue = num;
      }
    }
    params[paramName] = paramValue;
  }
  if (toolName === "attempt_completion") {
    const resultMatch = innerContent.match(/<result>([\s\S]*?)<\/result>/);
    if (resultMatch) {
      params["result"] = resultMatch[1].trim();
    }
    const commandMatch = innerContent.match(/<command>([\s\S]*?)<\/command>/);
    if (commandMatch) {
      params["command"] = commandMatch[1].trim();
    }
  }
  return { toolName, params };
}
var searchSchema, querySchema, extractSchema, attemptCompletionSchema, searchToolDefinition, queryToolDefinition, extractToolDefinition, attemptCompletionToolDefinition, searchDescription, queryDescription, extractDescription;
var init_common = __esm({
  "src/tools/common.js"() {
    "use strict";
    searchSchema = z.object({
      query: z.string().describe("Search query with Elasticsearch syntax. Use + for important terms."),
      path: z.string().optional().default(".").describe('Path to search in. For dependencies use "go:github.com/owner/repo", "js:package_name", or "rust:cargo_name" etc.'),
      allow_tests: z.boolean().optional().default(false).describe("Allow test files in search results"),
      exact: z.boolean().optional().default(false).describe("Perform exact search without tokenization (case-insensitive)"),
      maxResults: z.number().optional().describe("Maximum number of results to return"),
      maxTokens: z.number().optional().default(1e4).describe("Maximum number of tokens to return"),
      language: z.string().optional().describe("Limit search to files of a specific programming language")
    });
    querySchema = z.object({
      pattern: z.string().describe("AST pattern to search for. Use $NAME for variable names, $$$PARAMS for parameter lists, etc."),
      path: z.string().optional().default(".").describe("Path to search in"),
      language: z.string().optional().default("rust").describe("Programming language to use for parsing"),
      allow_tests: z.boolean().optional().default(false).describe("Allow test files in search results")
    });
    extractSchema = z.object({
      file_path: z.string().optional().describe("Path to the file to extract from. Can include line numbers or symbol names"),
      input_content: z.string().optional().describe("Text content to extract file paths from"),
      line: z.number().optional().describe("Start line number to extract a specific code block"),
      end_line: z.number().optional().describe("End line number for extracting a range of lines"),
      allow_tests: z.boolean().optional().default(false).describe("Allow test files and test code blocks"),
      context_lines: z.number().optional().default(10).describe("Number of context lines to include"),
      format: z.string().optional().default("plain").describe("Output format (plain, markdown, json, color)")
    });
    attemptCompletionSchema = z.object({
      result: z.string().describe("The final result of the task. Formulate this result in a way that is final and does not require further input from the user. Do not end your result with questions or offers for further assistance."),
      command: z.string().optional().describe("A CLI command to execute to show a live demo of the result to the user (e.g., `open index.html`). Do not use commands like `echo` or `cat` that merely print text.")
    });
    searchToolDefinition = `
## search
Description: Search code in the repository using Elasticsearch query syntax (except field based queries, e.g. "filename:..." NOT supported).

You need to focus on main keywords when constructing the query, and always use elastic search syntax like OR AND and brackets to group keywords.
Parameters:
- query: (required) Search query with Elasticsearch syntax. You can use + for important terms, and - for negation.
- path: (required) Path to search in. All dependencies located in /dep folder, under language sub folders, like this: "/dep/go/github.com/owner/repo", "/dep/js/package_name", or "/dep/rust/cargo_name" etc. YOU SHOULD ALWAYS provide FULL PATH when searching dependencies, including depency name.
- allow_tests: (optional, default: false) Allow test files in search results (true/false).
- exact: (optional, default: false) Perform exact pricise search. Use it when you already know function or struct name, or some other code block, and want exact match.
- maxResults: (optional) Maximum number of results to return (number).
- maxTokens: (optional, default: 10000) Maximum number of tokens to return (number).
- language: (optional) Limit search to files of a specific programming language (e.g., 'rust', 'js', 'python', 'go' etc.).


Usage Example:

<examples>

User: How to calculate the total amount in the payments module?
<search>
<query>calculate AND payment</query>
<path>src/utils</path>
<allow_tests>false</allow_tests>
</search>

User: How do the user authentication and authorization work?
<search>
<query>+user and (authentification OR authroization OR authz)</query>
<path>.</path>
<allow_tests>true</allow_tests>
<language>go</language>
</search>

User: Find all react imports in the project.
<search>
<query>import { react }</query>
<path>.</path>
<exact>true</exact>
<language>js</language>
</search>


User: Find how decompoud library works?
<search>
<query>import { react }</query>
<path>/dep/rust/decompound</path>
<language>rust</language>
</search>

</examples>
`;
    queryToolDefinition = `
## query
Description: Search code using ast-grep structural pattern matching. Use this tool to find specific code structures like functions, classes, or methods.
Parameters:
- pattern: (required) AST pattern to search for. Use $NAME for variable names, $$$PARAMS for parameter lists, etc.
- path: (optional, default: '.') Path to search in.
- language: (optional, default: 'rust') Programming language to use for parsing.
- allow_tests: (optional, default: false) Allow test files in search results (true/false).
Usage Example:

<examples>

<query>
<pattern>function $FUNC($$$PARAMS) { $$$BODY }</pattern>
<path>src/parser</path>
<language>js</language>
</query>

</examples>
`;
    extractToolDefinition = `
## extract
Description: Extract code blocks from files based on file paths and optional line numbers. Use this tool to see complete context after finding relevant files. It can be used to read full files as well. 
Full file extraction should be the LAST RESORT! Always prefer search.

Parameters:
- file_path: (required) Path to the file to extract from. Can include line numbers or symbol names (e.g., 'src/main.rs:10-20', 'src/utils.js#myFunction').
- line: (optional) Start line number to extract a specific code block. Use with end_line for ranges.
- end_line: (optional) End line number for extracting a range of lines.
- allow_tests: (optional, default: false) Allow test files and test code blocks (true/false).
Usage Example:

<examples>

User: How RankManager works
<extract>
<file_path>src/search/ranking.rs#RankManager</file_path>
</extract>

User: Lets read the whole file
<extract>
<file_path>src/search/ranking.rs</file_path>
</extract>

User: Read the first 10 lines of the file
<extract>
<file_path>src/search/ranking.rs</file_path>
<line>1</line>
<end_line>10</end_line>
</extract>

User: Read file inside the dependency
<extract>
<file_path>/dep/go/github.com/gorilla/mux/router.go</file_path>
</extract>


</examples>
`;
    attemptCompletionToolDefinition = `
## attempt_completion
Description: Use this tool ONLY when the task is fully complete and you have received confirmation of success for all previous tool uses. Presents the final result to the user.
Parameters:
- result: (required) The final result of the task. Formulate this result concisely and definitively. Do not end with questions or offers for further assistance. Ensure that answer fully addresses the user's request, and a clear and detailed maneer.
- command: (optional) A CLI command to demonstrate the result (e.g., 'open index.html'). Avoid simple print commands like 'echo'.
Usage Example:
<attempt_completion>
<result>I have refactored the search module according to the requirements and verified the tests pass.</result>
<command>cargo test --lib</command>
</attempt_completion>
`;
    searchDescription = "Search code in the repository using Elasticsearch-like query syntax. Use this tool first for any code-related questions.";
    queryDescription = "Search code using ast-grep structural pattern matching. Use this tool to find specific code structures like functions, classes, or methods.";
    extractDescription = "Extract code blocks from files based on file paths and optional line numbers. Use this tool to see complete context after finding relevant files.";
  }
});

// src/tools/vercel.js
import { tool } from "ai";
var searchTool, queryTool, extractTool;
var init_vercel = __esm({
  "src/tools/vercel.js"() {
    "use strict";
    init_search();
    init_query();
    init_extract();
    init_common();
    searchTool = (options = {}) => {
      const { sessionId, maxTokens = 1e4, debug = false } = options;
      return tool({
        name: "search",
        description: searchDescription,
        parameters: searchSchema,
        execute: async ({ query: searchQuery, path: path6, allow_tests, exact, maxTokens: paramMaxTokens, language }) => {
          try {
            const effectiveMaxTokens = paramMaxTokens || maxTokens;
            let searchPath = path6 || options.defaultPath || ".";
            if ((searchPath === "." || searchPath === "./") && options.defaultPath) {
              if (debug) {
                console.error(`Using default path "${options.defaultPath}" instead of "${searchPath}"`);
              }
              searchPath = options.defaultPath;
            }
            if (debug) {
              console.error(`Executing search with query: "${searchQuery}", path: "${searchPath}", exact: ${exact ? "true" : "false"}, language: ${language || "all"}, session: ${sessionId || "none"}`);
            }
            const results = await search({
              query: searchQuery,
              path: searchPath,
              allow_tests,
              exact,
              json: false,
              maxTokens: effectiveMaxTokens,
              session: sessionId,
              // Pass session ID if provided
              language
              // Pass language parameter if provided
            });
            return results;
          } catch (error) {
            console.error("Error executing search command:", error);
            return `Error executing search command: ${error.message}`;
          }
        }
      });
    };
    queryTool = (options = {}) => {
      const { debug = false } = options;
      return tool({
        name: "query",
        description: queryDescription,
        parameters: querySchema,
        execute: async ({ pattern, path: path6, language, allow_tests }) => {
          try {
            let queryPath = path6 || options.defaultPath || ".";
            if ((queryPath === "." || queryPath === "./") && options.defaultPath) {
              if (debug) {
                console.error(`Using default path "${options.defaultPath}" instead of "${queryPath}"`);
              }
              queryPath = options.defaultPath;
            }
            if (debug) {
              console.error(`Executing query with pattern: "${pattern}", path: "${queryPath}", language: ${language || "auto"}`);
            }
            const results = await query({
              pattern,
              path: queryPath,
              language,
              allow_tests,
              json: false
            });
            return results;
          } catch (error) {
            console.error("Error executing query command:", error);
            return `Error executing query command: ${error.message}`;
          }
        }
      });
    };
    extractTool = (options = {}) => {
      const { debug = false } = options;
      return tool({
        name: "extract",
        description: extractDescription,
        parameters: extractSchema,
        execute: async ({ file_path, input_content, line, end_line, allow_tests, context_lines, format }) => {
          try {
            let extractPath = options.defaultPath || ".";
            if ((extractPath === "." || extractPath === "./") && options.defaultPath) {
              if (debug) {
                console.error(`Using default path "${options.defaultPath}" instead of "${extractPath}"`);
              }
              extractPath = options.defaultPath;
            }
            if (debug) {
              if (file_path) {
                console.error(`Executing extract with file: "${file_path}", path: "${extractPath}", context lines: ${context_lines || 10}`);
              } else if (input_content) {
                console.error(`Executing extract with input content, path: "${extractPath}", context lines: ${context_lines || 10}`);
              }
            }
            let tempFilePath = null;
            let extractOptions = { path: extractPath };
            if (input_content) {
              const { writeFileSync, unlinkSync } = await import("fs");
              const { join } = await import("path");
              const { tmpdir } = await import("os");
              const { randomUUID: randomUUID6 } = await import("crypto");
              tempFilePath = join(tmpdir(), `probe-extract-${randomUUID6()}.txt`);
              writeFileSync(tempFilePath, input_content);
              if (debug) {
                console.error(`Created temporary file for input content: ${tempFilePath}`);
              }
              extractOptions = {
                inputFile: tempFilePath,
                allowTests: allow_tests,
                contextLines: context_lines,
                format
              };
            } else if (file_path) {
              const files = [file_path];
              extractOptions = {
                files,
                allowTests: allow_tests,
                contextLines: context_lines,
                format
              };
            } else {
              throw new Error("Either file_path or input_content must be provided");
            }
            const results = await extract(extractOptions);
            if (tempFilePath) {
              const { unlinkSync } = await import("fs");
              try {
                unlinkSync(tempFilePath);
                if (debug) {
                  console.error(`Removed temporary file: ${tempFilePath}`);
                }
              } catch (cleanupError) {
                console.error(`Warning: Failed to remove temporary file: ${cleanupError.message}`);
              }
            }
            return results;
          } catch (error) {
            console.error("Error executing extract command:", error);
            return `Error executing extract command: ${error.message}`;
          }
        }
      });
    };
  }
});

// src/tools/langchain.js
var init_langchain = __esm({
  "src/tools/langchain.js"() {
    "use strict";
    init_search();
    init_query();
    init_extract();
    init_common();
  }
});

// src/tools/system-message.js
var DEFAULT_SYSTEM_MESSAGE;
var init_system_message = __esm({
  "src/tools/system-message.js"() {
    "use strict";
    DEFAULT_SYSTEM_MESSAGE = `[Persona & Objective]

You are Probe, a specialized code intelligence assistant. Your objective is to accurately answer questions about multi-language codebases by effectively using your available tools: \`search\`, \`query\`, and \`extract\`.

[Core Workflow & Principles]

1.  **Tool-First Always:** Immediately use tools for any code-related query. Do not guess or use general knowledge.
2.  **Mandatory Path:** ALL tool calls (\`search\`, \`query\`, \`extract\`) MUST include the \`path\` argument. Use \`"."\` for the whole project, specific directories/files (e.g., \`"src/api"\`, \`"pkg/utils/helpers.py"\`), or dependency syntax (e.g., \`"go:github.com/gin-gonic/gin"\`, \`"js:@ai-sdk/anthropic"\`, \`"rust:serde"\`).
3.  **Start with \`search\`:**
    *   **Keywords are Key:** Formulate queries like you would in Elasticsearch. Use specific keywords, boolean operators (\`AND\`, \`OR\`, \`NOT\`), and exact phrases (\`""\`). This is NOT a simple text search.
    *   **Iterate if Needed:** If initial results are too broad or insufficient, **repeat the exact same \`search\` query** to get the next page of results (pagination). Reuse the \`sessionID\` if provided by the previous identical search. If results are irrelevant, refine the keywords (add terms, use \`NOT\`, try synonyms).
4.  **Analyze & Refine:** Review \`search\` results (snippets, file paths).
    *   Use \`query\` if you need code based on *structure* (AST patterns) within specific files/directories identified by \`search\`.
    *   Use \`extract\` if \`search\` or \`query\` identified the exact location (file, symbol, line range) and you need the full definition or more context.
5.  **Synthesize & Cite:** Construct the answer *only* from tool outputs. ALWAYS cite the specific file paths and relevant locations (symbols, line numbers) found. Adapt detail to the likely user role (developer vs. PM).
6.  **Clarify Sparingly:** If an initial \`search\` attempt completely fails due to ambiguity, ask a *specific* question to guide the next search. Don't ask before trying a search first.

[Tool Reference]

*   \`search\`
    *   **Purpose:** Find relevant code snippets/files using keyword-based search (like Elasticsearch). Locate named symbols. Search project code or dependencies.
    *   **Syntax:** \`query\` (Elasticsearch-like string: keywords, \`AND\`, \`OR\`, \`NOT\`, \`""\` exact phrases), \`path\` (Mandatory: \`"."\`, \`"path/to/dir"\`, \`"path/to/file.ext"\`, \`"go:pkg"\`, \`"js:npm_module"\`, \`"rust:crate"\`), \`exact\` (Optional: Set to \`true\` for case-insensitive exact matching without tokenization).
    *   **Features:** Returns snippets/paths. Supports pagination (repeat query). Caching via \`sessionID\` (reuse if returned). Use \`exact\` flag when you need precise matching of terms.
*   \`query\`
    *   **Purpose:** Find code by its *structure* (AST patterns) within specific files/directories, typically after \`search\`.
    *   **Syntax:** \`pattern\` (ast-grep pattern), \`language\` (e.g., "go", "python").
    *   **Mandatory Argument:** \`path\` (file or directory path, e.g., \`"src/services"\`, \`"app/main.py"\`).
*   \`extract\`
    *   **Purpose:** Retrieve specific code blocks or entire files *after* \`search\` or \`query\` identifies the target.
    *   **Syntax:** Optional \`#symbol\` (e.g., \`#MyClass\`), \`#Lstart-Lend\` (e.g., \`#L50-L75\`).
    *   **Mandatory Argument:** \`path\` (specific file path, e.g., \`"src/utils/helpers.go"\`, or dependency file like \`"go:github.com/gin-gonic/gin/context.go"\`).

[Examples]

*   **Example 1: Finding a Specific Function Definition**
    *   User: "Show me the code for the \`calculate_total\` function in our payments module."
    *   Probe Action 1: \`search\` query: \`"calculate_total"\`, path: \`"src/payments"\` (Targeted search in the likely directory)
    *   (Analysis: Search returns a clear hit in \`src/payments/logic.py\`.)
    *   Probe Action 2: \`extract\` path: \`"src/payments/logic.py#calculate_total"\`
    *   (Response: Provide the extracted function code, citing \`src/payments/logic.py#calculate_total\`.)

*   **Example 2: Investigating Initialization**
    *   User: "Where is the primary configuration for the Redis cache loaded?"
    *   Probe Action 1: \`search\` query: \`redis AND (config OR load OR init OR setup) NOT test\`, path: \`"."\`
    *   (Analysis: Results point towards \`pkg/cache/redis.go\` and a function \`LoadRedisConfig\`.)
    *   Probe Action 2: \`extract\` path: \`"pkg/cache/redis.go#LoadRedisConfig"\`
    *   (Response: Explain config loading based on the extracted \`LoadRedisConfig\` function, citing \`pkg/cache/redis.go#LoadRedisConfig\`.)

*   **Example 3: Understanding Usage of a Dependency Feature**
    *   User: "How are we using the \`createAnthropic\` function from the \`@ai-sdk/anthropic\` library?"
    *   Probe Action 1: \`search\` query: \`"createAnthropic"\`, path: \`"."\` (Search project code for usage)
    *   (Analysis: Find usage in \`src/ai/providers.ts\`. Want to understand the library function itself better.)
    *   Probe Action 2: \`search\` query: \`"createAnthropic"\`, path: \`"js:@ai-sdk/anthropic"\` (Search within the specific dependency)
    *   (Analysis: Search locates the definition within the dependency code, e.g., \`node_modules/@ai-sdk/anthropic/dist/index.js\` or similar mapped path.)
    *   Probe Action 3: \`extract\` path: \`"js:@ai-sdk/anthropic/dist/index.js#createAnthropic"\` (Extract the specific function *from the dependency*. Note: Actual file path within dependency might vary, use the one found by search).
    *   (Response: Show how \`createAnthropic\` is used in \`src/ai/providers.ts\`, and explain its purpose based on the extracted definition from the \`@ai-sdk/anthropic\` library, citing both files.)

*   **Example 4: Exploring Error Handling Patterns**
    *   User: "What's the standard way errors are wrapped or handled in our Go backend services?"
    *   Probe Action 1: \`search\` query: \`error AND (wrap OR handle OR new) AND lang:go NOT test\`, path: \`"service/"\` (Focus on service directories)
    *   (Analysis: Many results. See frequent use of \`fmt.Errorf\` and a custom \`errors.Wrap\` in several files like \`service/user/handler.go\`.)
    *   Probe Action 2: \`search\` query: \`import AND "pkg/errors"\`, path: \`"service/"\` (Check where a potential custom error package is used)
    *   (Analysis: Confirms \`pkg/errors\` is widely used.)
    *   Probe Action 3: \`query\` language: \`go\`, pattern: \`errors.Wrap($$$)\`, path: \`"service/"\` (Find structural usage of the custom wrapper)
    *   (Response: Summarize error handling: Mention standard \`fmt.Errorf\` and the prevalent use of a custom \`errors.Wrap\` function from \`pkg/errors\`, providing examples from locations found by search/query like \`service/user/handler.go\`.)`;
  }
});

// src/tools/index.js
var tools;
var init_tools = __esm({
  "src/tools/index.js"() {
    "use strict";
    init_vercel();
    init_langchain();
    init_common();
    init_system_message();
    init_vercel();
    init_system_message();
    tools = {
      searchTool: searchTool(),
      queryTool: queryTool(),
      extractTool: extractTool(),
      DEFAULT_SYSTEM_MESSAGE
    };
  }
});

// src/utils/file-lister.js
import fs4 from "fs";
import path4 from "path";
import { promisify as promisify5 } from "util";
import { exec as exec5 } from "child_process";
async function listFilesByLevel(options) {
  const {
    directory,
    maxFiles = 100,
    respectGitignore = true
  } = options;
  if (!fs4.existsSync(directory)) {
    throw new Error(`Directory does not exist: ${directory}`);
  }
  const gitDirExists = fs4.existsSync(path4.join(directory, ".git"));
  if (gitDirExists && respectGitignore) {
    try {
      return await listFilesUsingGit(directory, maxFiles);
    } catch (error) {
      console.error(`Warning: Failed to use git ls-files: ${error.message}`);
      console.error("Falling back to manual file listing");
    }
  }
  return await listFilesByLevelManually(directory, maxFiles, respectGitignore);
}
async function listFilesUsingGit(directory, maxFiles) {
  const { stdout } = await execAsync4("git ls-files", { cwd: directory });
  const files = stdout.split("\n").filter(Boolean);
  const sortedFiles = files.sort((a, b) => {
    const depthA = a.split(path4.sep).length;
    const depthB = b.split(path4.sep).length;
    return depthA - depthB;
  });
  return sortedFiles.slice(0, maxFiles);
}
async function listFilesByLevelManually(directory, maxFiles, respectGitignore) {
  let ignorePatterns = [];
  if (respectGitignore) {
    ignorePatterns = loadGitignorePatterns(directory);
  }
  const result = [];
  const queue = [{ dir: directory, level: 0 }];
  while (queue.length > 0 && result.length < maxFiles) {
    const { dir, level } = queue.shift();
    try {
      const entries = fs4.readdirSync(dir, { withFileTypes: true });
      const files = entries.filter((entry) => entry.isFile());
      for (const file of files) {
        if (result.length >= maxFiles) break;
        const filePath = path4.join(dir, file.name);
        const relativePath = path4.relative(directory, filePath);
        if (shouldIgnore(relativePath, ignorePatterns)) continue;
        result.push(relativePath);
      }
      const dirs = entries.filter((entry) => entry.isDirectory());
      for (const subdir of dirs) {
        const subdirPath = path4.join(dir, subdir.name);
        const relativeSubdirPath = path4.relative(directory, subdirPath);
        if (shouldIgnore(relativeSubdirPath, ignorePatterns)) continue;
        if (subdir.name === "node_modules" || subdir.name === ".git") continue;
        queue.push({ dir: subdirPath, level: level + 1 });
      }
    } catch (error) {
      console.error(`Warning: Could not read directory ${dir}: ${error.message}`);
    }
  }
  return result;
}
function loadGitignorePatterns(directory) {
  const gitignorePath = path4.join(directory, ".gitignore");
  if (!fs4.existsSync(gitignorePath)) {
    return [];
  }
  try {
    const content = fs4.readFileSync(gitignorePath, "utf8");
    return content.split("\n").map((line) => line.trim()).filter((line) => line && !line.startsWith("#"));
  } catch (error) {
    console.error(`Warning: Could not read .gitignore: ${error.message}`);
    return [];
  }
}
function shouldIgnore(filePath, ignorePatterns) {
  if (!ignorePatterns.length) return false;
  for (const pattern of ignorePatterns) {
    if (pattern === filePath) return true;
    if (pattern.endsWith("/") && filePath.startsWith(pattern)) return true;
    if (pattern.startsWith("*.") && filePath.endsWith(pattern.substring(1))) return true;
    if (pattern.startsWith("*") && filePath.endsWith(pattern.substring(1))) return true;
    if (pattern.endsWith("*") && filePath.startsWith(pattern.substring(0, pattern.length - 1))) return true;
  }
  return false;
}
var execAsync4;
var init_file_lister = __esm({
  "src/utils/file-lister.js"() {
    "use strict";
    execAsync4 = promisify5(exec5);
  }
});

// src/index.js
var init_index = __esm({
  "src/index.js"() {
    "use strict";
    init_search();
    init_query();
    init_extract();
    init_utils();
    init_tools();
    init_file_lister();
    init_system_message();
    init_common();
    init_vercel();
    init_ProbeAgent();
  }
});

// src/agent/tools.js
import { randomUUID } from "crypto";
function createTools(configOptions) {
  return {
    searchTool: searchTool(configOptions),
    queryTool: queryTool(configOptions),
    extractTool: extractTool(configOptions)
  };
}
function parseXmlToolCallWithThinking(xmlString) {
  const thinkingMatch = xmlString.match(/<thinking>([\s\S]*?)<\/thinking>/);
  const thinkingContent = thinkingMatch ? thinkingMatch[1].trim() : null;
  const cleanedXmlString = xmlString.replace(/<thinking>[\s\S]*?<\/thinking>/g, "").trim();
  const parsedTool = parseXmlToolCall(cleanedXmlString);
  if (process.env.DEBUG === "1" && thinkingContent) {
    console.log(`[DEBUG] AI Thinking Process:
${thinkingContent}`);
  }
  return parsedTool;
}
var implementToolDefinition, listFilesToolDefinition, searchFilesToolDefinition;
var init_tools2 = __esm({
  "src/agent/tools.js"() {
    "use strict";
    init_index();
    implementToolDefinition = `
## implement
Description: Implement a given task. Can modify files. Can be used ONLY if task explicitly stated that something requires modification or implementation.

Parameters:
- task: (required) The task description. Should be as detailed as possible, ideally pointing to exact files which needs be modified or created.
- autoCommits: (optional) Whether to enable auto-commits in aider. Default is false.

Usage Example:

<examples>

User: Can you implement a function to calculate Fibonacci numbers in main.js?
<implement>
<task>Implement a recursive function to calculate the nth Fibonacci number in main.js</task>
</implement>

User: Can you implement a function to calculate Fibonacci numbers in main.js with auto-commits?
<implement>
<task>Implement a recursive function to calculate the nth Fibonacci number in main.js</task>
<autoCommits>true</autoCommits>
</implement>

</examples>
`;
    listFilesToolDefinition = `
## listFiles
Description: List files and directories in a specified location.

Parameters:
- directory: (optional) The directory path to list files from. Defaults to current directory if not specified.

Usage Example:

<examples>

User: Can you list the files in the src directory?
<listFiles>
<directory>src</directory>
</listFiles>

User: What files are in the current directory?
<listFiles>
</listFiles>

</examples>
`;
    searchFilesToolDefinition = `
## searchFiles
Description: Find files with name matching a glob pattern with recursive search capability.

Parameters:
- pattern: (required) The glob pattern to search for (e.g., "**/*.js", "*.md").
- directory: (optional) The directory to search in. Defaults to current directory if not specified.
- recursive: (optional) Whether to search recursively. Defaults to true.

Usage Example:

<examples>

User: Can you find all JavaScript files in the project?
<searchFiles>
<pattern>**/*.js</pattern>
</searchFiles>

User: Find all markdown files in the docs directory, but only at the top level.
<searchFiles>
<pattern>*.md</pattern>
<directory>docs</directory>
<recursive>false</recursive>
</searchFiles>

</examples>
`;
  }
});

// src/agent/probeTool.js
import { exec as exec6 } from "child_process";
import { promisify as promisify6 } from "util";
import { randomUUID as randomUUID2 } from "crypto";
import { EventEmitter } from "events";
import fs5 from "fs";
import { promises as fsPromises } from "fs";
import path5 from "path";
import { glob } from "glob";
function isSessionCancelled(sessionId) {
  return activeToolExecutions.get(sessionId)?.cancelled || false;
}
function registerToolExecution(sessionId) {
  if (!sessionId) return;
  if (!activeToolExecutions.has(sessionId)) {
    activeToolExecutions.set(sessionId, { cancelled: false });
  } else {
    activeToolExecutions.get(sessionId).cancelled = false;
  }
}
function clearToolExecutionData(sessionId) {
  if (!sessionId) return;
  if (activeToolExecutions.has(sessionId)) {
    activeToolExecutions.delete(sessionId);
    if (process.env.DEBUG === "1") {
      console.log(`Cleared tool execution data for session: ${sessionId}`);
    }
  }
}
function createWrappedTools(baseTools) {
  const wrappedTools = {};
  if (baseTools.searchTool) {
    wrappedTools.searchToolInstance = wrapToolWithEmitter(
      baseTools.searchTool,
      "search",
      baseTools.searchTool.execute
    );
  }
  if (baseTools.queryTool) {
    wrappedTools.queryToolInstance = wrapToolWithEmitter(
      baseTools.queryTool,
      "query",
      baseTools.queryTool.execute
    );
  }
  if (baseTools.extractTool) {
    wrappedTools.extractToolInstance = wrapToolWithEmitter(
      baseTools.extractTool,
      "extract",
      baseTools.extractTool.execute
    );
  }
  return wrappedTools;
}
var toolCallEmitter, activeToolExecutions, wrapToolWithEmitter, listFilesTool, searchFilesTool, listFilesToolInstance, searchFilesToolInstance;
var init_probeTool = __esm({
  "src/agent/probeTool.js"() {
    "use strict";
    init_index();
    toolCallEmitter = new EventEmitter();
    activeToolExecutions = /* @__PURE__ */ new Map();
    wrapToolWithEmitter = (tool2, toolName, baseExecute) => {
      return {
        ...tool2,
        // Spread schema, description etc.
        execute: async (params) => {
          const debug = process.env.DEBUG === "1";
          const toolSessionId = params.sessionId || randomUUID2();
          if (debug) {
            console.log(`[DEBUG] probeTool: Executing ${toolName} for session ${toolSessionId}`);
          }
          registerToolExecution(toolSessionId);
          let executionError = null;
          let result = null;
          try {
            const toolCallStartData = {
              timestamp: (/* @__PURE__ */ new Date()).toISOString(),
              name: toolName,
              args: params,
              status: "started"
            };
            if (debug) {
              console.log(`[DEBUG] probeTool: Emitting toolCallStart:${toolSessionId}`);
            }
            toolCallEmitter.emit(`toolCall:${toolSessionId}`, toolCallStartData);
            if (isSessionCancelled(toolSessionId)) {
              if (debug) {
                console.log(`Tool execution cancelled before start for ${toolSessionId}`);
              }
              throw new Error(`Tool execution cancelled for session ${toolSessionId}`);
            }
            result = await baseExecute(params);
            if (isSessionCancelled(toolSessionId)) {
              if (debug) {
                console.log(`Tool execution cancelled after completion for ${toolSessionId}`);
              }
              throw new Error(`Tool execution cancelled for session ${toolSessionId}`);
            }
          } catch (error) {
            executionError = error;
            if (debug) {
              console.error(`[DEBUG] probeTool: Error in ${toolName}:`, error);
            }
          }
          if (executionError) {
            const toolCallErrorData = {
              timestamp: (/* @__PURE__ */ new Date()).toISOString(),
              name: toolName,
              args: params,
              error: executionError.message || "Unknown error",
              status: "error"
            };
            if (debug) {
              console.log(`[DEBUG] probeTool: Emitting toolCall:${toolSessionId} (error)`);
            }
            toolCallEmitter.emit(`toolCall:${toolSessionId}`, toolCallErrorData);
            throw executionError;
          } else {
            if (isSessionCancelled(toolSessionId)) {
              if (process.env.DEBUG === "1") {
                console.log(`Tool execution finished but session was cancelled for ${toolSessionId}`);
              }
              throw new Error(`Tool execution cancelled for session ${toolSessionId}`);
            }
            const toolCallData = {
              timestamp: (/* @__PURE__ */ new Date()).toISOString(),
              name: toolName,
              args: params,
              // Safely preview result
              resultPreview: typeof result === "string" ? result.length > 200 ? result.substring(0, 200) + "..." : result : result ? JSON.stringify(result).substring(0, 200) + "..." : "No Result",
              status: "completed"
            };
            if (debug) {
              console.log(`[DEBUG] probeTool: Emitting toolCall:${toolSessionId} (completed)`);
            }
            toolCallEmitter.emit(`toolCall:${toolSessionId}`, toolCallData);
            return result;
          }
        }
      };
    };
    listFilesTool = {
      execute: async (params) => {
        const { directory = "." } = params;
        try {
          const files = await listFilesByLevel({
            directory,
            maxFiles: 100,
            respectGitignore: !process.env.PROBE_NO_GITIGNORE || process.env.PROBE_NO_GITIGNORE === "",
            cwd: process.cwd()
          });
          return files;
        } catch (error) {
          throw new Error(`Failed to list files: ${error.message}`);
        }
      }
    };
    searchFilesTool = {
      execute: async (params) => {
        const { pattern, directory = ".", recursive = true } = params;
        if (!pattern) {
          throw new Error("Pattern is required for file search");
        }
        try {
          const options = {
            cwd: directory,
            ignore: ["node_modules/**", ".git/**"],
            absolute: false
          };
          if (!recursive) {
            options.deep = 1;
          }
          const files = await glob(pattern, options);
          return files;
        } catch (error) {
          throw new Error(`Failed to search files: ${error.message}`);
        }
      }
    };
    listFilesToolInstance = wrapToolWithEmitter(listFilesTool, "listFiles", listFilesTool.execute);
    searchFilesToolInstance = wrapToolWithEmitter(searchFilesTool, "searchFiles", searchFilesTool.execute);
  }
});

// src/agent/schemaUtils.js
function cleanSchemaResponse(response) {
  if (!response || typeof response !== "string") {
    return response;
  }
  const trimmed = response.trim();
  const firstBracket = Math.min(
    trimmed.indexOf("{") >= 0 ? trimmed.indexOf("{") : Infinity,
    trimmed.indexOf("[") >= 0 ? trimmed.indexOf("[") : Infinity
  );
  const lastBracket = Math.max(
    trimmed.lastIndexOf("}"),
    trimmed.lastIndexOf("]")
  );
  if (firstBracket < Infinity && lastBracket >= 0 && firstBracket < lastBracket) {
    const beforeFirstBracket = trimmed.substring(0, firstBracket).trim();
    if (beforeFirstBracket === "" || beforeFirstBracket.match(/^```\w*$/)) {
      return trimmed.substring(firstBracket, lastBracket + 1);
    }
  }
  return response;
}
function validateJsonResponse(response) {
  try {
    const parsed = JSON.parse(response);
    return { isValid: true, parsed };
  } catch (error) {
    return { isValid: false, error: error.message };
  }
}
function validateXmlResponse(response) {
  const xmlPattern = /<\/?[\w\s="'.-]+>/g;
  const tags = response.match(xmlPattern);
  if (!tags) {
    return { isValid: false, error: "No XML tags found" };
  }
  if (response.includes("<") && response.includes(">")) {
    return { isValid: true };
  }
  return { isValid: false, error: "Invalid XML structure" };
}
function processSchemaResponse(response, schema, options = {}) {
  const { validateJson = false, validateXml = false, debug = false } = options;
  const cleaned = cleanSchemaResponse(response);
  const result = { cleaned };
  if (debug) {
    result.debug = {
      originalLength: response.length,
      cleanedLength: cleaned.length,
      wasModified: response !== cleaned,
      removedContent: response !== cleaned ? {
        before: response.substring(0, 50) + (response.length > 50 ? "..." : ""),
        after: cleaned.substring(0, 50) + (cleaned.length > 50 ? "..." : "")
      } : null
    };
  }
  if (validateJson) {
    result.jsonValidation = validateJsonResponse(cleaned);
  }
  if (validateXml) {
    result.xmlValidation = validateXmlResponse(cleaned);
  }
  return result;
}
function isJsonSchema(schema) {
  if (!schema || typeof schema !== "string") {
    return false;
  }
  const trimmedSchema = schema.trim().toLowerCase();
  const jsonIndicators = [
    trimmedSchema.startsWith("{") && trimmedSchema.includes("}"),
    trimmedSchema.startsWith("[") && trimmedSchema.includes("]"),
    trimmedSchema.includes('"type"') && trimmedSchema.includes("object"),
    trimmedSchema.includes('"properties"'),
    trimmedSchema.includes("json"),
    trimmedSchema.includes("application/json")
  ];
  return jsonIndicators.some((indicator) => indicator);
}
function createJsonCorrectionPrompt(invalidResponse, schema, error, detailedError = "") {
  let prompt = `Your previous response is not valid JSON and cannot be parsed. Here's what you returned:

${invalidResponse}

Error: ${error}`;
  if (detailedError && detailedError !== error) {
    prompt += `
Detailed Error: ${detailedError}`;
  }
  prompt += `

Please correct your response to be valid JSON that matches this schema:
${schema}

Return ONLY the corrected JSON, with no additional text or markdown formatting.`;
  return prompt;
}
function extractMermaidFromMarkdown(response) {
  if (!response || typeof response !== "string") {
    return { diagrams: [], cleanedResponse: response };
  }
  const mermaidBlockRegex = /```mermaid([^\n]*)\n([\s\S]*?)```/gi;
  const diagrams = [];
  let match;
  while ((match = mermaidBlockRegex.exec(response)) !== null) {
    const attributes = match[1] ? match[1].trim() : "";
    const fullContent = match[2].trim();
    diagrams.push({
      content: fullContent,
      fullMatch: match[0],
      startIndex: match.index,
      endIndex: match.index + match[0].length,
      attributes
    });
  }
  return { diagrams, cleanedResponse: response };
}
async function validateMermaidDiagram(diagram) {
  if (!diagram || typeof diagram !== "string") {
    return { isValid: false, error: "Empty or invalid diagram input" };
  }
  try {
    const trimmedDiagram = diagram.trim();
    if (trimmedDiagram.includes("```")) {
      return {
        isValid: false,
        error: "Diagram contains markdown code block markers",
        detailedError: "Mermaid diagram should not contain ``` markers when extracted from markdown"
      };
    }
    const diagramPatterns = [
      { pattern: /^(graph|flowchart)/i, type: "flowchart" },
      { pattern: /^sequenceDiagram/i, type: "sequence" },
      { pattern: /^gantt/i, type: "gantt" },
      { pattern: /^pie/i, type: "pie" },
      { pattern: /^stateDiagram/i, type: "state" },
      { pattern: /^classDiagram/i, type: "class" },
      { pattern: /^erDiagram/i, type: "er" },
      { pattern: /^journey/i, type: "journey" },
      { pattern: /^gitgraph/i, type: "gitgraph" },
      { pattern: /^requirementDiagram/i, type: "requirement" },
      { pattern: /^C4Context/i, type: "c4" }
    ];
    let diagramType = null;
    for (const { pattern, type } of diagramPatterns) {
      if (pattern.test(trimmedDiagram)) {
        diagramType = type;
        break;
      }
    }
    if (!diagramType) {
      return {
        isValid: false,
        error: "Diagram does not match any known Mermaid diagram pattern",
        detailedError: "The diagram must start with a valid Mermaid diagram type (graph, sequenceDiagram, gantt, pie, etc.)"
      };
    }
    const lines = trimmedDiagram.split("\n");
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;
      if (diagramType === "flowchart") {
        const brackets = line.match(/\[[^\]]*$/);
        if (brackets) {
          return {
            isValid: false,
            error: `Unclosed bracket on line ${i + 1}`,
            detailedError: `Line "${line}" contains an unclosed bracket`
          };
        }
      }
      if (diagramType === "sequence") {
        if (line.includes("->>") && !line.includes(":")) {
          return {
            isValid: false,
            error: `Missing colon in sequence message on line ${i + 1}`,
            detailedError: `Line "${line}" appears to be a sequence message but is missing a colon`
          };
        }
      }
    }
    return {
      isValid: true,
      diagramType
    };
  } catch (error) {
    return {
      isValid: false,
      error: error.message || "Unknown mermaid parsing error",
      detailedError: error.stack || error.toString()
    };
  }
}
async function validateMermaidResponse(response) {
  const { diagrams } = extractMermaidFromMarkdown(response);
  if (diagrams.length === 0) {
    return { isValid: false, diagrams: [], errors: ["No mermaid diagrams found in response"] };
  }
  const results = [];
  const errors = [];
  for (let i = 0; i < diagrams.length; i++) {
    const diagramObj = diagrams[i];
    const validation = await validateMermaidDiagram(diagramObj.content);
    results.push({
      ...diagramObj,
      ...validation
    });
    if (!validation.isValid) {
      errors.push(`Diagram ${i + 1}: ${validation.error}`);
    }
  }
  const isValid = results.every((result) => result.isValid);
  return {
    isValid,
    diagrams: results,
    errors: errors.length > 0 ? errors : void 0
  };
}
async function validateAndFixMermaidResponse(response, options = {}) {
  const { schema, debug, path: path6, provider, model, tracer } = options;
  const validation = await validateMermaidResponse(response);
  if (validation.isValid) {
    return {
      ...validation,
      wasFixed: false,
      originalResponse: response,
      fixedResponse: response
    };
  }
  if (!validation.diagrams || validation.diagrams.length === 0) {
    return {
      ...validation,
      wasFixed: false,
      originalResponse: response,
      fixedResponse: response
    };
  }
  if (debug) {
    console.error("[DEBUG] Invalid Mermaid diagrams detected, starting specialized fixing agent...");
  }
  try {
    const mermaidFixer = new MermaidFixingAgent({
      path: path6,
      provider,
      model,
      debug,
      tracer
    });
    let fixedResponse = response;
    const fixingResults = [];
    const { diagrams } = extractMermaidFromMarkdown(response);
    const invalidDiagrams = validation.diagrams.map((result, index) => ({ ...result, originalIndex: index })).filter((result) => !result.isValid).reverse();
    for (const invalidDiagram of invalidDiagrams) {
      try {
        const fixedContent = await mermaidFixer.fixMermaidDiagram(
          invalidDiagram.content,
          [invalidDiagram.error],
          { diagramType: invalidDiagram.diagramType }
        );
        if (fixedContent && fixedContent !== invalidDiagram.content) {
          const originalDiagram = diagrams[invalidDiagram.originalIndex];
          const attributesStr = originalDiagram.attributes ? ` ${originalDiagram.attributes}` : "";
          const newCodeBlock = `\`\`\`mermaid${attributesStr}
${fixedContent}
\`\`\``;
          fixedResponse = fixedResponse.slice(0, originalDiagram.startIndex) + newCodeBlock + fixedResponse.slice(originalDiagram.endIndex);
          fixingResults.push({
            diagramIndex: invalidDiagram.originalIndex,
            wasFixed: true,
            originalContent: invalidDiagram.content,
            fixedContent,
            originalError: invalidDiagram.error
          });
          if (debug) {
            console.error(`[DEBUG] Fixed diagram ${invalidDiagram.originalIndex + 1}: ${invalidDiagram.error}`);
          }
        } else {
          fixingResults.push({
            diagramIndex: invalidDiagram.originalIndex,
            wasFixed: false,
            originalContent: invalidDiagram.content,
            originalError: invalidDiagram.error,
            fixingError: "No valid fix generated"
          });
        }
      } catch (error) {
        fixingResults.push({
          diagramIndex: invalidDiagram.originalIndex,
          wasFixed: false,
          originalContent: invalidDiagram.content,
          originalError: invalidDiagram.error,
          fixingError: error.message
        });
        if (debug) {
          console.error(`[DEBUG] Failed to fix diagram ${invalidDiagram.originalIndex + 1}: ${error.message}`);
        }
      }
    }
    const finalValidation = await validateMermaidResponse(fixedResponse);
    const wasActuallyFixed = fixingResults.some((result) => result.wasFixed);
    return {
      ...finalValidation,
      wasFixed: wasActuallyFixed,
      originalResponse: response,
      fixedResponse,
      fixingResults,
      tokenUsage: mermaidFixer.getTokenUsage()
    };
  } catch (error) {
    if (debug) {
      console.error(`[DEBUG] Mermaid fixing agent failed: ${error.message}`);
    }
    return {
      ...validation,
      wasFixed: false,
      originalResponse: response,
      fixedResponse: response,
      fixingError: error.message
    };
  }
}
var MermaidFixingAgent;
var init_schemaUtils = __esm({
  "src/agent/schemaUtils.js"() {
    "use strict";
    MermaidFixingAgent = class {
      constructor(options = {}) {
        this.ProbeAgent = null;
        this.options = {
          sessionId: options.sessionId || `mermaid-fixer-${Date.now()}`,
          path: options.path || process.cwd(),
          provider: options.provider,
          model: options.model,
          debug: options.debug,
          tracer: options.tracer,
          // Set to false since we're only fixing syntax, not implementing code
          allowEdit: false
        };
      }
      /**
       * Get the specialized prompt for mermaid diagram fixing
       */
      getMermaidFixingPrompt() {
        return `You are a world-class Mermaid diagram syntax correction specialist. Your expertise lies in analyzing and fixing Mermaid diagram syntax errors while preserving the original intent, structure, and semantic meaning.

CORE RESPONSIBILITIES:
- Analyze Mermaid diagrams for syntax errors and structural issues  
- Fix syntax errors while maintaining the original diagram's logical flow
- Ensure diagrams follow proper Mermaid syntax rules and best practices
- Handle all diagram types: flowchart, sequence, gantt, pie, state, class, er, journey, gitgraph, requirement, c4

MERMAID DIAGRAM TYPES & SYNTAX RULES:
1. **Flowchart/Graph**: Start with 'graph' or 'flowchart', use proper node definitions and arrows
2. **Sequence**: Start with 'sequenceDiagram', use proper participant and message syntax
3. **Gantt**: Start with 'gantt', use proper date formats and task definitions
4. **State**: Start with 'stateDiagram-v2', use proper state transitions
5. **Class**: Start with 'classDiagram', use proper class and relationship syntax
6. **Entity-Relationship**: Start with 'erDiagram', use proper entity and relationship syntax

FIXING METHODOLOGY:
1. **Identify diagram type** from the first line or content analysis
2. **Validate syntax** against Mermaid specification for that diagram type
3. **Fix errors systematically**:
   - Unclosed brackets, parentheses, or quotes
   - Missing or incorrect arrows and connectors
   - Invalid node IDs or labels
   - Incorrect formatting for diagram-specific elements
4. **Preserve semantic meaning** - never change the intended flow or relationships
5. **Use proper escaping** for special characters and spaces
6. **Ensure consistency** in naming conventions and formatting

CRITICAL RULES:
- ALWAYS output only the corrected Mermaid code within a \`\`\`mermaid code block
- NEVER add explanations, comments, or additional text outside the code block
- PRESERVE the original diagram's intended meaning and flow
- FIX syntax errors without changing the logical structure
- ENSURE the output is valid, parseable Mermaid syntax

When presented with a broken Mermaid diagram, analyze it thoroughly and provide the corrected version that maintains the original intent while fixing all syntax issues.`;
      }
      /**
       * Initialize the ProbeAgent if not already done
       */
      async initializeAgent() {
        if (!this.ProbeAgent) {
          const { ProbeAgent: ProbeAgent2 } = await Promise.resolve().then(() => (init_ProbeAgent(), ProbeAgent_exports));
          this.ProbeAgent = ProbeAgent2;
        }
        if (!this.agent) {
          this.agent = new this.ProbeAgent({
            sessionId: this.options.sessionId,
            customPrompt: this.getMermaidFixingPrompt(),
            path: this.options.path,
            provider: this.options.provider,
            model: this.options.model,
            debug: this.options.debug,
            tracer: this.options.tracer,
            allowEdit: this.options.allowEdit
          });
        }
        return this.agent;
      }
      /**
       * Fix a single Mermaid diagram using the specialized agent
       * @param {string} diagramContent - The broken Mermaid diagram content
       * @param {Array} originalErrors - Array of errors detected in the original diagram
       * @param {Object} diagramInfo - Additional context about the diagram (type, position, etc.)
       * @returns {Promise<string>} - The corrected Mermaid diagram
       */
      async fixMermaidDiagram(diagramContent, originalErrors = [], diagramInfo = {}) {
        await this.initializeAgent();
        const errorContext = originalErrors.length > 0 ? `

Detected errors: ${originalErrors.join(", ")}` : "";
        const diagramTypeHint = diagramInfo.diagramType ? `

Expected diagram type: ${diagramInfo.diagramType}` : "";
        const prompt = `Analyze and fix the following Mermaid diagram.${errorContext}${diagramTypeHint}

Broken Mermaid diagram:
\`\`\`mermaid
${diagramContent}
\`\`\`

Provide only the corrected Mermaid diagram within a mermaid code block. Do not add any explanations or additional text.`;
        try {
          const result = await this.agent.answer(prompt, [], {
            schema: "Return only valid Mermaid diagram code within ```mermaid code block"
          });
          const extractedDiagram = this.extractCorrectedDiagram(result);
          return extractedDiagram || result;
        } catch (error) {
          if (this.options.debug) {
            console.error(`[DEBUG] Mermaid fixing failed: ${error.message}`);
          }
          throw new Error(`Failed to fix Mermaid diagram: ${error.message}`);
        }
      }
      /**
       * Extract the corrected diagram from the agent's response
       * @param {string} response - The agent's response
       * @returns {string} - The extracted mermaid diagram
       */
      extractCorrectedDiagram(response) {
        const mermaidMatch = response.match(/```mermaid\s*\n([\s\S]*?)\n```/);
        if (mermaidMatch) {
          return mermaidMatch[1].trim();
        }
        const codeMatch = response.match(/```\s*\n([\s\S]*?)\n```/);
        if (codeMatch) {
          return codeMatch[1].trim();
        }
        return response.replace(/```\w*\n?/g, "").replace(/\n?```/g, "").trim();
      }
      /**
       * Get token usage information from the specialized agent
       * @returns {Object} - Token usage statistics
       */
      getTokenUsage() {
        return this.agent ? this.agent.getTokenUsage() : null;
      }
      /**
       * Cancel any ongoing operations
       */
      cancel() {
        if (this.agent) {
          this.agent.cancel();
        }
      }
    };
  }
});

// src/agent/ProbeAgent.js
var ProbeAgent_exports = {};
__export(ProbeAgent_exports, {
  ProbeAgent: () => ProbeAgent
});
import { createAnthropic } from "@ai-sdk/anthropic";
import { createOpenAI } from "@ai-sdk/openai";
import { createGoogleGenerativeAI } from "@ai-sdk/google";
import { streamText } from "ai";
import { randomUUID as randomUUID3 } from "crypto";
import { EventEmitter as EventEmitter2 } from "events";
var MAX_TOOL_ITERATIONS, MAX_HISTORY_MESSAGES, ProbeAgent;
var init_ProbeAgent = __esm({
  "src/agent/ProbeAgent.js"() {
    "use strict";
    init_tokenCounter();
    init_tools2();
    init_probeTool();
    init_index();
    init_schemaUtils();
    MAX_TOOL_ITERATIONS = parseInt(process.env.MAX_TOOL_ITERATIONS || "30", 10);
    MAX_HISTORY_MESSAGES = 100;
    ProbeAgent = class {
      /**
       * Create a new ProbeAgent instance
       * @param {Object} options - Configuration options
       * @param {string} [options.sessionId] - Optional session ID
       * @param {string} [options.customPrompt] - Custom prompt to replace the default system message
       * @param {string} [options.promptType] - Predefined prompt type (architect, code-review, support)
       * @param {boolean} [options.allowEdit=false] - Allow the use of the 'implement' tool
       * @param {string} [options.path] - Search directory path
       * @param {string} [options.provider] - Force specific AI provider
       * @param {string} [options.model] - Override model name
       * @param {boolean} [options.debug] - Enable debug mode
       */
      constructor(options = {}) {
        this.sessionId = options.sessionId || randomUUID3();
        this.customPrompt = options.customPrompt || null;
        this.promptType = options.promptType || "code-explorer";
        this.allowEdit = !!options.allowEdit;
        this.debug = options.debug || process.env.DEBUG === "1";
        this.cancelled = false;
        this.tracer = options.tracer || null;
        this.allowedFolders = options.path ? [options.path] : [process.cwd()];
        this.clientApiProvider = options.provider || null;
        this.clientApiKey = null;
        this.clientApiUrl = null;
        this.tokenCounter = new TokenCounter();
        if (this.debug) {
          console.log(`[DEBUG] Generated session ID for agent: ${this.sessionId}`);
          console.log(`[DEBUG] Maximum tool iterations configured: ${MAX_TOOL_ITERATIONS}`);
          console.log(`[DEBUG] Allow Edit (implement tool): ${this.allowEdit}`);
        }
        this.initializeTools();
        this.initializeModel();
        this.history = [];
        this.events = new EventEmitter2();
      }
      /**
       * Initialize tools with configuration
       */
      initializeTools() {
        const configOptions = {
          sessionId: this.sessionId,
          debug: this.debug,
          defaultPath: this.allowedFolders.length > 0 ? this.allowedFolders[0] : process.cwd(),
          allowedFolders: this.allowedFolders
        };
        const baseTools = createTools(configOptions);
        const wrappedTools = createWrappedTools(baseTools);
        this.toolImplementations = {
          search: wrappedTools.searchToolInstance,
          query: wrappedTools.queryToolInstance,
          extract: wrappedTools.extractToolInstance,
          listFiles: listFilesToolInstance,
          searchFiles: searchFilesToolInstance
        };
      }
      /**
       * Initialize the AI model based on available API keys and forced provider setting
       */
      initializeModel() {
        const anthropicApiKey = process.env.ANTHROPIC_API_KEY;
        const openaiApiKey = process.env.OPENAI_API_KEY;
        const googleApiKey = process.env.GOOGLE_API_KEY;
        const llmBaseUrl = process.env.LLM_BASE_URL;
        const anthropicApiUrl = process.env.ANTHROPIC_API_URL || llmBaseUrl;
        const openaiApiUrl = process.env.OPENAI_API_URL || llmBaseUrl;
        const googleApiUrl = process.env.GOOGLE_API_URL || llmBaseUrl;
        const modelName = process.env.MODEL_NAME;
        const forceProvider = this.clientApiProvider || (process.env.FORCE_PROVIDER ? process.env.FORCE_PROVIDER.toLowerCase() : null);
        if (this.debug) {
          console.log(`[DEBUG] Available API keys: Anthropic=${!!anthropicApiKey}, OpenAI=${!!openaiApiKey}, Google=${!!googleApiKey}`);
          console.log(`[DEBUG] Force provider: ${forceProvider || "(not set)"}`);
          if (modelName) console.log(`[DEBUG] Model override: ${modelName}`);
        }
        if (forceProvider) {
          if (forceProvider === "anthropic" && anthropicApiKey) {
            this.initializeAnthropicModel(anthropicApiKey, anthropicApiUrl, modelName);
            return;
          } else if (forceProvider === "openai" && openaiApiKey) {
            this.initializeOpenAIModel(openaiApiKey, openaiApiUrl, modelName);
            return;
          } else if (forceProvider === "google" && googleApiKey) {
            this.initializeGoogleModel(googleApiKey, googleApiUrl, modelName);
            return;
          }
          console.warn(`WARNING: Forced provider "${forceProvider}" selected but required API key is missing or invalid! Falling back to auto-detection.`);
        }
        if (anthropicApiKey) {
          this.initializeAnthropicModel(anthropicApiKey, anthropicApiUrl, modelName);
        } else if (openaiApiKey) {
          this.initializeOpenAIModel(openaiApiKey, openaiApiUrl, modelName);
        } else if (googleApiKey) {
          this.initializeGoogleModel(googleApiKey, googleApiUrl, modelName);
        } else {
          throw new Error("No API key provided. Please set ANTHROPIC_API_KEY, OPENAI_API_KEY, or GOOGLE_API_KEY environment variable.");
        }
      }
      /**
       * Initialize Anthropic model
       */
      initializeAnthropicModel(apiKey, apiUrl, modelName) {
        this.provider = createAnthropic({
          apiKey,
          ...apiUrl && { baseURL: apiUrl }
        });
        this.model = modelName || "claude-opus-4-1-20250805";
        this.apiType = "anthropic";
        if (this.debug) {
          console.log(`Using Anthropic API with model: ${this.model}${apiUrl ? ` (URL: ${apiUrl})` : ""}`);
        }
      }
      /**
       * Initialize OpenAI model
       */
      initializeOpenAIModel(apiKey, apiUrl, modelName) {
        this.provider = createOpenAI({
          compatibility: "strict",
          apiKey,
          ...apiUrl && { baseURL: apiUrl }
        });
        this.model = modelName || "gpt-5-thinking";
        this.apiType = "openai";
        if (this.debug) {
          console.log(`Using OpenAI API with model: ${this.model}${apiUrl ? ` (URL: ${apiUrl})` : ""}`);
        }
      }
      /**
       * Initialize Google model
       */
      initializeGoogleModel(apiKey, apiUrl, modelName) {
        this.provider = createGoogleGenerativeAI({
          apiKey,
          ...apiUrl && { baseURL: apiUrl }
        });
        this.model = modelName || "gemini-2.5-pro";
        this.apiType = "google";
        if (this.debug) {
          console.log(`Using Google API with model: ${this.model}${apiUrl ? ` (URL: ${apiUrl})` : ""}`);
        }
      }
      /**
       * Get the system message with instructions for the AI (XML Tool Format)
       */
      async getSystemMessage() {
        let toolDefinitions = `
${searchToolDefinition}
${queryToolDefinition}
${extractToolDefinition}
${listFilesToolDefinition}
${searchFilesToolDefinition}
${attemptCompletionToolDefinition}
`;
        if (this.allowEdit) {
          toolDefinitions += `${implementToolDefinition}
`;
        }
        let xmlToolGuidelines = `
# Tool Use Formatting

Tool use MUST be formatted using XML-style tags. The tool name is enclosed in opening and closing tags, and each parameter is similarly enclosed within its own set of tags. You MUST use exactly ONE tool call per message until you are ready to complete the task.

Structure:
<tool_name>
<parameter1_name>value1</parameter1_name>
<parameter2_name>value2</parameter2_name>
...
</tool_name>

Example:
<search>
<query>error handling</query>
<path>src/search</path>
</search>

# Thinking Process

Before using a tool, analyze the situation within <thinking></thinking> tags. This helps you organize your thoughts and make better decisions.

Example:
<thinking>
I need to find code related to error handling in the search module. The most appropriate tool for this is the search tool, which requires a query parameter and a path parameter. I have both the query ("error handling") and the path ("src/search"), so I can proceed with the search.
</thinking>

# Tool Use Guidelines

1. Think step-by-step about how to achieve the user's goal.
2. Use <thinking></thinking> tags to analyze the situation and determine the appropriate tool.
3. Choose **one** tool that helps achieve the current step.
4. Format the tool call using the specified XML format. Ensure all required parameters are included.
5. **You MUST respond with exactly one tool call in the specified XML format in each turn.**
6. Wait for the tool execution result, which will be provided in the next message (within a <tool_result> block).
7. Analyze the tool result and decide the next step. If more tool calls are needed, repeat steps 2-6.
8. If the task is fully complete and all previous steps were successful, use the \`<attempt_completion>\` tool to provide the final answer. This is the ONLY way to finish the task.
9. If you cannot proceed (e.g., missing information, invalid request), explain the issue clearly before using \`<attempt_completion>\` with an appropriate message in the \`<result>\` tag.

Available Tools:
- search: Search code using keyword queries.
- query: Search code using structural AST patterns.
- extract: Extract specific code blocks or lines from files.
- listFiles: List files and directories in a specified location.
- searchFiles: Find files matching a glob pattern with recursive search capability.
${this.allowEdit ? "- implement: Implement a feature or fix a bug using aider.\n" : ""}
- attempt_completion: Finalize the task and provide the result to the user.
`;
        const commonInstructions = `<instructions>
Follow these instructions carefully:
1. Analyze the user's request.
2. Use <thinking></thinking> tags to analyze the situation and determine the appropriate tool for each step.
3. Use the available tools step-by-step to fulfill the request.
4. You should always prefer the \`search\` tool for code-related questions. Read full files only if really necessary.
5. Ensure to get really deep and understand the full picture before answering.
6. You MUST respond with exactly ONE tool call per message, using the specified XML format, until the task is complete.
7. Wait for the tool execution result (provided in the next user message in a <tool_result> block) before proceeding to the next step.
8. Once the task is fully completed, use the '<attempt_completion>' tool to provide the final result. This is the ONLY way to signal completion.
9. Prefer concise and focused search queries. Use specific keywords and phrases to narrow down results.
</instructions>
`;
        const predefinedPrompts = {
          "code-explorer": `You are ProbeChat Code Explorer, a specialized AI assistant focused on helping developers, product managers, and QAs understand and navigate codebases. Your primary function is to answer questions based on code, explain how systems work, and provide insights into code functionality using the provided code analysis tools.

When exploring code:
- Provide clear, concise explanations based on user request
- Find and highlight the most relevant code snippets, if required
- Trace function calls and data flow through the system
- Try to understand the user's intent and provide relevant information
- Understand high level picture
- Balance detail with clarity in your explanations`,
          "architect": `You are ProbeChat Architect, a specialized AI assistant focused on software architecture and design. Your primary function is to help users understand, analyze, and design software systems using the provided code analysis tools.

When analyzing code:
- Focus on high-level design patterns and system organization
- Identify architectural patterns and component relationships
- Evaluate system structure and suggest architectural improvements
- Consider scalability, maintainability, and extensibility in your analysis`,
          "code-review": `You are ProbeChat Code Reviewer, a specialized AI assistant focused on code quality and best practices. Your primary function is to help users identify issues, suggest improvements, and ensure code follows best practices using the provided code analysis tools.

When reviewing code:
- Look for bugs, edge cases, and potential issues
- Identify performance bottlenecks and optimization opportunities
- Check for security vulnerabilities and best practices
- Evaluate code style and consistency
- Provide specific, actionable suggestions with code examples where appropriate`,
          "code-review-template": `You are going to perform code review according to provided user rules. Ensure to review only code provided in diff and latest commit, if provided. However you still need to fully understand how modified code works, and read dependencies if something is not clear.`,
          "engineer": `You are senior engineer focused on software architecture and design.
Before jumping on the task you first, in details analyse user request, and try to provide elegant and concise solution.
If solution is clear, you can jump to implementation right away, if not, you can ask user a clarification question, by calling attempt_completion tool, with required details.

Before jumping to implementation:
- Focus on high-level design patterns and system organization
- Identify architectural patterns and component relationships
- Evaluate system structure and suggest architectural improvements
- Focus on backward compatibility.
- Consider scalability, maintainability, and extensibility in your analysis

During the implementation:
- Avoid implementing special cases
- Do not forget to add the tests`,
          "support": `You are ProbeChat Support, a specialized AI assistant focused on helping developers troubleshoot issues and solve problems. Your primary function is to help users diagnose errors, understand unexpected behaviors, and find solutions using the provided code analysis tools.

When troubleshooting:
- Focus on finding root causes, not just symptoms
- Explain concepts clearly with appropriate context
- Provide step-by-step guidance to solve problems
- Suggest diagnostic steps to verify solutions
- Consider edge cases and potential complications
- Be empathetic and patient in your explanations`
        };
        let systemMessage = "";
        if (this.customPrompt) {
          systemMessage = "<role>" + this.customPrompt + "</role>";
          if (this.debug) {
            console.log(`[DEBUG] Using custom prompt`);
          }
        } else if (this.promptType && predefinedPrompts[this.promptType]) {
          systemMessage = "<role>" + predefinedPrompts[this.promptType] + "</role>";
          if (this.debug) {
            console.log(`[DEBUG] Using predefined prompt: ${this.promptType}`);
          }
          systemMessage += commonInstructions;
        } else {
          systemMessage = "<role>" + predefinedPrompts["code-explorer"] + "</role>";
          if (this.debug) {
            console.log(`[DEBUG] Using default prompt: code explorer`);
          }
          systemMessage += commonInstructions;
        }
        systemMessage += `
${xmlToolGuidelines}
`;
        systemMessage += `
# Tools Available
${toolDefinitions}
`;
        const searchDirectory = this.allowedFolders.length > 0 ? this.allowedFolders[0] : process.cwd();
        if (this.debug) {
          console.log(`[DEBUG] Generating file list for base directory: ${searchDirectory}...`);
        }
        try {
          const files = await listFilesByLevel({
            directory: searchDirectory,
            maxFiles: 100,
            respectGitignore: !process.env.PROBE_NO_GITIGNORE || process.env.PROBE_NO_GITIGNORE === "",
            cwd: process.cwd()
          });
          systemMessage += `
# Repository Structure

You are working with a repository located at: ${searchDirectory}

Here's an overview of the repository structure (showing up to 100 most relevant files):

\`\`\`
${files}
\`\`\`

`;
        } catch (error) {
          if (this.debug) {
            console.log(`[DEBUG] Could not generate file list: ${error.message}`);
          }
          systemMessage += `
# Repository Structure

You are working with a repository located at: ${searchDirectory}

`;
        }
        if (this.allowedFolders.length > 0) {
          systemMessage += `
**Important**: For security reasons, you can only search within these allowed folders: ${this.allowedFolders.join(", ")}

`;
        }
        return systemMessage;
      }
      /**
       * Answer a question using the agentic flow
       * @param {string} message - The user's question
       * @param {Array} [images] - Optional array of image data (base64 strings or URLs)
       * @param {Object|string} [schemaOrOptions] - Can be either:
       *   - A string: JSON schema for structured output (backwards compatible)
       *   - An object: Options object with schema and other options
       * @param {string} [schemaOrOptions.schema] - JSON schema string for structured output
       * @returns {Promise<string>} - The final answer
       */
      async answer(message, images = [], schemaOrOptions = {}) {
        if (!message || typeof message !== "string" || message.trim().length === 0) {
          throw new Error("Message is required and must be a non-empty string");
        }
        let options = {};
        if (typeof schemaOrOptions === "string") {
          options = { schema: schemaOrOptions };
        } else {
          options = schemaOrOptions || {};
        }
        try {
          const systemMessage = await this.getSystemMessage();
          let userMessage = { role: "user", content: message.trim() };
          if (images && images.length > 0) {
            userMessage.content = [
              { type: "text", text: message.trim() },
              ...images.map((image) => ({
                type: "image",
                image
              }))
            ];
          }
          let currentMessages = [
            { role: "system", content: systemMessage },
            ...this.history,
            // Include previous conversation history
            userMessage
          ];
          let currentIteration = 0;
          let completionAttempted = false;
          let finalResult = "I was unable to complete your request due to reaching the maximum number of tool iterations.";
          const maxIterations = options.schema ? MAX_TOOL_ITERATIONS + 4 : MAX_TOOL_ITERATIONS;
          if (this.debug) {
            console.log(`[DEBUG] Starting agentic flow for question: ${message.substring(0, 100)}...`);
            if (options.schema) {
              console.log(`[DEBUG] Schema provided, using extended iteration limit: ${maxIterations} (base: ${MAX_TOOL_ITERATIONS})`);
            }
          }
          while (currentIteration < maxIterations && !completionAttempted) {
            currentIteration++;
            if (this.cancelled) throw new Error("Request was cancelled by the user");
            if (this.debug) {
              console.log(`
[DEBUG] --- Tool Loop Iteration ${currentIteration}/${maxIterations} ---`);
              console.log(`[DEBUG] Current messages count for AI call: ${currentMessages.length}`);
            }
            if (this.tracer) {
              this.tracer.addEvent("iteration.start", {
                "iteration": currentIteration,
                "max_iterations": maxIterations,
                "message_count": currentMessages.length
              });
            }
            if (currentIteration === maxIterations) {
              const warningMessage = `\u26A0\uFE0F WARNING: You have reached the maximum tool iterations limit (${maxIterations}). This is your final message. Please respond with the data you have so far. If something was not completed, honestly state what was not done and provide any partial results or recommendations you can offer.`;
              currentMessages.push({
                role: "user",
                content: warningMessage
              });
              if (this.debug) {
                console.log(`[DEBUG] Added max iterations warning message at iteration ${currentIteration}`);
              }
            }
            this.tokenCounter.calculateContextSize(currentMessages);
            if (this.debug) {
              console.log(`[DEBUG] Estimated context tokens BEFORE LLM call (Iter ${currentIteration}): ${this.tokenCounter.contextSize}`);
            }
            let maxResponseTokens = 4e3;
            if (this.model.includes("claude-3-opus") || this.model.startsWith("gpt-4-")) {
              maxResponseTokens = 4096;
            } else if (this.model.includes("claude-3-5-sonnet") || this.model.startsWith("gpt-4o")) {
              maxResponseTokens = 8192;
            }
            let assistantResponseContent = "";
            try {
              const executeAIRequest = async () => {
                const result = await streamText({
                  model: this.provider(this.model),
                  messages: currentMessages,
                  maxTokens: maxResponseTokens,
                  temperature: 0.3
                });
                for await (const delta of result.textStream) {
                  assistantResponseContent += delta;
                }
                const usage = await result.usage;
                if (usage) {
                  this.tokenCounter.recordUsage(usage, result.experimental_providerMetadata);
                }
                return result;
              };
              if (this.tracer) {
                await this.tracer.withSpan("ai.request", executeAIRequest, {
                  "ai.model": this.model,
                  "ai.provider": this.clientApiProvider || "auto",
                  "iteration": currentIteration,
                  "max_tokens": maxResponseTokens,
                  "temperature": 0.3,
                  "message_count": currentMessages.length
                });
              } else {
                await executeAIRequest();
              }
            } catch (error) {
              console.error(`Error during streamText (Iter ${currentIteration}):`, error);
              finalResult = `Error: Failed to get response from AI model during iteration ${currentIteration}. ${error.message}`;
              throw new Error(finalResult);
            }
            const parsedTool = parseXmlToolCallWithThinking(assistantResponseContent);
            if (parsedTool) {
              const { toolName, params } = parsedTool;
              if (this.debug) console.log(`[DEBUG] Parsed tool call: ${toolName} with params:`, params);
              if (toolName === "attempt_completion") {
                completionAttempted = true;
                const validation = attemptCompletionSchema.safeParse(params);
                if (validation.success) {
                  finalResult = validation.data.result;
                  if (this.debug) console.log(`[DEBUG] Task completed successfully with result: ${finalResult.substring(0, 100)}...`);
                } else {
                  console.error(`[ERROR] Invalid attempt_completion parameters:`, validation.error);
                  finalResult = "Error: Invalid completion attempt. The task could not be completed properly.";
                }
                break;
              } else {
                if (this.toolImplementations[toolName]) {
                  try {
                    const toolParams = { ...params, sessionId: this.sessionId };
                    this.events.emit("toolCall", {
                      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                      name: toolName,
                      args: toolParams,
                      status: "started"
                    });
                    const executeToolCall = async () => {
                      return await this.toolImplementations[toolName].execute(toolParams);
                    };
                    let toolResult;
                    try {
                      if (this.tracer) {
                        toolResult = await this.tracer.withSpan("tool.call", executeToolCall, {
                          "tool.name": toolName,
                          "tool.params": JSON.stringify(toolParams).substring(0, 500),
                          "iteration": currentIteration
                        });
                      } else {
                        toolResult = await executeToolCall();
                      }
                      this.events.emit("toolCall", {
                        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                        name: toolName,
                        args: toolParams,
                        resultPreview: typeof toolResult === "string" ? toolResult.length > 200 ? toolResult.substring(0, 200) + "..." : toolResult : toolResult ? JSON.stringify(toolResult).substring(0, 200) + "..." : "No Result",
                        status: "completed"
                      });
                    } catch (toolError) {
                      this.events.emit("toolCall", {
                        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                        name: toolName,
                        args: toolParams,
                        error: toolError.message || "Unknown error",
                        status: "error"
                      });
                      throw toolError;
                    }
                    currentMessages.push({ role: "assistant", content: assistantResponseContent });
                    currentMessages.push({
                      role: "user",
                      content: `<tool_result>
${typeof toolResult === "string" ? toolResult : JSON.stringify(toolResult, null, 2)}
</tool_result>`
                    });
                    if (this.debug) {
                      console.log(`[DEBUG] Tool ${toolName} executed successfully. Result length: ${typeof toolResult === "string" ? toolResult.length : JSON.stringify(toolResult).length}`);
                    }
                  } catch (error) {
                    console.error(`[ERROR] Tool execution failed for ${toolName}:`, error);
                    currentMessages.push({ role: "assistant", content: assistantResponseContent });
                    currentMessages.push({
                      role: "user",
                      content: `<tool_result>
Error: ${error.message}
</tool_result>`
                    });
                  }
                } else {
                  console.error(`[ERROR] Unknown tool: ${toolName}`);
                  currentMessages.push({ role: "assistant", content: assistantResponseContent });
                  currentMessages.push({
                    role: "user",
                    content: `<tool_result>
Error: Unknown tool '${toolName}'. Available tools: ${Object.keys(this.toolImplementations).join(", ")}
</tool_result>`
                  });
                }
              }
            } else {
              currentMessages.push({ role: "assistant", content: assistantResponseContent });
              currentMessages.push({
                role: "user",
                content: "Please use one of the available tools to help answer the question, or use attempt_completion if you have enough information to provide a final answer."
              });
              if (this.debug) {
                console.log(`[DEBUG] No tool call detected in assistant response. Prompting for tool use.`);
              }
            }
            if (currentMessages.length > MAX_HISTORY_MESSAGES) {
              const messagesBefore = currentMessages.length;
              const systemMsg = currentMessages[0];
              const recentMessages = currentMessages.slice(-MAX_HISTORY_MESSAGES + 1);
              currentMessages = [systemMsg, ...recentMessages];
              if (this.debug) {
                console.log(`[DEBUG] Trimmed message history from ${messagesBefore} to ${currentMessages.length} messages`);
              }
            }
          }
          if (currentIteration >= maxIterations && !completionAttempted) {
            console.warn(`[WARN] Max tool iterations (${maxIterations}) reached for session ${this.sessionId}. Returning current error state.`);
          }
          this.history = currentMessages.map((msg) => ({ ...msg }));
          if (this.history.length > MAX_HISTORY_MESSAGES) {
            const messagesBefore = this.history.length;
            this.history = this.history.slice(-MAX_HISTORY_MESSAGES);
            if (this.debug) {
              console.log(`[DEBUG] Trimmed stored history from ${messagesBefore} to ${this.history.length} messages`);
            }
          }
          this.tokenCounter.updateHistory(this.history);
          if (options.schema && !options._schemaFormatted) {
            if (this.debug) {
              console.log("[DEBUG] Schema provided, applying automatic formatting...");
            }
            try {
              const schemaPrompt = `Now you need to respond according to this schema:

${options.schema}

Please reformat your previous response to match this schema exactly. Only return the formatted response, no additional text.`;
              finalResult = await this.answer(schemaPrompt, [], {
                ...options,
                _schemaFormatted: true
              });
              finalResult = cleanSchemaResponse(finalResult);
              try {
                const mermaidValidation = await validateAndFixMermaidResponse(finalResult, {
                  debug: this.debug,
                  path: this.allowedFolders[0],
                  provider: this.clientApiProvider,
                  model: this.model
                });
                if (mermaidValidation.wasFixed) {
                  finalResult = mermaidValidation.fixedResponse;
                  if (this.debug) {
                    console.log(`[DEBUG] Mermaid diagrams fixed`);
                    if (mermaidValidation.fixingResults) {
                      mermaidValidation.fixingResults.forEach((fixResult, index) => {
                        if (fixResult.wasFixed) {
                          console.log(`[DEBUG] Fixed diagram ${index + 1}: ${fixResult.originalError}`);
                        }
                      });
                    }
                  }
                }
              } catch (error) {
                if (this.debug) {
                  console.log(`[DEBUG] Mermaid validation failed: ${error.message}`);
                }
              }
              if (isJsonSchema(options.schema)) {
                const validation = validateJsonResponse(finalResult);
                if (!validation.isValid) {
                  if (this.debug) {
                    console.log("[DEBUG] JSON validation failed:", validation.error);
                  }
                  const correctionPrompt = createJsonCorrectionPrompt(
                    finalResult,
                    options.schema,
                    validation.error
                  );
                  finalResult = await this.answer(correctionPrompt, [], {
                    ...options,
                    _schemaFormatted: true
                  });
                  finalResult = cleanSchemaResponse(finalResult);
                  const finalValidation = validateJsonResponse(finalResult);
                  if (!finalValidation.isValid && this.debug) {
                    console.log("[DEBUG] JSON still invalid after correction:", finalValidation.error);
                  }
                }
              }
            } catch (error) {
              console.error("[ERROR] Schema formatting failed:", error);
            }
          }
          return finalResult;
        } catch (error) {
          console.error(`[ERROR] ProbeAgent.answer failed:`, error);
          clearToolExecutionData(this.sessionId);
          throw error;
        }
      }
      /**
       * Get token usage information
       * @returns {Object} Token usage data
       */
      getTokenUsage() {
        return this.tokenCounter.getTokenUsage();
      }
      /**
       * Clear conversation history and reset counters
       */
      clearHistory() {
        this.history = [];
        this.tokenCounter.clear();
        clearToolExecutionData(this.sessionId);
        if (this.debug) {
          console.log(`[DEBUG] Cleared conversation history and reset counters for session ${this.sessionId}`);
        }
      }
      /**
       * Cancel the current request
       */
      cancel() {
        this.cancelled = true;
        if (this.debug) {
          console.log(`[DEBUG] Agent cancelled for session ${this.sessionId}`);
        }
      }
    };
  }
});

// src/agent/index.js
init_ProbeAgent();
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ErrorCode as ErrorCode2,
  ListToolsRequestSchema,
  McpError
} from "@modelcontextprotocol/sdk/types.js";
import { readFileSync, existsSync as existsSync2 } from "fs";
import { resolve } from "path";

// src/agent/simpleTelemetry.js
import { existsSync, mkdirSync, createWriteStream } from "fs";
import { dirname } from "path";
var SimpleTelemetry = class {
  constructor(options = {}) {
    this.serviceName = options.serviceName || "probe-agent";
    this.enableFile = options.enableFile || false;
    this.enableConsole = options.enableConsole || false;
    this.filePath = options.filePath || "./traces.jsonl";
    this.stream = null;
    if (this.enableFile) {
      this.initializeFileExporter();
    }
  }
  initializeFileExporter() {
    try {
      const dir = dirname(this.filePath);
      if (!existsSync(dir)) {
        mkdirSync(dir, { recursive: true });
      }
      this.stream = createWriteStream(this.filePath, { flags: "a" });
      this.stream.on("error", (error) => {
        console.error(`[SimpleTelemetry] Stream error: ${error.message}`);
      });
      console.log(`[SimpleTelemetry] File exporter initialized: ${this.filePath}`);
    } catch (error) {
      console.error(`[SimpleTelemetry] Failed to initialize file exporter: ${error.message}`);
    }
  }
  createSpan(name, attributes = {}) {
    const span = {
      traceId: this.generateTraceId(),
      spanId: this.generateSpanId(),
      name,
      startTime: Date.now(),
      attributes: { ...attributes, service: this.serviceName },
      events: [],
      status: "OK"
    };
    return {
      ...span,
      addEvent: (eventName, eventAttributes = {}) => {
        span.events.push({
          name: eventName,
          time: Date.now(),
          attributes: eventAttributes
        });
      },
      setAttributes: (attrs) => {
        Object.assign(span.attributes, attrs);
      },
      setStatus: (status) => {
        span.status = status;
      },
      end: () => {
        span.endTime = Date.now();
        span.duration = span.endTime - span.startTime;
        this.exportSpan(span);
      }
    };
  }
  exportSpan(span) {
    const spanData = {
      ...span,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    if (this.enableConsole) {
      console.log("[Trace]", JSON.stringify(spanData, null, 2));
    }
    if (this.enableFile && this.stream) {
      this.stream.write(JSON.stringify(spanData) + "\n");
    }
  }
  generateTraceId() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }
  generateSpanId() {
    return Math.random().toString(36).substring(2, 10);
  }
  async flush() {
    if (this.stream) {
      return new Promise((resolve2) => {
        this.stream.once("drain", resolve2);
        if (!this.stream.writableNeedDrain) {
          resolve2();
        }
      });
    }
  }
  async shutdown() {
    if (this.stream) {
      return new Promise((resolve2) => {
        this.stream.end(() => {
          console.log(`[SimpleTelemetry] File stream closed: ${this.filePath}`);
          resolve2();
        });
      });
    }
  }
};
var SimpleAppTracer = class {
  constructor(telemetry, sessionId = null) {
    this.telemetry = telemetry;
    this.sessionId = sessionId || this.generateSessionId();
  }
  generateSessionId() {
    return Math.random().toString(36).substring(2, 15);
  }
  isEnabled() {
    return this.telemetry !== null;
  }
  createSessionSpan(attributes = {}) {
    if (!this.isEnabled()) return null;
    return this.telemetry.createSpan("agent.session", {
      "session.id": this.sessionId,
      ...attributes
    });
  }
  createAISpan(modelName, provider, attributes = {}) {
    if (!this.isEnabled()) return null;
    return this.telemetry.createSpan("ai.request", {
      "ai.model": modelName,
      "ai.provider": provider,
      "session.id": this.sessionId,
      ...attributes
    });
  }
  createToolSpan(toolName, attributes = {}) {
    if (!this.isEnabled()) return null;
    return this.telemetry.createSpan("tool.call", {
      "tool.name": toolName,
      "session.id": this.sessionId,
      ...attributes
    });
  }
  addEvent(name, attributes = {}) {
    if (this.telemetry && this.telemetry.enableConsole) {
      console.log("[Event]", name, attributes);
    }
  }
  setAttributes(attributes) {
    if (this.telemetry && this.telemetry.enableConsole) {
      console.log("[Attributes]", attributes);
    }
  }
  async withSpan(spanName, fn, attributes = {}) {
    if (!this.isEnabled()) {
      return fn();
    }
    const span = this.telemetry.createSpan(spanName, {
      "session.id": this.sessionId,
      ...attributes
    });
    try {
      const result = await fn();
      span.setStatus("OK");
      return result;
    } catch (error) {
      span.setStatus("ERROR");
      span.addEvent("exception", {
        "exception.message": error.message,
        "exception.stack": error.stack
      });
      throw error;
    } finally {
      span.end();
    }
  }
  async flush() {
    if (this.telemetry) {
      await this.telemetry.flush();
    }
  }
  async shutdown() {
    if (this.telemetry) {
      await this.telemetry.shutdown();
    }
  }
};
function initializeSimpleTelemetryFromOptions(options) {
  const telemetry = new SimpleTelemetry({
    serviceName: "probe-agent",
    enableFile: options.traceFile !== void 0,
    enableConsole: options.traceConsole,
    filePath: options.traceFile || "./traces.jsonl"
  });
  return telemetry;
}

// src/agent/index.js
init_schemaUtils();

// src/agent/acp/server.js
import { randomUUID as randomUUID4 } from "crypto";

// src/agent/acp/connection.js
import { EventEmitter as EventEmitter3 } from "events";

// src/agent/acp/types.js
var ACP_PROTOCOL_VERSION = "1";
var RequestMethod = {
  INITIALIZE: "initialize",
  NEW_SESSION: "newSession",
  LOAD_SESSION: "loadSession",
  SET_SESSION_MODE: "setSessionMode",
  PROMPT: "prompt",
  CANCEL: "cancel",
  // Client requests (that the agent can make to the client)
  WRITE_TEXT_FILE: "writeTextFile",
  READ_TEXT_FILE: "readTextFile",
  REQUEST_PERMISSION: "requestPermission",
  CREATE_TERMINAL: "createTerminal"
};
var NotificationMethod = {
  SESSION_UPDATED: "sessionUpdated",
  TOOL_CALL_PROGRESS: "toolCallProgress",
  MESSAGE_CHUNK: "messageChunk",
  PLAN_UPDATED: "planUpdated",
  AVAILABLE_COMMANDS: "availableCommands"
};
var ToolCallKind = {
  READ: "read",
  edit: "edit",
  delete: "delete",
  execute: "execute",
  search: "search",
  query: "query",
  extract: "extract"
};
var ContentType = {
  TEXT: "text",
  IMAGE: "image",
  AUDIO: "audio",
  RESOURCE: "resource",
  EMBEDDED_RESOURCE: "embedded_resource"
};
var ErrorCode = {
  PARSE_ERROR: -32700,
  INVALID_REQUEST: -32600,
  METHOD_NOT_FOUND: -32601,
  INVALID_PARAMS: -32602,
  INTERNAL_ERROR: -32603,
  // ACP-specific errors
  UNSUPPORTED_PROTOCOL_VERSION: -32001,
  SESSION_NOT_FOUND: -32002,
  PERMISSION_DENIED: -32003,
  TOOL_EXECUTION_FAILED: -32004
};
var SessionMode = {
  NORMAL: "normal",
  PLANNING: "planning"
};
function createResponse(id, result = null, error = null) {
  const response = {
    jsonrpc: "2.0",
    id
  };
  if (error) {
    response.error = error;
  } else {
    response.result = result;
  }
  return response;
}
function createError(code, message, data = null) {
  const error = {
    code,
    message
  };
  if (data !== null) {
    error.data = data;
  }
  return error;
}
function createContentBlock(type, content, metadata = {}) {
  return {
    type,
    ...content,
    ...metadata
  };
}
function createTextContent(text) {
  return createContentBlock(ContentType.TEXT, { text });
}
function createToolCallProgress(toolCallId, status, result = null, error = null) {
  const progress = {
    toolCallId,
    status
  };
  if (result !== null) {
    progress.result = result;
  }
  if (error !== null) {
    progress.error = error;
  }
  return progress;
}
function validateMessage(message) {
  if (!message || typeof message !== "object") {
    return { valid: false, error: "Message must be an object" };
  }
  if (message.jsonrpc !== "2.0") {
    return { valid: false, error: "Invalid or missing jsonrpc version" };
  }
  if (message.id !== void 0) {
    if (!message.method && !message.result && !message.error) {
      return { valid: false, error: "Request must have method or response must have result/error" };
    }
  }
  return { valid: true };
}

// src/agent/acp/connection.js
var ACPConnection = class extends EventEmitter3 {
  constructor(inputStream = process.stdin, outputStream = process.stdout) {
    super();
    this.inputStream = inputStream;
    this.outputStream = outputStream;
    this.buffer = "";
    this.messageId = 1;
    this.pendingRequests = /* @__PURE__ */ new Map();
    this.isConnected = false;
    this.debug = process.env.DEBUG === "1";
    this.setupStreams();
  }
  /**
   * Setup input/output streams
   */
  setupStreams() {
    this.inputStream.setEncoding("utf8");
    this.inputStream.on("data", this.handleData.bind(this));
    this.inputStream.on("end", () => {
      this.isConnected = false;
      this.emit("disconnect");
    });
    this.inputStream.on("error", (error) => {
      if (this.debug) {
        console.error("[ACP] Input stream error:", error);
      }
      this.emit("error", error);
    });
    this.outputStream.on("error", (error) => {
      if (this.debug) {
        console.error("[ACP] Output stream error:", error);
      }
      this.emit("error", error);
    });
  }
  /**
   * Start the connection
   */
  start() {
    this.isConnected = true;
    this.emit("connect");
    if (this.debug) {
      console.error("[ACP] Connection started");
    }
  }
  /**
   * Handle incoming data
   */
  handleData(chunk) {
    this.buffer += chunk;
    const lines = this.buffer.split("\n");
    this.buffer = lines.pop() || "";
    for (const line of lines) {
      if (line.trim()) {
        try {
          const message = JSON.parse(line);
          this.handleMessage(message);
        } catch (error) {
          if (this.debug) {
            console.error("[ACP] Failed to parse message:", line, error);
          }
          this.sendError(null, ErrorCode.PARSE_ERROR, "Parse error");
        }
      }
    }
  }
  /**
   * Handle a parsed JSON-RPC message
   */
  handleMessage(message) {
    const validation = validateMessage(message);
    if (!validation.valid) {
      if (this.debug) {
        console.error("[ACP] Invalid message:", validation.error, message);
      }
      this.sendError(message.id || null, ErrorCode.INVALID_REQUEST, validation.error);
      return;
    }
    if (this.debug) {
      console.error("[ACP] Received message:", JSON.stringify(message));
    }
    if (message.id && (message.result !== void 0 || message.error !== void 0)) {
      this.handleResponse(message);
      return;
    }
    if (message.method) {
      if (message.id !== void 0) {
        this.emit("request", message);
      } else {
        this.emit("notification", message);
      }
    }
  }
  /**
   * Handle response to our request
   */
  handleResponse(message) {
    const { id, result, error } = message;
    const pendingRequest = this.pendingRequests.get(id);
    if (pendingRequest) {
      this.pendingRequests.delete(id);
      if (error) {
        pendingRequest.reject(new Error(`RPC Error ${error.code}: ${error.message}`));
      } else {
        pendingRequest.resolve(result);
      }
    } else if (this.debug) {
      console.error("[ACP] Received response for unknown request ID:", id);
    }
  }
  /**
   * Send a message
   */
  sendMessage(message) {
    if (!this.isConnected) {
      throw new Error("Connection not established");
    }
    const json = JSON.stringify(message);
    if (this.debug) {
      console.error("[ACP] Sending message:", json);
    }
    this.outputStream.write(json + "\n");
  }
  /**
   * Send a request and wait for response
   */
  async sendRequest(method, params = null) {
    const id = this.messageId++;
    const message = {
      jsonrpc: "2.0",
      method,
      id
    };
    if (params !== null) {
      message.params = params;
    }
    return new Promise((resolve2, reject) => {
      this.pendingRequests.set(id, { resolve: resolve2, reject });
      this.sendMessage(message);
      setTimeout(() => {
        if (this.pendingRequests.has(id)) {
          this.pendingRequests.delete(id);
          reject(new Error("Request timeout"));
        }
      }, 3e4);
    });
  }
  /**
   * Send a notification (no response expected)
   */
  sendNotification(method, params = null) {
    const message = {
      jsonrpc: "2.0",
      method
    };
    if (params !== null) {
      message.params = params;
    }
    this.sendMessage(message);
  }
  /**
   * Send a response to a request
   */
  sendResponse(id, result) {
    const response = createResponse(id, result);
    this.sendMessage(response);
  }
  /**
   * Send an error response
   */
  sendError(id, code, message, data = null) {
    const error = createError(code, message, data);
    const response = createResponse(id, null, error);
    this.sendMessage(response);
  }
  /**
   * Close the connection
   */
  close() {
    this.isConnected = false;
    for (const [id, pendingRequest] of this.pendingRequests) {
      pendingRequest.reject(new Error("Connection closed"));
    }
    this.pendingRequests.clear();
    this.emit("disconnect");
  }
};

// src/agent/acp/server.js
init_ProbeAgent();
var ACPSession = class {
  constructor(id, mode = SessionMode.NORMAL) {
    this.id = id;
    this.mode = mode;
    this.agent = null;
    this.history = [];
    this.toolCalls = /* @__PURE__ */ new Map();
    this.createdAt = (/* @__PURE__ */ new Date()).toISOString();
    this.updatedAt = this.createdAt;
  }
  /**
   * Get or create ProbeAgent for this session
   */
  getAgent(config = {}) {
    if (!this.agent) {
      this.agent = new ProbeAgent({
        sessionId: this.id,
        ...config
      });
    }
    return this.agent;
  }
  /**
   * Update session timestamp
   */
  touch() {
    this.updatedAt = (/* @__PURE__ */ new Date()).toISOString();
  }
  /**
   * Serialize session state
   */
  toJSON() {
    return {
      id: this.id,
      mode: this.mode,
      historyLength: this.history.length,
      toolCallsCount: this.toolCalls.size,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt
    };
  }
};
var ACPServer = class {
  constructor(options = {}) {
    this.options = {
      debug: process.env.DEBUG === "1",
      provider: options.provider || null,
      model: options.model || null,
      path: options.path || process.cwd(),
      allowEdit: options.allowEdit || false,
      ...options
    };
    this.connection = null;
    this.sessions = /* @__PURE__ */ new Map();
    this.capabilities = this.getCapabilities();
    this.initialized = false;
    if (this.options.debug) {
      console.error("[ACP] Server created with options:", this.options);
    }
  }
  /**
   * Get server capabilities
   */
  getCapabilities() {
    return {
      tools: [
        {
          name: "search",
          description: "Search for code patterns and content in the repository",
          kind: ToolCallKind.search
        },
        {
          name: "query",
          description: "Perform structural queries using AST patterns",
          kind: ToolCallKind.query
        },
        {
          name: "extract",
          description: "Extract specific code blocks from files",
          kind: ToolCallKind.extract
        }
      ],
      sessionManagement: true,
      streaming: true,
      permissions: this.options.allowEdit
    };
  }
  /**
   * Start the ACP server
   */
  async start() {
    this.connection = new ACPConnection(process.stdin, process.stdout);
    this.connection.on("request", this.handleRequest.bind(this));
    this.connection.on("notification", this.handleNotification.bind(this));
    this.connection.on("error", this.handleError.bind(this));
    this.connection.on("disconnect", this.handleDisconnect.bind(this));
    this.connection.start();
    if (this.options.debug) {
      console.error("[ACP] Server started and listening for messages");
    }
  }
  /**
   * Handle incoming requests
   */
  async handleRequest(message) {
    const { method, params, id } = message;
    try {
      let result;
      switch (method) {
        case RequestMethod.INITIALIZE:
          result = await this.handleInitialize(params);
          break;
        case RequestMethod.NEW_SESSION:
          result = await this.handleNewSession(params);
          break;
        case RequestMethod.LOAD_SESSION:
          result = await this.handleLoadSession(params);
          break;
        case RequestMethod.SET_SESSION_MODE:
          result = await this.handleSetSessionMode(params);
          break;
        case RequestMethod.PROMPT:
          result = await this.handlePrompt(params);
          break;
        case RequestMethod.CANCEL:
          result = await this.handleCancel(params);
          break;
        default:
          throw new Error(`Unknown method: ${method}`);
      }
      this.connection.sendResponse(id, result);
    } catch (error) {
      if (this.options.debug) {
        console.error(`[ACP] Error handling request ${method}:`, error);
      }
      let errorCode = ErrorCode.INTERNAL_ERROR;
      if (error.message.includes("Unknown method")) {
        errorCode = ErrorCode.METHOD_NOT_FOUND;
      } else if (error.message.includes("Invalid params")) {
        errorCode = ErrorCode.INVALID_PARAMS;
      }
      this.connection.sendError(id, errorCode, error.message);
    }
  }
  /**
   * Handle notifications
   */
  async handleNotification(message) {
    const { method, params } = message;
    if (this.options.debug) {
      console.error(`[ACP] Received notification: ${method}`, params);
    }
  }
  /**
   * Handle initialize request
   */
  async handleInitialize(params) {
    if (!params || !params.protocolVersion) {
      throw new Error("Invalid params: protocolVersion required");
    }
    if (params.protocolVersion !== ACP_PROTOCOL_VERSION) {
      throw new Error(`Unsupported protocol version: ${params.protocolVersion}`);
    }
    this.initialized = true;
    if (this.options.debug) {
      console.error("[ACP] Initialized with protocol version:", params.protocolVersion);
    }
    return {
      protocolVersion: ACP_PROTOCOL_VERSION,
      serverInfo: {
        name: "probe-agent-acp",
        version: "1.0.0",
        description: "Probe AI agent with code search capabilities"
      },
      capabilities: this.capabilities
    };
  }
  /**
   * Handle new session request
   */
  async handleNewSession(params) {
    const sessionId = params?.sessionId || randomUUID4();
    const mode = params?.mode || SessionMode.NORMAL;
    const session = new ACPSession(sessionId, mode);
    this.sessions.set(sessionId, session);
    if (this.options.debug) {
      console.error(`[ACP] Created new session: ${sessionId} (mode: ${mode})`);
    }
    return {
      sessionId,
      mode,
      createdAt: session.createdAt
    };
  }
  /**
   * Handle load session request
   */
  async handleLoadSession(params) {
    if (!params || !params.sessionId) {
      throw new Error("Invalid params: sessionId required");
    }
    const session = this.sessions.get(params.sessionId);
    if (!session) {
      throw new Error(`Session not found: ${params.sessionId}`);
    }
    if (this.options.debug) {
      console.error(`[ACP] Loaded session: ${params.sessionId}`);
    }
    return session.toJSON();
  }
  /**
   * Handle set session mode request
   */
  async handleSetSessionMode(params) {
    if (!params || !params.sessionId || !params.mode) {
      throw new Error("Invalid params: sessionId and mode required");
    }
    const session = this.sessions.get(params.sessionId);
    if (!session) {
      throw new Error(`Session not found: ${params.sessionId}`);
    }
    session.mode = params.mode;
    session.touch();
    if (this.options.debug) {
      console.error(`[ACP] Set session mode: ${params.sessionId} -> ${params.mode}`);
    }
    if (this.connection) {
      this.connection.sendNotification(NotificationMethod.SESSION_UPDATED, {
        sessionId: params.sessionId,
        mode: params.mode
      });
    }
    return { success: true };
  }
  /**
   * Handle prompt request - main AI interaction
   */
  async handlePrompt(params) {
    if (!params || !params.sessionId || !params.message) {
      throw new Error("Invalid params: sessionId and message required");
    }
    const session = this.sessions.get(params.sessionId);
    if (!session) {
      throw new Error(`Session not found: ${params.sessionId}`);
    }
    session.touch();
    const agent = session.getAgent({
      path: this.options.path,
      provider: this.options.provider,
      model: this.options.model,
      allowEdit: this.options.allowEdit,
      debug: this.options.debug
    });
    if (this.options.debug) {
      console.error(`[ACP] Processing prompt for session ${params.sessionId}:`, params.message.substring(0, 100));
    }
    try {
      const response = await agent.answer(params.message);
      session.history.push(
        { role: "user", content: params.message, timestamp: (/* @__PURE__ */ new Date()).toISOString() },
        { role: "assistant", content: response, timestamp: (/* @__PURE__ */ new Date()).toISOString() }
      );
      return {
        content: [createTextContent(response)],
        sessionId: params.sessionId,
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      };
    } catch (error) {
      if (this.options.debug) {
        console.error(`[ACP] Error processing prompt:`, error);
      }
      return {
        content: [createTextContent(`Error: ${error.message}`)],
        sessionId: params.sessionId,
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        error: true
      };
    }
  }
  /**
   * Handle cancel request
   */
  async handleCancel(params) {
    if (!params || !params.sessionId) {
      throw new Error("Invalid params: sessionId required");
    }
    const session = this.sessions.get(params.sessionId);
    if (session && session.agent) {
      session.agent.cancel();
    }
    if (this.options.debug) {
      console.error(`[ACP] Cancelled operations for session: ${params.sessionId}`);
    }
    return { success: true };
  }
  /**
   * Handle connection errors
   */
  handleError(error) {
    if (this.options.debug) {
      console.error("[ACP] Connection error:", error);
    }
  }
  /**
   * Handle disconnection
   */
  handleDisconnect() {
    if (this.options.debug) {
      console.error("[ACP] Client disconnected");
    }
    for (const session of this.sessions.values()) {
      if (session.agent) {
        session.agent.cancel();
      }
    }
    this.sessions.clear();
  }
  /**
   * Send tool call progress notification
   */
  sendToolCallProgress(sessionId, toolCallId, status, result = null, error = null) {
    const progress = createToolCallProgress(toolCallId, status, result, error);
    this.connection.sendNotification(NotificationMethod.TOOL_CALL_PROGRESS, {
      sessionId,
      ...progress
    });
  }
  /**
   * Send message chunk for streaming
   */
  sendMessageChunk(sessionId, chunk) {
    this.connection.sendNotification(NotificationMethod.MESSAGE_CHUNK, {
      sessionId,
      chunk
    });
  }
  /**
   * Get session statistics
   */
  getStats() {
    return {
      sessions: this.sessions.size,
      initialized: this.initialized,
      capabilities: this.capabilities
    };
  }
};

// src/agent/acp/tools.js
import { randomUUID as randomUUID5 } from "crypto";

// src/agent/index.js
function readInputContent(input) {
  if (!input) return null;
  try {
    const resolvedPath = resolve(input);
    if (existsSync2(resolvedPath)) {
      return readFileSync(resolvedPath, "utf-8").trim();
    }
  } catch (error) {
  }
  return input;
}
function readFromStdin() {
  return new Promise((resolve2, reject) => {
    let data = "";
    let hasReceivedData = false;
    let dataChunks = [];
    const timeout = setTimeout(() => {
      if (!hasReceivedData) {
        reject(new Error("INTERACTIVE_MODE"));
      }
    }, 100);
    process.stdin.setEncoding("utf8");
    process.stdin.on("readable", () => {
      let chunk;
      while ((chunk = process.stdin.read()) !== null) {
        hasReceivedData = true;
        clearTimeout(timeout);
        dataChunks.push(chunk);
        data += chunk;
      }
    });
    process.stdin.on("end", () => {
      clearTimeout(timeout);
      const trimmed = data.trim();
      if (!trimmed && dataChunks.length === 0) {
        reject(new Error("No input received from stdin"));
      } else {
        resolve2(trimmed);
      }
    });
    process.stdin.on("error", (error) => {
      clearTimeout(timeout);
      reject(error);
    });
    process.nextTick(() => {
      const chunk = process.stdin.read();
      if (chunk !== null) {
        hasReceivedData = true;
        clearTimeout(timeout);
        data += chunk;
        dataChunks.push(chunk);
      }
    });
  });
}
function parseArgs() {
  const args = process.argv.slice(2);
  const config = {
    mcp: false,
    acp: false,
    question: null,
    path: null,
    prompt: null,
    systemPrompt: null,
    schema: null,
    provider: null,
    model: null,
    allowEdit: false,
    verbose: false,
    help: false,
    maxIterations: null,
    traceFile: void 0,
    traceRemote: void 0,
    traceConsole: false,
    useStdin: false
    // New flag to indicate stdin should be used
  };
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg === "--mcp") {
      config.mcp = true;
    } else if (arg === "--acp") {
      config.acp = true;
    } else if (arg === "--help" || arg === "-h") {
      config.help = true;
    } else if (arg === "--verbose") {
      config.verbose = true;
    } else if (arg === "--allow-edit") {
      config.allowEdit = true;
    } else if (arg === "--path" && i + 1 < args.length) {
      config.path = args[++i];
    } else if (arg === "--prompt" && i + 1 < args.length) {
      config.prompt = args[++i];
    } else if (arg === "--system-prompt" && i + 1 < args.length) {
      config.systemPrompt = args[++i];
    } else if (arg === "--schema" && i + 1 < args.length) {
      config.schema = args[++i];
    } else if (arg === "--provider" && i + 1 < args.length) {
      config.provider = args[++i];
    } else if (arg === "--model" && i + 1 < args.length) {
      config.model = args[++i];
    } else if (arg === "--max-iterations" && i + 1 < args.length) {
      config.maxIterations = parseInt(args[++i], 10);
    } else if (arg === "--trace-file" && i + 1 < args.length) {
      config.traceFile = args[++i];
    } else if (arg === "--trace-remote" && i + 1 < args.length) {
      config.traceRemote = args[++i];
    } else if (arg === "--trace-console") {
      config.traceConsole = true;
    } else if (!arg.startsWith("--") && !config.question) {
      config.question = arg;
    }
  }
  if (!config.question && !config.mcp && !config.acp && !config.help) {
    config.useStdin = true;
  }
  return config;
}
function showHelp() {
  console.log(`
probe agent - AI-powered code exploration tool

Usage:
  probe agent <question>           Answer a question about the codebase
  probe agent <file>               Read question from file
  echo "question" | probe agent    Read question from stdin (pipe input)
  probe agent --mcp                Start as MCP server
  probe agent --acp                Start as ACP server

Options:
  --path <dir>                     Search directory (default: current)
  --prompt <type>                  Persona: code-explorer, engineer, code-review, support, architect
  --system-prompt <text|file>      Custom system prompt (text or file path)
  --schema <schema|file>           Output schema (JSON, XML, any format - text or file path)
  --provider <name>                Force AI provider: anthropic, openai, google
  --model <name>                   Override model name
  --allow-edit                     Enable code modification capabilities
  --verbose                        Enable verbose output
  --mcp                           Run as MCP server
  --acp                           Run as ACP server (Agent Client Protocol)
  --max-iterations <number>        Max tool iterations (default: 30)
  --trace-file <path>              Enable tracing to file (JSONL format)
  --trace-remote <endpoint>        Enable tracing to remote OTLP endpoint
  --trace-console                  Enable tracing to console output
  --help, -h                      Show this help message

Environment Variables:
  ANTHROPIC_API_KEY               Anthropic Claude API key
  OPENAI_API_KEY                  OpenAI GPT API key
  GOOGLE_API_KEY                  Google Gemini API key
  FORCE_PROVIDER                  Force specific provider (anthropic, openai, google)
  MODEL_NAME                      Override model name
  DEBUG                           Enable verbose mode (set to '1')

Examples:
  probe agent "How does authentication work?"
  probe agent question.txt        # Read question from file
  echo "How does the search algorithm work?" | probe agent  # Read from stdin
  cat requirements.txt | probe agent --prompt architect     # Pipe file content
  probe agent "Find all database queries" --path ./src --prompt engineer
  probe agent "Review this code for bugs" --prompt code-review --system-prompt custom-prompt.txt
  probe agent "List all functions" --schema '{"functions": [{"name": "string", "file": "string"}]}'
  probe agent "Analyze codebase" --schema schema.json  # Schema from file
  probe agent "Debug issue" --trace-file ./debug.jsonl --verbose
  probe agent "Analyze code" --trace-remote http://localhost:4318/v1/traces
  probe agent --mcp               # Start MCP server mode
  probe agent --acp               # Start ACP server mode

Personas:
  code-explorer    Default. Explores and explains code structure and functionality
  engineer         Senior engineer focused on implementation and architecture
  code-review      Reviews code for bugs, performance, and best practices
  support          Helps troubleshoot issues and solve problems
  architect        Focuses on software architecture and high-level design
`);
}
var ProbeAgentMcpServer = class {
  constructor() {
    this.server = new Server(
      {
        name: "@buger/probe-agent",
        version: "1.0.0"
      },
      {
        capabilities: {
          tools: {}
        }
      }
    );
    this.setupToolHandlers();
    this.server.onerror = (error) => console.error("[MCP Error]", error);
    process.on("SIGINT", async () => {
      await this.server.close();
      process.exit(0);
    });
  }
  setupToolHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        {
          name: "search_code",
          description: "Search code and answer questions about the codebase using an AI agent. This tool provides intelligent responses based on code analysis.",
          inputSchema: {
            type: "object",
            properties: {
              query: {
                type: "string",
                description: "The question or request about the codebase."
              },
              path: {
                type: "string",
                description: "Optional path to the directory to search in. Defaults to current directory."
              },
              prompt: {
                type: "string",
                description: "Optional persona type: code-explorer, engineer, code-review, support, architect."
              },
              system_prompt: {
                type: "string",
                description: "Optional custom system prompt (text or file path)."
              },
              provider: {
                type: "string",
                description: "Optional AI provider to force: anthropic, openai, google."
              },
              model: {
                type: "string",
                description: "Optional model name override."
              },
              allow_edit: {
                type: "boolean",
                description: "Enable code modification capabilities."
              },
              max_iterations: {
                type: "number",
                description: "Maximum number of tool iterations (default: 30)."
              },
              schema: {
                type: "string",
                description: "Optional output schema (JSON, XML, or any format - text or file path)."
              }
            },
            required: ["query"]
          }
        }
      ]
    }));
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      if (request.params.name !== "search_code") {
        throw new McpError(
          ErrorCode2.MethodNotFound,
          `Unknown tool: ${request.params.name}`
        );
      }
      try {
        const args = request.params.arguments;
        if (!args.query) {
          throw new Error("Query is required");
        }
        if (args.max_iterations) {
          process.env.MAX_TOOL_ITERATIONS = args.max_iterations.toString();
        }
        let systemPrompt = null;
        if (args.system_prompt) {
          systemPrompt = readInputContent(args.system_prompt);
          if (!systemPrompt) {
            throw new Error("System prompt could not be read");
          }
        }
        const query2 = readInputContent(args.query);
        if (!query2) {
          throw new Error("Query is required and could not be read");
        }
        let schema = null;
        if (args.schema) {
          schema = readInputContent(args.schema);
          if (!schema) {
            throw new Error("Schema could not be read");
          }
        }
        const agentConfig = {
          path: args.path || process.cwd(),
          promptType: args.prompt || "code-explorer",
          customPrompt: systemPrompt,
          provider: args.provider,
          model: args.model,
          allowEdit: !!args.allow_edit,
          debug: process.env.DEBUG === "1"
        };
        const agent = new ProbeAgent(agentConfig);
        let result = await agent.answer(query2, [], { schema });
        if (schema) {
          const schemaPrompt = `Now you need to respond according to this schema:

${schema}

Please reformat your previous response to match this schema exactly. Only return the formatted response, no additional text.`;
          try {
            result = await agent.answer(schemaPrompt, [], { schema });
            result = cleanSchemaResponse(result);
            try {
              const mermaidValidation = await validateAndFixMermaidResponse(result, {
                debug: args.debug,
                path: agentConfig.path,
                provider: args.provider,
                model: args.model
              });
              if (mermaidValidation.wasFixed) {
                result = mermaidValidation.fixedResponse;
                if (args.debug) {
                  console.error(`[DEBUG] Mermaid diagrams fixed using specialized agent`);
                  mermaidValidation.fixingResults.forEach((fixResult, index) => {
                    if (fixResult.wasFixed) {
                      console.error(`[DEBUG] Fixed diagram ${index + 1}: ${fixResult.originalError}`);
                    }
                  });
                }
              } else if (!mermaidValidation.isValid && mermaidValidation.diagrams && mermaidValidation.diagrams.length > 0 && args.debug) {
                console.error(`[DEBUG] Mermaid validation failed: ${mermaidValidation.errors?.join(", ")}`);
              }
            } catch (error) {
              if (args.debug) {
                console.error(`[DEBUG] Enhanced mermaid validation failed: ${error.message}`);
              }
            }
            if (isJsonSchema(schema)) {
              const validation = validateJsonResponse(result);
              if (!validation.isValid) {
                const correctionPrompt = createJsonCorrectionPrompt(result, schema, validation.error);
                try {
                  result = await agent.answer(correctionPrompt, [], { schema });
                  result = cleanSchemaResponse(result);
                  const finalValidation = validateJsonResponse(result);
                  if (!finalValidation.isValid && args.debug) {
                    console.error(`[DEBUG] JSON validation failed after retry: ${finalValidation.error}`);
                  }
                } catch (retryError) {
                  if (args.debug) {
                    console.error(`[DEBUG] JSON correction retry failed: ${retryError.message}`);
                  }
                }
              }
            }
          } catch (error) {
          }
        }
        const tokenUsage = agent.getTokenUsage();
        console.error(`Token usage: ${JSON.stringify(tokenUsage)}`);
        return {
          content: [
            {
              type: "text",
              text: result
            }
          ]
        };
      } catch (error) {
        console.error(`Error executing search_code:`, error);
        return {
          content: [
            {
              type: "text",
              text: `Error: ${error.message}`
            }
          ],
          isError: true
        };
      }
    });
  }
  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error("Probe Agent MCP server running on stdio");
  }
};
async function main() {
  const config = parseArgs();
  if (config.help) {
    showHelp();
    return;
  }
  if (config.mcp) {
    const server = new ProbeAgentMcpServer();
    await server.run();
    return;
  }
  if (config.acp) {
    const server = new ACPServer({
      provider: config.provider,
      model: config.model,
      path: config.path,
      allowEdit: config.allowEdit,
      debug: config.verbose
    });
    await server.start();
    return;
  }
  if (config.useStdin) {
    try {
      if (config.verbose) {
        console.error("[DEBUG] Reading question from stdin...");
      }
      config.question = await readFromStdin();
      if (!config.question) {
        console.error("Error: No input received from stdin");
        process.exit(1);
      }
    } catch (error) {
      if (error.message === "INTERACTIVE_MODE") {
        showHelp();
        process.exit(0);
      } else {
        console.error(`Error reading from stdin: ${error.message}`);
        process.exit(1);
      }
    }
  }
  if (!config.question) {
    showHelp();
    process.exit(1);
  }
  try {
    let telemetryConfig = null;
    let appTracer = null;
    if (config.traceFile !== void 0 || config.traceRemote !== void 0 || config.traceConsole) {
      try {
        telemetryConfig = initializeSimpleTelemetryFromOptions(config);
        appTracer = new SimpleAppTracer(telemetryConfig);
        if (config.verbose) {
          console.error("[DEBUG] Simple tracing initialized");
        }
      } catch (error) {
        if (config.verbose) {
          console.error(`[DEBUG] Failed to initialize tracing: ${error.message}`);
        }
      }
    }
    if (config.verbose) {
      process.env.DEBUG = "1";
    }
    if (config.provider) {
      process.env.FORCE_PROVIDER = config.provider;
    }
    if (config.model) {
      process.env.MODEL_NAME = config.model;
    }
    if (config.maxIterations) {
      process.env.MAX_TOOL_ITERATIONS = config.maxIterations.toString();
    }
    const question = readInputContent(config.question);
    if (!question) {
      console.error("Error: Question is required and could not be read");
      process.exit(1);
    }
    let systemPrompt = null;
    if (config.systemPrompt) {
      systemPrompt = readInputContent(config.systemPrompt);
      if (!systemPrompt) {
        console.error("Error: System prompt could not be read");
        process.exit(1);
      }
    }
    let schema = null;
    if (config.schema) {
      schema = readInputContent(config.schema);
      if (!schema) {
        console.error("Error: Schema could not be read");
        process.exit(1);
      }
    }
    const agentConfig = {
      path: config.path,
      promptType: config.prompt,
      customPrompt: systemPrompt,
      allowEdit: config.allowEdit,
      debug: config.verbose,
      tracer: appTracer
    };
    const agent = new ProbeAgent(agentConfig);
    let result;
    if (appTracer) {
      const sessionSpan = appTracer.createSessionSpan({
        "question": question.substring(0, 100) + (question.length > 100 ? "..." : ""),
        "path": config.path || process.cwd(),
        "prompt_type": config.prompt || "code-explorer"
      });
      try {
        result = await appTracer.withSpan(
          "agent.answer",
          () => agent.answer(question, [], { schema }),
          { "question.length": question.length }
        );
      } finally {
        if (sessionSpan) {
          sessionSpan.end();
        }
      }
    } else {
      result = await agent.answer(question, [], { schema });
    }
    if (schema) {
      if (config.verbose) {
        console.error("[DEBUG] Schema provided, making follow-up request to format output...");
      }
      const schemaPrompt = `Now you need to respond according to this schema:

${schema}

Please reformat your previous response to match this schema exactly. Only return the formatted response, no additional text.`;
      try {
        if (appTracer) {
          result = await appTracer.withSpan(
            "agent.schema_formatting",
            () => agent.answer(schemaPrompt, [], { schema }),
            { "schema.length": schema.length }
          );
        } else {
          result = await agent.answer(schemaPrompt, [], { schema });
        }
        const cleaningResult = processSchemaResponse(result, schema, {
          debug: config.verbose
        });
        result = cleaningResult.cleaned;
        if (config.verbose && cleaningResult.debug && cleaningResult.debug.wasModified) {
          console.error("[DEBUG] Schema response was cleaned:");
          console.error(`  Original length: ${cleaningResult.debug.originalLength}`);
          console.error(`  Cleaned length: ${cleaningResult.debug.cleanedLength}`);
        }
        try {
          const mermaidValidationResult = await validateAndFixMermaidResponse(result, {
            debug: config.verbose,
            path: config.path,
            provider: config.provider,
            model: config.model,
            tracer: appTracer
          });
          if (mermaidValidationResult.wasFixed) {
            result = mermaidValidationResult.fixedResponse;
            if (config.verbose) {
              console.error(`[DEBUG] Mermaid diagrams fixed using specialized agent`);
              mermaidValidationResult.fixingResults.forEach((fixResult, index) => {
                if (fixResult.wasFixed) {
                  console.error(`[DEBUG] Fixed diagram ${index + 1}: ${fixResult.originalError}`);
                }
              });
            }
          } else if (!mermaidValidationResult.isValid && mermaidValidationResult.diagrams && mermaidValidationResult.diagrams.length > 0 && config.verbose) {
            console.error(`[DEBUG] Mermaid validation failed: ${mermaidValidationResult.errors?.join(", ")}`);
          }
        } catch (error) {
          if (config.verbose) {
            console.error(`[DEBUG] Enhanced mermaid validation failed: ${error.message}`);
          }
        }
        if (isJsonSchema(schema)) {
          const validation = validateJsonResponse(result);
          if (!validation.isValid) {
            if (config.verbose) {
              console.error(`[DEBUG] JSON validation failed: ${validation.error}`);
              console.error("[DEBUG] Attempting to correct JSON...");
            }
            const correctionPrompt = createJsonCorrectionPrompt(result, schema, validation.error);
            try {
              if (appTracer) {
                result = await appTracer.withSpan(
                  "agent.json_correction",
                  () => agent.answer(correctionPrompt, [], { schema }),
                  { "original_error": validation.error }
                );
              } else {
                result = await agent.answer(correctionPrompt, [], { schema });
              }
              result = cleanSchemaResponse(result);
              const finalValidation = validateJsonResponse(result);
              if (config.verbose) {
                if (finalValidation.isValid) {
                  console.error("[DEBUG] JSON correction successful");
                } else {
                  console.error(`[DEBUG] JSON validation failed after retry: ${finalValidation.error}`);
                }
              }
            } catch (retryError) {
              if (config.verbose) {
                console.error(`[DEBUG] JSON correction retry failed: ${retryError.message}`);
              }
            }
          } else if (config.verbose) {
            console.error("[DEBUG] JSON validation passed");
          }
        }
      } catch (error) {
        if (config.verbose) {
          console.error("[DEBUG] Schema formatting failed, using original result");
        }
      }
    }
    console.log(result);
    if (config.verbose) {
      const tokenUsage = agent.getTokenUsage();
      console.error(`
[DEBUG] Token usage: ${JSON.stringify(tokenUsage, null, 2)}`);
    }
    if (appTracer) {
      try {
        await appTracer.flush();
        if (config.verbose) {
          console.error("[DEBUG] Tracing flushed");
        }
      } catch (error) {
        if (config.verbose) {
          console.error(`[DEBUG] Failed to flush tracing: ${error.message}`);
        }
      }
    }
  } catch (error) {
    console.error(`Error: ${error.message}`);
    if (config.verbose) {
      console.error(error.stack);
    }
    process.exit(1);
  }
}
process.on("uncaughtException", (error) => {
  console.error("Uncaught Exception:", error);
  process.exit(1);
});
process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);
  process.exit(1);
});
main().catch((error) => {
  console.error("Fatal error:", error);
  process.exit(1);
});
