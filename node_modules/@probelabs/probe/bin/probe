#!/usr/bin/env node

import { spawn } from 'child_process';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Check if first argument is 'mcp'
if (process.argv[2] === 'mcp') {
  // Launch MCP server instead of binary
  const mcpPath = join(__dirname, '..', 'build', 'mcp', 'index.js');
  const mcpArgs = process.argv.slice(3); // Remove 'node', 'probe', and 'mcp'
  
  const child = spawn('node', [mcpPath, ...mcpArgs], { stdio: 'inherit' });
  child.on('exit', (code) => process.exit(code || 0));
} else if (process.argv[2] === 'agent') {
  // Launch Agent server instead of binary
  const agentPath = join(__dirname, '..', 'src', 'agent', 'index.js');
  const agentArgs = process.argv.slice(3); // Remove 'node', 'probe', and 'agent'
  
  const child = spawn('node', [agentPath, ...agentArgs], { stdio: 'inherit' });
  child.on('exit', (code) => process.exit(code || 0));
} else {
  // Normal probe binary execution
  const isWindows = process.platform === 'win32';
  const binaryName = isWindows ? 'probe.exe' : 'probe-binary';
  const binaryPath = join(__dirname, binaryName);
  
  const child = spawn(binaryPath, process.argv.slice(2), { stdio: 'inherit' });
  child.on('exit', (code) => process.exit(code || 0));
}