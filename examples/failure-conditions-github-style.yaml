version: "1.0"

# Failure conditions using GitHub Actions-like syntax
# This example shows how to use familiar GitHub Actions expression functions

# Global failure conditions that apply to all checks
failure_conditions:
  # Using success() and failure() functions like GitHub Actions
  check_must_succeed: "!failure()"

  # Using contains() like GitHub Actions
  no_sql_injection:
    condition: '!contains(checkName, "skip") || !output.issues.some(i => i.severity === "critical")'
    message: "Critical issues found in non-skipped checks"
    severity: error

  # Using startsWith() for check name patterns
  security_checks_strict:
    condition: 'startsWith(checkName, "security") && output.issues.length == 0'
    message: "Security checks must have zero issues"
    severity: error

steps:
  # Security check with GitHub Actions-style conditions
  security-scan:
    type: ai
    schema: code-review
    prompt: "Analyze for security vulnerabilities"
    on: [pr_opened, pr_updated]

    failure_conditions:
      # Using contains() to check for specific text in file paths
      sensitive_files:
        condition: 'hasFileMatching(output.issues, ".env") || hasFileMatching(output.issues, "secret")'
        message: "Issues found in sensitive files"
        severity: error

      # Using success() to check overall health
      must_complete_successfully:
        condition: "success() || always()"
        message: "Check completed"
        severity: info

  # Performance check with familiar syntax
  performance-check:
    type: ai
    schema: code-review
    prompt: "Review for performance issues"
    on: [pr_opened, pr_updated]

    failure_conditions:
      # Combining multiple GitHub Actions-like functions
      performance_gates:
        condition: |
          !failure() &&
          !contains(checkName, "skip") &&
          !output.issues.some(i => i.severity === "critical")
        message: "Performance check passed quality gates"
        severity: info

      # Using endsWith() for file type checking
      frontend_performance:
        condition: 'hasFileMatching(output.issues, ".js") || hasFileMatching(output.issues, ".tsx")'
        message: "Frontend performance issues detected"
        severity: warning

  # Style check with conditional logic
  code-style:
    type: ai
    schema: code-review
    prompt: "Check code style and formatting"
    on: [pr_opened, pr_updated]

    failure_conditions:
      # Complex condition similar to GitHub Actions
      style_enforcement:
        condition: |
          (checkName.includes('code-review') && output.issues.filter(i => i.severity === 'warning').length > 5) ||
          (contains(checkName, 'strict') && output.issues.length > 0)
        message: "Style violations exceed threshold"
        severity: warning

      # Always pass for draft PRs (conceptual example)
      draft_pr_lenient:
        condition: "always()"
        message: "Style check completed"
        severity: info

# Comparison with GitHub Actions syntax:
#
# GitHub Actions:
#   if: contains(github.event.head_commit.message, 'skip-ci')
#
# Visor (JavaScript):
#   condition: "contains(commit.message, 'skip-ci')"
#
# GitHub Actions:
#   if: success() && github.event_name == 'pull_request'
#
# Visor (JavaScript):
#   condition: "success() && event.name == 'pull_request'"
#
# GitHub Actions:
#   if: failure() || cancelled()
#
# Visor (JavaScript):
#   condition: "failure() || metadata.cancelled"
#
# GitHub Actions:
#   if: startsWith(github.ref, 'refs/heads/release')
#
# Visor (JavaScript):
#   condition: "startsWith(event.ref, 'refs/heads/release')"

output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: true