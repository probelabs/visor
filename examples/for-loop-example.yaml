version: "1.0"
# Example demonstrating Liquid template for loops in Visor

checks:
  # Example 1: Loop through all files in PR
  file-summary:
    type: log
    level: info
    message: |
      📁 File Changes Summary:

      Total files changed: {{ files | size }}

      {% for file in files %}
      - {{ file.filename }}
        Status: {{ file.status }}
        Changes: +{{ file.additions }}/-{{ file.deletions }}
      {% endfor %}

  # Example 2: Loop with conditions - only show large files
  large-files:
    type: log
    level: warning
    message: |
      ⚠️ Large File Changes (>100 lines):

      {% for file in files %}
        {% assign total_changes = file.additions | plus: file.deletions %}
        {% if total_changes > 100 %}
      - {{ file.filename }}: {{ total_changes }} lines changed
        {% endif %}
      {% endfor %}

  # Example 3: Group files by extension using nested loops
  files-by-type:
    type: log
    level: info
    message: |
      📊 Files Grouped by Extension:

      {% for ext, files in utils.filesByExtension %}
      {{ ext | upcase }} Files ({{ files | size }}):
        {% for file in files %}
        - {{ file.filename }} ({{ file.status }})
        {% endfor %}
      {% endfor %}

  # Example 4: Create markdown table from files
  file-table:
    type: log
    level: info
    message: |
      ## File Change Details

      | File | Type | Status | Additions | Deletions |
      |------|------|--------|-----------|-----------|
      {% for file in files %}
      | `{{ file.filename }}` | {{ file.filename | split: "." | last }} | {{ file.status }} | +{{ file.additions }} | -{{ file.deletions }} |
      {% endfor %}

  # Example 5: Loop through check outputs (when using dependencies)
  dependency-summary:
    type: log
    level: info
    depends_on: [file-summary, large-files]
    message: |
      📋 Previous Check Results:

      {% for checkName, result in outputs %}
      Check: {{ checkName }}
      {% if result.issues %}
        Issues found: {{ result.issues | size }}
        {% for issue in result.issues %}
        - {{ issue.severity }}: {{ issue.message }}
        {% endfor %}
      {% else %}
        No issues found
      {% endif %}
      {% endfor %}

  # Example 6: Advanced filtering and counting
  security-file-scan:
    type: ai
    prompt: |
      Review these security-sensitive files:

      {% assign security_files = 0 %}
      {% for file in files %}
        {% if file.filename contains ".env" or file.filename contains "config" or file.filename contains "secret" %}
          {% assign security_files = security_files | plus: 1 %}
      - {{ file.filename }} (SECURITY SENSITIVE)
        {% endif %}
      {% endfor %}

      {% if security_files == 0 %}
      No security-sensitive files detected in this PR.
      {% else %}
      Found {{ security_files }} security-sensitive files. Please review carefully.
      {% endif %}

  # Example 7: Create JSON from loop data
  json-output:
    type: command
    exec: |
      echo '{
        "files": [
          {% for file in files %}
          {
            "name": {{ file.filename | json }},
            "status": {{ file.status | json }},
            "additions": {{ file.additions }},
            "deletions": {{ file.deletions }}
          }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ],
        "total": {{ files | size }}
      }' | jq .

  # Example 8: Loop with index
  numbered-list:
    type: log
    level: info
    message: |
      📝 Files (numbered):

      {% for file in files %}
      {{ forloop.index }}. {{ file.filename }}
         - First in loop: {{ forloop.first }}
         - Last in loop: {{ forloop.last }}
         - Index (0-based): {{ forloop.index0 }}
         - Index (1-based): {{ forloop.index }}
      {% endfor %}

  # Example 9: Break and continue (using unless/if)
  filter-files:
    type: log
    level: info
    message: |
      📂 Non-test TypeScript files:

      {% for file in files %}
        {% unless file.filename contains ".test." %}
          {% if file.filename endswith ".ts" or file.filename endswith ".tsx" %}
      - {{ file.filename }}
          {% endif %}
        {% endunless %}
      {% endfor %}

  # Example 10: Complex nested structure
  pr-analysis:
    type: ai
    prompt: |
      Analyze this PR structure:

      {% for ext, files in utils.filesByExtension %}
      {% if files.size > 0 %}
      === {{ ext | upcase }} Files ({{ files.size }}) ===

      New files:
      {% for file in files %}
        {% if file.status == "added" %}
      - {{ file.filename }}
        {% endif %}
      {% endfor %}

      Modified files:
      {% for file in files %}
        {% if file.status == "modified" %}
      - {{ file.filename }} ({{ file.changes }} lines)
        {% endif %}
      {% endfor %}

      {% endif %}
      {% endfor %}

      Focus your review on the files with the most changes.