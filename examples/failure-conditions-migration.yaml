# Migration Example: Before and After
# This example shows how to migrate from basic configuration to failure conditions

version: "1.0"

# BEFORE: Simple configuration without failure conditions
# checks:
#   security:
#     type: ai
#     prompt: "Security analysis..."
#     on: [pr_opened, pr_updated]

# AFTER: Enhanced configuration with failure conditions

# Global failure conditions - start simple
failure_conditions:
  # Basic quality gate
  default_quality_gate: "output.issues.length > 20"

  # Critical issue blocker
  critical_blocker:
    condition: "output.issues.some(i => i.severity === 'critical')"
    message: "Critical issues found - deployment blocked"
    severity: error
    halt_execution: true

checks:
  # Migrated security check with failure conditions
  security:
    type: ai
    group: review
    schema: code-review
    prompt: |
      Analyze security vulnerabilities in the code changes.
      Look for common security issues and provide specific recommendations.
    on: [pr_opened, pr_updated]

    # Start with simple check-specific conditions
    failure_conditions:
      # Security-specific gate
      security_gate: "output.issues.some(i => i.severity === 'error')"

      # Specific security patterns
      sensitive_operations:
        condition: "hasFileWith(output.issues, 'password') || hasFileWith(output.issues, 'token')"
        message: "Sensitive security operations detected"
        severity: warning

  # New performance check with conditions
  performance:
    type: ai
    group: review
    schema: code-review
    prompt: |
      Analyze performance implications of code changes.
    on: [pr_opened, pr_updated]

    failure_conditions:
      # Performance threshold
      performance_issues: "output.issues.filter(i => i.severity === 'error').length > 2"

# Output configuration
output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: false

# Migration Steps:
# 1. Add global failure_conditions section with basic conditions
# 2. Add group and schema to existing checks
# 3. Add check-specific failure_conditions as needed
# 4. Test conditions using debug mode
# 5. Gradually refine expressions based on results