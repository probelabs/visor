version: "1.0"
# Example demonstrating the forEach flag in Visor checks
# forEach allows a check to output an array, and dependent checks will run once for each item

steps:
  # Step 1: Get a list of JSON files (outputs an array)
  list-json-files:
    type: command
    exec: |
      # This outputs a JSON array of file paths
      find . -name "*.json" -type f | head -5 | jq -R -s -c 'split("\n")[:-1]'
    forEach: true  # Enable forEach - output will be treated as an array for iteration
    group: validation

  # Step 2: This check will run once for each JSON file from list-json-files
  validate-each-json:
    type: command
    exec: |
      # {{ outputs.list-json-files }} will be a single file path, not the array
      echo "Validating: {{ outputs.list-json-files }}"
      jsonlint "{{ outputs.list-json-files }}" 2>&1 || echo "Invalid JSON: {{ outputs.list-json-files }}"
    depends_on: [list-json-files]
    group: validation

  # Another example: Process multiple PR files
  get-changed-js-files:
    type: command
    exec: |
      # Output array of JavaScript files from the PR
      echo '{{ files | json }}' | jq '[.[] | select(.filename | endswith(".js")) | .filename]'
    forEach: true
    group: analysis

  # This runs for each JS file
  analyze-each-js-file:
    type: command
    exec: |
      echo "Analyzing file: {{ outputs.get-changed-js-files }}"
      # Could run ESLint, complexity analysis, etc.
      wc -l "{{ outputs.get-changed-js-files }}" 2>/dev/null || echo "File not found locally"
    depends_on: [get-changed-js-files]
    group: analysis

  # Example with AI checks
  list-security-concerns:
    type: ai
    prompt: |
      List the top 3 security-sensitive files in this PR as a JSON array of strings.
      Only include file paths, nothing else.
      Return format: ["file1.js", "file2.py", "file3.yml"]
    schema: plain
    forEach: true  # The AI output (array) will be used for iteration
    group: security

  # This AI check runs for each security-sensitive file
  deep-security-review:
    type: ai
    prompt: |
      Perform a detailed security review of this specific file:
      {{ outputs.list-security-concerns }}

      Focus only on this one file and provide specific security recommendations.
    depends_on: [list-security-concerns]
    group: security

  # Example with transform to create array
  extract-functions:
    type: command
    exec: |
      # Extract function names from a TypeScript file
      grep -o "function [a-zA-Z_][a-zA-Z0-9_]*" src/example.ts | cut -d' ' -f2
    transform: |
      {{ output | split: "\n" | json }}
    forEach: true
    group: documentation

  # Document each function
  document-function:
    type: ai
    prompt: |
      Write JSDoc documentation for the function named: {{ outputs.extract-functions }}
    depends_on: [extract-functions]
    group: documentation

  # Complex example: Process webhook data
  get-jira-tickets:
    type: http_client
    url: "https://api.example.com/jira/tickets?pr={{ pr.number }}"
    transform: |
      {{ data.issues | json }}
    forEach: true
    group: tracking

  update-each-ticket:
    type: http
    url: "https://api.example.com/jira/ticket/{{ outputs.get-jira-tickets.id }}"
    body: |
      {
        "status": "in-review",
        "pr_number": {{ pr.number }},
        "reviewer": "{{ pr.author }}"
      }
    depends_on: [get-jira-tickets]
    group: tracking

# How forEach works:
# 1. A check with forEach: true outputs an array (or string that can be parsed as array)
# 2. The check stores this array internally as forEachItems
# 3. Any check that depends on a forEach check will:
#    - Execute once for each item in the array
#    - Receive a single item (not the array) in outputs.<check-name>
#    - Aggregate all results from all iterations
#
# Example execution flow:
# - list-json-files outputs: ["file1.json", "file2.json", "file3.json"]
# - validate-each-json runs 3 times:
#   - Run 1: outputs.list-json-files = "file1.json"
#   - Run 2: outputs.list-json-files = "file2.json"
#   - Run 3: outputs.list-json-files = "file3.json"
# - All issues from all runs are collected and reported together