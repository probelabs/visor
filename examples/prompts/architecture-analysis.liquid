# 🏗️ Architecture Analysis for {{ event.repository.fullName }}

## Pull Request Overview
**PR #{{ pr.number }}**: {{ pr.title }}
- **Author**: {{ pr.author }}
- **Changes**: {{ utils.totalFiles }} files with {{ pr.totalAdditions }} additions and {{ pr.totalDeletions }} deletions

{% if pr.body %}
### Description
{{ pr.body }}
{% endif %}

## Previous Analysis Context

{% if outputs.security or outputs.performance or outputs.style %}
### Related Findings from Previous Checks:

{% if outputs.security %}
**Security Analysis**: {{ outputs.security.totalIssues }} issues found
{% if outputs.security.criticalIssues > 0 %}
- 🚨 {{ outputs.security.criticalIssues }} critical security issues require architectural consideration
{% endif %}
{% endif %}

{% if outputs.performance %}
**Performance Analysis**: {{ outputs.performance.totalIssues }} issues found  
{% if outputs.performance.errorIssues > 0 %}
- ⚡ {{ outputs.performance.errorIssues }} performance errors may indicate architectural problems
{% endif %}
{% endif %}

{% if outputs.style %}
**Code Style Analysis**: {{ outputs.style.totalIssues }} issues found
{% endif %}

{% else %}
*No previous analysis results available - performing standalone architectural review.*
{% endif %}

## Component Analysis

### File Organization
{% for ext, files in utils.filesByExtension %}
- **{{ ext | upcase }} files**: {{ files.size }}
  {% for file in files %}
  - `{{ file.filename }}` ({{ file.status }}{% if file.changes > 100 %}, large change: {{ file.changes }} lines{% endif %})
  {% endfor %}
{% endfor %}

### Change Impact Assessment

{% if utils.addedFiles.size > 0 %}
#### New Components ({{ utils.addedFiles.size }})
{% for file in utils.addedFiles %}
- `{{ file.filename }}` - New component requiring integration analysis
{% endfor %}
{% endif %}

{% if utils.modifiedFiles.size > 0 %}
#### Modified Components ({{ utils.modifiedFiles.size }}) 
{% for file in utils.modifiedFiles %}
- `{{ file.filename }}` - Changes may affect dependent systems
{% endfor %}
{% endif %}

{% if utils.removedFiles.size > 0 %}
#### Removed Components ({{ utils.removedFiles.size }})
{% for file in utils.removedFiles %}
- `{{ file.filename }}` - Removal may break dependent systems
{% endfor %}
{% endif %}

## Architecture Review Focus

### 1. System Design Principles
Evaluate adherence to:
- **Single Responsibility Principle**: Each module has one clear purpose
- **Open/Closed Principle**: Code is open for extension, closed for modification
- **Dependency Inversion**: Depend on abstractions, not concretions
- **Separation of Concerns**: Clear boundaries between different functionalities

### 2. Module Dependencies
- Analyze dependency relationships and circular dependencies
- Evaluate coupling between components
- Assess cohesion within modules
- Review dependency injection patterns

### 3. Scalability & Maintainability
- Code reusability and extensibility
- Configuration management approach
- Error handling and logging architecture
- Documentation and code clarity

### 4. Integration Patterns
- API design and contracts
- Database schema changes and migration strategy
- Event handling and messaging patterns
- Service boundaries and interfaces

### 5. Technical Debt Assessment
- Code duplication and refactoring opportunities
- Legacy code integration concerns
- Performance architecture implications
- Testing strategy and coverage architecture

## Deliverables

Please provide a comprehensive architectural analysis in markdown format including:

1. **Architecture Impact Summary** - High-level assessment of changes
2. **Component Interaction Diagram** - Mermaid diagram showing relationships
3. **Risk Assessment** - Potential architectural risks and mitigation strategies
4. **Recommendations** - Specific suggestions for architectural improvements
5. **Migration Considerations** - Any deployment or database migration concerns

Focus on how these changes fit into the overall system architecture and their long-term maintainability implications.