# Memory Example: Workflow State Machine
#
# This example demonstrates using memory to implement a state machine
# for managing a multi-step workflow.

version: "1.0"

memory:
  storage: file
  file: ./workflow-state.json
  format: json
  namespace: deployment

steps:
  # Initialize workflow state
  init-state:
    type: memory
    operation: set
    key: state
    value: pending
    namespace: deployment

  # Track start time
  track-start:
    type: memory
    operation: set
    key: start_time
    value_js: "Date.now()"
    depends_on: [init-state]

  # Step 1: Build
  build:
    type: command
    exec: npm run build
    depends_on: [track-start]
    on_success:
      run: [set-state-built]
    on_fail:
      run: [set-state-build-failed]

  set-state-built:
    type: memory
    operation: set
    key: state
    value: built

  set-state-build-failed:
    type: memory
    operation: set
    key: state
    value: build_failed

  # Step 2: Test (only if built)
  test:
    type: command
    exec: npm test
    depends_on: [set-state-built]
    if: 'memory.get("state") === "built"'
    on_success:
      run: [set-state-tested]
    on_fail:
      run: [set-state-test-failed]

  set-state-tested:
    type: memory
    operation: set
    key: state
    value: tested

  set-state-test-failed:
    type: memory
    operation: set
    key: state
    value: test_failed

  # Step 3: Deploy (only if tested)
  deploy:
    type: command
    exec: npm run deploy
    depends_on: [set-state-tested]
    if: 'memory.get("state") === "tested"'
    on_success:
      run: [set-state-deployed]
    on_fail:
      run: [set-state-deploy-failed]

  set-state-deployed:
    type: memory
    operation: set
    key: state
    value: deployed

  set-state-deploy-failed:
    type: memory
    operation: set
    key: state
    value: deploy_failed

  # Track end time
  track-end:
    type: memory
    operation: set
    key: end_time
    value_js: "Date.now()"
    depends_on: [deploy, set-state-build-failed, set-state-test-failed, set-state-deploy-failed]

  # Calculate duration
  calculate-duration:
    type: memory
    operation: set
    key: duration_seconds
    value_js: |
      const start = memory.get('start_time');
      const end = memory.get('end_time');
      return Math.round((end - start) / 1000);
    depends_on: [track-end]

  # Report final state
  report-state:
    type: log
    depends_on: [calculate-duration]
    message: |
      {% assign state = "state" | memory_get %}
      {% assign duration = "duration_seconds" | memory_get %}

      ## Workflow Status: {{ state | upcase }}

      **Duration**: {{ duration }} seconds

      {% case state %}
      {% when "deployed" %}
      ✅ **Deployment Successful!**

      All steps completed:
      1. ✅ Build
      2. ✅ Test
      3. ✅ Deploy

      {% when "build_failed" %}
      ❌ **Build Failed**

      The build step failed. Please check the logs.

      {% when "test_failed" %}
      ❌ **Tests Failed**

      Build succeeded, but tests failed.

      {% when "deploy_failed" %}
      ❌ **Deployment Failed**

      Build and tests passed, but deployment failed.

      {% else %}
      ⏳ **Workflow In Progress**

      Current state: {{ state }}
      {% endcase %}

  # Fail workflow if not deployed
  check-deployment:
    type: noop
    depends_on: [report-state]
    fail_if: 'memory.get("state") !== "deployed"'

output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: true
