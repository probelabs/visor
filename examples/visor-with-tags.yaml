# Visor Configuration with Tags - Complete Example
# This configuration demonstrates how to use tags for different execution profiles
version: "1.0"

# Global tag filter (can be overridden by CLI/GitHub Actions)
tag_filter:
  # Uncomment to set default filters:
  # include: ["local", "fast"]
  # exclude: ["experimental"]

# Global settings
ai_provider: google  # or anthropic, openai
ai_model: gemini-1.5-flash  # or claude-3-opus, gpt-4

# Check definitions with comprehensive tagging
steps:
  # ============================================
  # SECURITY CHECKS
  # ============================================

  security-quick:
    type: ai
    group: security
    schema: code-review
    prompt: |
      Quick security scan focusing on:
      - Obvious vulnerabilities (hardcoded secrets, SQL injection)
      - Authentication issues
      - Common security anti-patterns
      Return results quickly, prioritize critical issues.
    tags: ["security", "fast", "local", "critical"]
    on: [pr_opened, pr_updated, manual]

  security-comprehensive:
    type: ai
    group: security
    schema: code-review
    prompt: |
      Comprehensive security audit including:
      - All OWASP Top 10 vulnerabilities
      - Supply chain security issues
      - Cryptographic weaknesses
      - Access control problems
      - Data exposure risks
      - Third-party dependency vulnerabilities
      Provide detailed analysis with remediation steps.
    tags: ["security", "comprehensive", "slow", "remote", "critical"]
    on: [pr_opened]
    depends_on: [security-quick]  # Build on quick findings

  security-dependencies:
    type: command
    group: security
    exec: "npm audit --json"
    tags: ["security", "dependencies", "fast", "local", "remote"]
    on: [pr_opened, pr_updated]

  # ============================================
  # PERFORMANCE CHECKS
  # ============================================

  performance-basic:
    type: ai
    group: performance
    schema: code-review
    prompt: |
      Basic performance analysis:
      - Algorithm complexity (O(nÂ²) or worse)
      - Database query efficiency
      - Memory leaks
      - Caching opportunities
    tags: ["performance", "fast", "local"]
    on: [pr_opened, pr_updated]

  performance-advanced:
    type: ai
    group: performance
    schema: code-review
    prompt: |
      Advanced performance analysis:
      - Concurrency issues and race conditions
      - Resource pool exhaustion
      - Micro-optimization opportunities
      - Distributed system bottlenecks
      - Load testing recommendations
    tags: ["performance", "comprehensive", "slow", "remote"]
    on: [pr_opened]
    depends_on: [performance-basic]

  # ============================================
  # CODE QUALITY CHECKS
  # ============================================

  style-check:
    type: ai
    group: quality
    schema: code-review
    prompt: |
      Code style and formatting:
      - Naming conventions
      - Code organization
      - Documentation completeness
      - Consistent patterns
    tags: ["style", "fast", "local"]
    on: [pr_opened, pr_updated]

  architecture-review:
    type: ai
    group: quality
    schema: code-review
    prompt: |
      Architecture and design patterns:
      - SOLID principles adherence
      - Design pattern usage
      - Module boundaries
      - Coupling and cohesion
      - Technical debt identification
    tags: ["architecture", "comprehensive", "remote"]
    on: [pr_opened]

  test-coverage:
    type: command
    group: quality
    exec: "npm test -- --coverage --json"
    tags: ["testing", "fast", "local", "ci"]
    on: [pr_opened, pr_updated]

  # ============================================
  # EXPERIMENTAL/BETA CHECKS
  # ============================================

  ai-refactoring-suggestions:
    type: claude-code
    group: experimental
    prompt: |
      Analyze the code and suggest refactoring opportunities.
      Use MCP tools to understand the codebase structure.
      Provide specific, actionable refactoring suggestions.
    tags: ["experimental", "refactoring", "claude", "slow"]
    claude_code:
      allowedTools: ['Grep', 'Read', 'analyze_file_structure']
      maxTurns: 10
    on: [manual]  # Only run when explicitly requested

  accessibility-check:
    type: ai
    group: experimental
    schema: code-review
    prompt: "Check for accessibility issues in UI components"
    tags: ["experimental", "accessibility", "frontend"]
    on: [pr_opened]
    if: "filesChanged.some(f => f.endsWith('.jsx') || f.endsWith('.tsx'))"

  # ============================================
  # REPORTING AND AGGREGATION
  # ============================================

  summary-report:
    type: noop  # No-op provider for orchestration
    group: summary
    tags: ["reporting", "local", "remote"]
    depends_on:
      - security-quick
      - performance-basic
      - style-check
    on: [pr_opened, pr_updated]

  comprehensive-report:
    type: noop
    group: summary
    tags: ["reporting", "comprehensive", "remote"]
    depends_on:
      - security-comprehensive
      - performance-advanced
      - architecture-review
    on: [pr_opened]

# Output configuration
output:
  pr_comment:
    format: markdown
    group_by: group
    collapse: true

  github_checks:
    enabled: true
    per_check: false  # Create one combined check

# Environment-specific overrides (use with extends)
# Example: .visor.dev.yaml could extend this and set:
# tag_filter:
#   include: ["local", "fast"]
#   exclude: ["experimental", "comprehensive"]

# Example: .visor.prod.yaml could extend this and set:
# tag_filter:
#   include: ["critical", "comprehensive", "remote"]
#   exclude: ["experimental"]