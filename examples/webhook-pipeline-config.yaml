version: "1.0"

# HTTP server for receiving external webhook events
# Note: ${...} syntax reads from environment variables
# This server is automatically disabled when running in GitHub Actions
http_server:
  enabled: true
  port: 3000
  host: "localhost"
  auth:
    type: hmac
    secret: "${HMAC_SECRET}"  # Read from HMAC_SECRET environment variable
  endpoints:
    - path: "/github/push"
      name: "github-push"
      transform: |
        {
          "repository": "{{ webhook.repository.full_name }}",
          "branch": "{{ webhook.ref | replace: 'refs/heads/', '' }}",
          "commit": "{{ webhook.after }}",
          "author": "{{ webhook.pusher.name }}",
          "files": {{ webhook.commits | map: 'modified' | flatten | uniq | json }}
        }
    - path: "/jira/issue"
      name: "jira-webhook"
      transform: |
        {
          "issue_key": "{{ webhook.issue.key }}",
          "status": "{{ webhook.issue.fields.status.name }}",
          "assignee": "{{ webhook.issue.fields.assignee.displayName }}",
          "priority": "{{ webhook.issue.fields.priority.name }}"
        }

checks:
  # === GitHub Push Pipeline ===

  # Receive GitHub push events
  github-push-receiver:
    type: webhook_input
    endpoint: "/github/push"
    on: [webhook_received]

  # Analyze the pushed code
  push-code-analysis:
    type: ai
    depends_on: [github-push-receiver]
    prompt: |
      GitHub push received:
      - Repository: {{ outputs['github-push-receiver'].repository }}
      - Branch: {{ outputs['github-push-receiver'].branch }}
      - Commit: {{ outputs['github-push-receiver'].commit }}
      - Modified files: {{ outputs['github-push-receiver'].files }}

      Analyze the push for:
      1. Breaking changes
      2. Security vulnerabilities introduced
      3. Code quality issues
      4. Missing tests
    schema: code-review
    group: push-analysis

  # Notify development team about push analysis
  notify-dev-team:
    type: webhook
    depends_on: [push-code-analysis]
    url: "${DEV_TEAM_WEBHOOK}"  # Read from DEV_TEAM_WEBHOOK environment variable
    body: |
      {
        "channel": "#dev-notifications",
        "username": "Visor Bot",
        "icon_emoji": ":robot_face:",
        "attachments": [
          {
            "color": "{% if outputs['push-code-analysis'].criticalIssues > 0 %}danger{% elsif outputs['push-code-analysis'].errorIssues > 0 %}warning{% else %}good{% endif %}",
            "title": "Push Analysis for {{ outputs['github-push-receiver'].repository }}",
            "fields": [
              {
                "title": "Branch",
                "value": "{{ outputs['github-push-receiver'].branch }}",
                "short": true
              },
              {
                "title": "Commit",
                "value": "{{ outputs['github-push-receiver'].commit | slice: 0, 8 }}",
                "short": true
              },
              {
                "title": "Issues Found",
                "value": "{{ outputs['push-code-analysis'].totalIssues }}",
                "short": true
              },
              {
                "title": "Severity",
                "value": "Critical: {{ outputs['push-code-analysis'].criticalIssues }}, High: {{ outputs['push-code-analysis'].errorIssues }}",
                "short": false
              }
            ],
            "footer": "Visor Analysis",
            "footer_icon": "https://example.com/visor-icon.png",
            "ts": {{ timestamp | date: '%s' }}
          }
        ]
      }

  # Create GitHub issue if critical problems found
  create-github-issue:
    type: webhook
    depends_on: [push-code-analysis]
    if: "outputs['push-code-analysis'].criticalIssues > 0"
    url: "https://api.github.com/repos/{{ outputs['github-push-receiver'].repository }}/issues"
    method: POST
    headers:
      Authorization: "token ${GITHUB_TOKEN}"  # Read from GITHUB_TOKEN environment variable
      Accept: "application/vnd.github.v3+json"
    body: |
      {
        "title": "Critical issues found in commit {{ outputs['github-push-receiver'].commit | slice: 0, 8 }}",
        "body": "## Visor Analysis Report\n\n**Branch:** {{ outputs['github-push-receiver'].branch }}\n**Commit:** {{ outputs['github-push-receiver'].commit }}\n\n### Critical Issues Found\n\n{% for issue in outputs['push-code-analysis'].issues %}{% if issue.severity == 'critical' %}- **{{ issue.category }}**: {{ issue.message }}\n  - File: `{{ issue.file }}:{{ issue.line }}`\n{% endif %}{% endfor %}\n\n---\n*This issue was automatically created by Visor*",
        "labels": ["critical", "automated", "security"],
        "assignees": ["{{ outputs['github-push-receiver'].author }}"]
      }

  # === JIRA Integration Pipeline ===

  # Receive JIRA webhook events
  jira-receiver:
    type: webhook_input
    endpoint: "/jira/issue"
    on: [webhook_received]

  # Analyze JIRA issue for code implications
  jira-code-impact:
    type: ai
    depends_on: [jira-receiver]
    prompt: |
      JIRA issue update:
      - Key: {{ outputs['jira-receiver'].issue_key }}
      - Status: {{ outputs['jira-receiver'].status }}
      - Priority: {{ outputs['jira-receiver'].priority }}

      {% if outputs['jira-receiver'].status == 'In Progress' %}
      Generate a checklist of code areas that might be affected by this issue.
      {% elsif outputs['jira-receiver'].status == 'Done' %}
      Suggest verification steps and potential regression test areas.
      {% endif %}
    group: jira-analysis

  # Update team dashboard
  update-dashboard:
    type: webhook
    depends_on: [jira-code-impact]
    url: "${DASHBOARD_WEBHOOK}"  # Read from DASHBOARD_WEBHOOK environment variable
    method: PUT
    body: |
      {
        "widget": "jira-updates",
        "data": {
          "issue": "{{ outputs['jira-receiver'].issue_key }}",
          "status": "{{ outputs['jira-receiver'].status }}",
          "analysis": {{ outputs['jira-code-impact'].suggestions | json }},
          "updated_at": "{{ timestamp }}"
        }
      }

  # === Multi-source Aggregation ===

  # Daily summary combining multiple sources
  daily-summary:
    type: ai
    schedule: "0 18 * * *"  # 6 PM daily
    depends_on: []  # Will access historical data if available
    prompt: |
      Generate a daily development summary including:
      1. Push activity from today
      2. JIRA issues updated
      3. Security scan results
      4. Performance metrics

      Format as an executive summary with key metrics and action items.
    group: daily-report

  # Send daily summary to multiple channels
  broadcast-summary:
    type: webhook
    depends_on: [daily-summary]
    url: "${BROADCAST_WEBHOOK}"  # Read from BROADCAST_WEBHOOK environment variable
    body: |
      {
        "recipients": [
          {
            "channel": "email",
            "to": "team@example.com",
            "subject": "Daily Visor Summary - {{ timestamp | date: '%Y-%m-%d' }}"
          },
          {
            "channel": "slack",
            "to": "#daily-standup"
          },
          {
            "channel": "teams",
            "to": "Development Team"
          }
        ],
        "content": {
          "summary": {{ outputs['daily-summary'] | json }},
          "metrics": {
            "total_pushes": 0,
            "issues_resolved": 0,
            "critical_findings": 0
          }
        }
      }

output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: true