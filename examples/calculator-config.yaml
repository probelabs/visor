version: "1.0"

# Interactive Calculator Example
# Demonstrates human-input + memory + JavaScript workflow
#
# Usage:
#   visor --config examples/calculator-config.yaml
#
# Or with inline messages:
#   visor --config examples/calculator-config.yaml \
#     --message 42  # First run asks for number1
#
# The workflow will:
# 1. Ask for first number
# 2. Store it in memory
# 3. Ask for second number
# 4. Store it in memory
# 5. Ask for operation (+, -, *, /)
# 6. Calculate result using JavaScript
# 7. Display formatted result

memory:
  storage: memory
  namespace: calculator

checks:
  # Step 1: Get first number
  get-number1:
    type: human-input
    prompt: "Enter the first number:"
    placeholder: "e.g., 42"
    allow_empty: false

  # Step 2: Store first number in memory
  store-number1:
    type: memory
    depends_on: [get-number1]
    operation: set
    namespace: calculator
    key: number1
    value_js: "parseFloat(outputs['get-number1'])"

  # Step 3: Get second number
  get-number2:
    type: human-input
    depends_on: [store-number1]
    prompt: "Enter the second number:"
    placeholder: "e.g., 7"
    allow_empty: false

  # Step 4: Store second number in memory
  store-number2:
    type: memory
    depends_on: [get-number2]
    operation: set
    namespace: calculator
    key: number2
    value_js: "parseFloat(outputs['get-number2'])"

  # Step 5: Get operation
  get-operation:
    type: human-input
    depends_on: [store-number2]
    prompt: "Select operation (+, -, *, /):"
    placeholder: "Enter one of: + - * /"
    allow_empty: false

  # Step 6: Store operation in memory
  store-operation:
    type: memory
    depends_on: [get-operation]
    operation: set
    namespace: calculator
    key: operation
    value_js: "outputs['get-operation'].trim()"

  # Step 7: Perform calculation using memory and JavaScript
  calculate:
    type: memory
    depends_on: [store-operation]
    operation: exec_js
    namespace: calculator
    memory_js: |
      // Get values from memory
      const num1 = memory.get('number1', 'calculator');
      const num2 = memory.get('number2', 'calculator');
      const op = memory.get('operation', 'calculator');

      // Log for debugging
      log('Calculating:', num1, op, num2);

      // Perform calculation
      let result;
      switch(op) {
        case '+':
          result = num1 + num2;
          break;
        case '-':
          result = num1 - num2;
          break;
        case '*':
          result = num1 * num2;
          break;
        case '/':
          if (num2 === 0) {
            throw new Error('Division by zero!');
          }
          result = num1 / num2;
          break;
        default:
          throw new Error('Invalid operation: ' + op);
      }

      // Store result in memory
      memory.set('result', result, 'calculator');

      // Return result for output
      return result;

  # Step 8: Display the result
  show-result:
    type: log
    depends_on: [calculate]
    message: |

      ╔════════════════════════════════════════╗
      ║          CALCULATION RESULT            ║
      ╠════════════════════════════════════════╣
      ║                                        ║
      ║  {{ outputs['get-number1'] }} {{ outputs['get-operation'] }} {{ outputs['get-number2'] }} = {{ outputs['calculate'] }}
      ║                                        ║
      ╚════════════════════════════════════════╝

output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: false
