version: "1.0"

# Example: Simple counter with increment operation
# This demonstrates using increment for tracking metrics

memory:
  storage: memory
  namespace: default

steps:
  # Initialize counters
  init-counters:
    type: script
    content: |
      // Initialize multiple counters
      memory.set('processed', 0);
      memory.set('errors', 0);
      memory.set('warnings', 0);
      return { initialized: true };

  # Simulate processing files
  process-file-1:
    type: memory
    operation: increment
    key: processed
    depends_on: [init-counters]

  process-file-2:
    type: memory
    operation: increment
    key: processed

  # Track errors
  track-error:
    type: memory
    operation: increment
    key: errors
    depends_on: [process-file-1]

  # Track multiple warnings
  track-warnings:
    type: memory
    operation: increment
    key: warnings
    value: 3  # Increment by 3

  # Generate report using script
  generate-report:
    type: script
    depends_on: [process-file-2, track-error, track-warnings]
    content: |
      const processed = memory.get('processed');
      const errors = memory.get('errors');
      const warnings = memory.get('warnings');

      // Calculate success rate
      const successRate = ((processed - errors) / processed * 100).toFixed(2);

      // Store report
      memory.set('report', {
        processed,
        errors,
        warnings,
        successRate: `${successRate}%`
      });

      return memory.get('report');

  # Display results
  display-report:
    type: log
    depends_on: [generate-report]
    message: |
      Processing Report:
      - Files processed: {{ outputs['generate-report'].processed }}
      - Errors: {{ outputs['generate-report'].errors }}
      - Warnings: {{ outputs['generate-report'].warnings }}
      - Success rate: {{ outputs['generate-report'].successRate }}

  # Example: View counter with decrement
  decrement-example:
    type: script
    content: |
      // Initialize views and clicks
      memory.set('views', 100);
      memory.set('clicks', 25);

      // Increment views
      memory.increment('views', 50);

      // Decrement (negative increment) remaining quota
      memory.set('quota', 1000);
      memory.increment('quota', -memory.get('clicks'));

      return {
        views: memory.get('views'),
        clicks: memory.get('clicks'),
        quota: memory.get('quota')
      };
