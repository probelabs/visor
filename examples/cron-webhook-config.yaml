version: "1.0"

# Global HTTP server configuration for receiving webhooks
# Note: ${...} syntax reads from environment variables
# This server is automatically disabled when running in GitHub Actions
http_server:
  enabled: true
  port: 8080
  host: "0.0.0.0"
  auth:
    type: bearer_token
    secret: "${WEBHOOK_SECRET}"  # Read from WEBHOOK_SECRET environment variable
  endpoints:
    - path: "/deploy"
      name: "deployment-webhook"
      transform: |
        {
          "environment": "{{ webhook.environment }}",
          "version": "{{ webhook.version }}",
          "service": "{{ webhook.service }}",
          "timestamp": "{{ webhook.timestamp | default: timestamp }}"
        }
    - path: "/ci-complete"
      name: "ci-webhook"

checks:
  # Scheduled nightly security scan
  nightly-security-scan:
    type: ai
    schedule: "0 2 * * *"  # Every night at 2 AM
    prompt: |
      Perform a comprehensive security audit of the codebase.
      Focus on:
      - SQL injection vulnerabilities
      - XSS vulnerabilities
      - Authentication/authorization issues
      - Sensitive data exposure
      - Dependency vulnerabilities
    group: security
    schema: code-review

  # Send security scan results to Slack
  security-to-slack:
    type: webhook
    depends_on: [nightly-security-scan]
    url: "${SLACK_WEBHOOK_URL}"  # Read from SLACK_WEBHOOK_URL environment variable
    method: POST
    headers:
      Content-Type: "application/json"
    body: |
      {
        "text": "ðŸ”’ Nightly Security Scan Results",
        "blocks": [
          {
            "type": "header",
            "text": {
              "type": "plain_text",
              "text": "Security Scan Report"
            }
          },
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "*Total Issues:* {{ outputs['nightly-security-scan'].totalIssues }}\n*Critical:* {{ outputs['nightly-security-scan'].criticalIssues }}\n*Errors:* {{ outputs['nightly-security-scan'].errorIssues }}"
            }
          },
          {% if outputs['nightly-security-scan'].issues %}
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "*Top Issues:*\n{% for issue in outputs['nightly-security-scan'].issues | slice: 0, 3 %}â€¢ {{ issue.message | truncate: 80 }}\n{% endfor %}"
            }
          },
          {% endif %}
          {
            "type": "context",
            "elements": [
              {
                "type": "mrkdwn",
                "text": "Scan completed at {{ timestamp }}"
              }
            ]
          }
        ]
      }

  # Weekly performance analysis
  weekly-performance:
    type: ai
    schedule: "0 0 * * 0"  # Sunday at midnight
    prompt: |
      Analyze the codebase for performance issues:
      - Inefficient algorithms (O(nÂ²) or worse)
      - Database N+1 queries
      - Memory leaks
      - Unnecessary re-renders (React/Vue)
      - Bundle size issues
    group: performance
    schema: code-review

  # Webhook input for deployment notifications
  deployment-webhook:
    type: webhook_input
    endpoint: "/deploy"
    on: [webhook_received]

  # Post-deployment validation check
  post-deploy-validation:
    type: ai
    depends_on: [deployment-webhook]
    prompt: |
      Deployment notification received:
      - Environment: {{ outputs['deployment-webhook'].environment }}
      - Version: {{ outputs['deployment-webhook'].version }}
      - Service: {{ outputs['deployment-webhook'].service }}

      Analyze the deployed version for:
      1. Configuration drift from expected state
      2. Security implications of the deployment
      3. Potential compatibility issues
      4. Required post-deployment tasks

      Generate actionable recommendations.
    group: deployment
    schema: plain

  # Send deployment analysis to ops team
  notify-ops-team:
    type: webhook
    depends_on: [post-deploy-validation]
    url: "${OPS_WEBHOOK_URL}"  # Read from OPS_WEBHOOK_URL environment variable
    method: POST
    headers:
      Content-Type: "application/json"
      X-API-Key: "${OPS_API_KEY}"  # Read from OPS_API_KEY environment variable
    body: |
      {
        "deployment": {
          "environment": "{{ outputs['deployment-webhook'].environment }}",
          "version": "{{ outputs['deployment-webhook'].version }}",
          "service": "{{ outputs['deployment-webhook'].service }}"
        },
        "analysis": {
          "issues": {{ outputs['post-deploy-validation'].issues | json }},
          "recommendations": {{ outputs['post-deploy-validation'].suggestions | json }},
          "severity": "{% if outputs['post-deploy-validation'].criticalIssues > 0 %}critical{% elsif outputs['post-deploy-validation'].errorIssues > 0 %}error{% elsif outputs['post-deploy-validation'].warningIssues > 0 %}warning{% else %}info{% endif %}"
        },
        "timestamp": "{{ timestamp }}",
        "visor_version": "1.0"
      }

  # CI completion webhook input
  ci-completion:
    type: webhook_input
    endpoint: "/ci-complete"
    transform: |
      {
        "build_id": "{{ webhook.build_id }}",
        "status": "{{ webhook.status }}",
        "branch": "{{ webhook.branch }}",
        "commit": "{{ webhook.commit }}",
        "test_results": {{ webhook.test_results | json }}
      }

  # Analyze CI results
  ci-analysis:
    type: ai
    depends_on: [ci-completion]
    prompt: |
      CI build completed:
      - Status: {{ outputs['ci-completion'].status }}
      - Branch: {{ outputs['ci-completion'].branch }}
      - Test Results: {{ outputs['ci-completion'].test_results }}

      {% if outputs['ci-completion'].status == 'failed' %}
      Analyze the failure and provide:
      1. Root cause analysis
      2. Suggested fixes
      3. Impact assessment
      {% else %}
      Review the successful build for:
      1. Test coverage improvements
      2. Performance metrics
      3. Code quality trends
      {% endif %}

  # Hourly monitoring check (business hours only)
  business-hours-monitor:
    type: tool
    schedule: "0 9-17 * * 1-5"  # Every hour 9 AM - 5 PM, Monday-Friday
    exec: "curl -s https://api.example.com/health"
    group: monitoring

  # Send monitoring alerts
  monitoring-alert:
    type: webhook
    depends_on: [business-hours-monitor]
    url: "${ALERT_WEBHOOK_URL}"  # Read from ALERT_WEBHOOK_URL environment variable
    body: |
      {
        "service": "API Health Check",
        "status": "{{ outputs['business-hours-monitor'].exitCode == 0 ? 'healthy' : 'unhealthy' }}",
        "timestamp": "{{ timestamp }}",
        "details": {{ outputs['business-hours-monitor'] | json }}
      }
    if: "outputs['business-hours-monitor'].exitCode != 0"

output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: true
  suppressionEnabled: true