# Claude Code Provider Configuration Example
# This example demonstrates how to use the Claude Code provider
# for advanced AI-powered code reviews with MCP tools

version: "1.0"
project: claude-code-example
language: typescript

# Claude Code checks with various configurations
checks:
  # Basic Claude Code analysis
  claude_security_review:
    type: claude-code
    group: security
    prompt: |
      Analyze this code for security vulnerabilities including:
      - SQL injection risks
      - XSS vulnerabilities
      - Authentication/authorization issues
      - Sensitive data exposure
      - Input validation problems
    claude_code:
      allowedTools: ['Grep', 'Read']
      maxTurns: 3
      systemPrompt: "You are a senior security engineer conducting a thorough security audit."
    on: [pr_opened, pr_updated]

  # Architecture analysis with MCP tools
  claude_architecture:
    type: claude-code
    group: architecture
    prompt: |
      Analyze the code architecture and provide insights on:
      - Code organization and structure
      - Design patterns usage
      - Coupling and cohesion
      - Modularity and maintainability
    claude_code:
      allowedTools:
        - Read
        - Grep
        - analyze_file_structure
        - detect_patterns
        - calculate_complexity
      maxTurns: 5
      systemPrompt: "You are a software architect reviewing code for best practices."
    on: [pr_opened, pr_updated]

  # Performance analysis with custom MCP server
  claude_performance:
    type: claude-code
    group: performance
    prompt: |
      Review the code for performance issues:
      - Algorithm efficiency
      - Database query optimization
      - Memory leaks and management
      - Caching opportunities
      - Async/await patterns
    claude_code:
      allowedTools:
        - Read
        - Grep
        - calculate_complexity
        - suggest_improvements
      maxTurns: 4
      systemPrompt: "Focus on performance bottlenecks and optimization opportunities."
      # Custom MCP server for performance profiling
      mcpServers:
        perf_analyzer:
          command: "node"
          args: ["./tools/performance-analyzer.js"]
          env:
            PROFILE_MODE: "detailed"
    on: [pr_opened, pr_updated]

  # Code quality with web search
  claude_quality:
    type: claude-code
    group: quality
    prompt: |
      Assess overall code quality:
      - Naming conventions and readability
      - Documentation completeness
      - Test coverage assessment
      - Error handling
      - Code duplication
      Search for best practices if needed.
    claude_code:
      allowedTools:
        - Read
        - Grep
        - WebSearch
        - detect_patterns
        - suggest_improvements
      maxTurns: 6
      systemPrompt: "You are a code quality expert. Use web search to find current best practices when needed."
    on: [pr_opened, pr_updated]

  # Dependency analysis with session reuse
  claude_dependencies:
    type: claude-code
    group: dependencies
    prompt: |
      Analyze the project dependencies:
      - Outdated packages
      - Security vulnerabilities in dependencies
      - Unused dependencies
      - Missing peer dependencies
    claude_code:
      allowedTools:
        - Read
        - Grep
        - WebSearch
      maxTurns: 3
    depends_on: [claude_quality]
    reuse_ai_session: true  # Reuse session from quality check
    on: [pr_opened, pr_updated]

  # Advanced review with subagent
  claude_comprehensive:
    type: claude-code
    group: comprehensive
    prompt: |
      Perform a comprehensive code review covering all aspects.
      Delegate specific tasks to specialized subagents as needed.
    claude_code:
      allowedTools:
        - Read
        - Grep
        - WebSearch
        - analyze_file_structure
        - detect_patterns
        - calculate_complexity
        - suggest_improvements
      maxTurns: 10
      systemPrompt: "You are the lead code reviewer. Use all available tools and delegate to subagents."
      # Subagent for specialized tasks
      subagent: "./.claude/agents/code-reviewer.md"
      # Hooks for custom processing
      hooks:
        onStart: "echo 'Starting comprehensive Claude Code review'"
        onToolUse: "./hooks/log-tool-usage.sh"
        onEnd: "echo 'Comprehensive review complete'"
    on: [manual]  # Run manually due to high resource usage

# Output configuration
output:
  # PR comment format
  pr_comment:
    enabled: true
    update_existing: true
    group_by: group

  # Multiple output formats
  format: table

  # Save detailed reports
  file:
    enabled: true
    path: "./reports/claude-review-{{date}}.md"
    format: markdown

# Global AI settings (fallback for non-Claude checks)
ai_provider: google
ai_model: gemini-pro

# Failure conditions
fail_if: "criticalIssues > 0 || securityIssues > 5"

# Custom MCP server configuration
# This can be extended in .mcp.json for more servers
mcp_config:
  servers:
    code_analyzer:
      command: "python"
      args: ["./mcp/analyzer.py"]
      env:
        ANALYSIS_LEVEL: "deep"

    security_scanner:
      command: "node"
      args: ["./mcp/security.js"]
      env:
        SCAN_MODE: "full"

# Environment variables for checks
env:
  ANALYSIS_DEPTH: "comprehensive"
  INCLUDE_SUGGESTIONS: "true"
  MAX_FILE_SIZE: "1000000"