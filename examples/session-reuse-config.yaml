# Example configuration demonstrating AI session reuse functionality
# This allows subsequent checks to continue conversations with AI models

version: "1.0"

# Example 1: Simple session reuse for follow-up analysis
checks:
  # Initial security analysis - creates a new AI session
  security-analysis:
    type: ai
    prompt: |
      You are a security expert reviewing code changes. Analyze the provided code for:

      1. Authentication and authorization issues
      2. Input validation vulnerabilities
      3. Data exposure risks
      4. Cryptographic weaknesses
      5. Injection vulnerabilities

      Provide specific examples and recommendations for each issue found.
    on:
      - pr_opened
      - pr_updated
    ai:
      provider: anthropic  # or google, openai
      model: claude-3-sonnet-20240229

  # Follow-up check that reuses the previous AI session
  security-remediation:
    type: ai
    prompt: |
      Based on our previous security analysis discussion, now provide:

      1. Detailed remediation steps for each identified security issue
      2. Code examples showing secure implementations
      3. Best practices specific to this codebase
      4. Priority ranking of fixes needed

      Build upon the context we established in our previous conversation.
    on:
      - pr_opened
      - pr_updated
    depends_on:
      - security-analysis
    reuse_ai_session: true  # This will reuse the AI session from security-analysis

# Example 2: Multi-level session reuse chain
  architecture-review:
    type: ai
    prompt: |
      Analyze the architectural patterns and design decisions in this code.
      Identify the main components, their interactions, and design quality.
    on:
      - pr_opened
    ai:
      provider: anthropic
      model: claude-3-sonnet-20240229

  performance-analysis:
    type: ai
    prompt: |
      Continuing our architectural discussion, now focus on performance aspects.
      Consider the architectural patterns we identified and analyze:

      1. Performance bottlenecks
      2. Scalability concerns
      3. Resource usage efficiency
      4. Optimization opportunities
    on:
      - pr_opened
    depends_on:
      - architecture-review
    reuse_ai_session: true

  recommendations-summary:
    type: ai
    prompt: |
      Based on our complete analysis covering architecture and performance,
      provide a prioritized summary of recommendations with:

      1. Critical issues requiring immediate attention
      2. Medium-term improvements
      3. Long-term architectural considerations
      4. Implementation roadmap
    on:
      - pr_opened
    depends_on:
      - performance-analysis
    reuse_ai_session: true

# Example 3: Mixed session reuse and independent checks
  code-style:
    type: ai
    prompt: |
      Review code style, formatting, and maintainability concerns.
      Focus on readability, naming conventions, and code organization.
    on:
      - pr_opened
    ai:
      provider: openai
      model: gpt-4

  documentation-review:
    type: ai
    prompt: |
      Review documentation quality including:
      - Code comments
      - README updates
      - API documentation
      - Inline documentation
    on:
      - pr_opened
    # This runs independently - no session reuse

  comprehensive-summary:
    type: ai
    prompt: |
      Create a comprehensive summary combining insights from all previous analyses.
      Provide an executive summary with key findings and recommendations.
    on:
      - pr_opened
    depends_on:
      - security-remediation
      - recommendations-summary
      - code-style
      - documentation-review
    reuse_ai_session: true  # Reuses session from security-remediation (first dependency)

# Output configuration
output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: true
    debug:
      enabled: true
      includePrompts: false
      includeRawResponses: false
      includeTiming: true
      includeProviderInfo: true

# Execution settings
max_parallelism: 3  # Session reuse checks will still run sequentially when needed
fail_fast: false

# Notes:
# 1. reuse_ai_session: true REQUIRES depends_on to be specified
# 2. Checks with session reuse will force sequential execution within their dependency chain
# 3. Session IDs are automatically managed and cleaned up after execution
# 4. Sessions maintain conversation context, allowing for more sophisticated analysis
# 5. Mix session reuse with independent checks for optimal performance and context