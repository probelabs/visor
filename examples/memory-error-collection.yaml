# Memory Example: Error Collection Across Checks
#
# This example shows how to collect errors from multiple checks
# and report them together at the end.

version: "1.0"

memory:
  storage: file
  file: ./errors.json
  format: json
  auto_save: true

checks:
  # Initialize error collection
  init-errors:
    type: memory
    operation: set
    key: errors
    value: []

  # Lint check
  lint:
    type: command
    exec: npm run lint
    depends_on: [init-errors]
    on_fail:
      run: [collect-lint-error]

  collect-lint-error:
    type: memory
    operation: append
    key: errors
    value:
      check: lint
      message: "{{ outputs['lint'].stderr }}"
      timestamp: "{{ 'now' | date: '%Y-%m-%d %H:%M:%S' }}"

  # Test check
  test:
    type: command
    exec: npm test
    depends_on: [init-errors]
    on_fail:
      run: [collect-test-error]

  collect-test-error:
    type: memory
    operation: append
    key: errors
    value:
      check: test
      message: "{{ outputs['test'].stderr }}"
      timestamp: "{{ 'now' | date: '%Y-%m-%d %H:%M:%S' }}"

  # Build check
  build:
    type: command
    exec: npm run build
    depends_on: [init-errors]
    on_fail:
      run: [collect-build-error]

  collect-build-error:
    type: memory
    operation: append
    key: errors
    value:
      check: build
      message: "{{ outputs['build'].stderr }}"
      timestamp: "{{ 'now' | date: '%Y-%m-%d %H:%M:%S' }}"

  # Report all errors
  report-errors:
    type: log
    depends_on: [lint, test, build]
    message: |
      {% assign all_errors = "errors" | memory_get %}
      {% if all_errors.size > 0 %}
      ## ❌ Errors Found: {{ all_errors.size }}

      {% for error in all_errors %}
      ### {{ error.check | upcase }}
      - **Time**: {{ error.timestamp }}
      - **Message**: {{ error.message | truncate: 200 }}

      {% endfor %}
      {% else %}
      ## ✅ All Checks Passed!
      {% endif %}

  # Fail if any errors were collected
  check-errors:
    type: noop
    depends_on: [report-errors]
    fail_if: |
      const errors = memory.get('errors') || [];
      return errors.length > 0;

output:
  pr_comment:
    format: markdown
    group_by: check
    collapse: false
